<!DOCTYPE HTML>
<html lang="de">
<head>
<title>Variablen und Ausdrücke - Definition &amp; Verwendung | AutoHotkey</title>
<meta name="description" content="Erfahren Sie mehr über Variablen, Ausdrücke, Operatoren, interne Variablen und Kapazität und Speicher von Variablen." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="static/theme.css" rel="stylesheet" type="text/css" />
<script src="static/content.js" type="text/javascript"></script>
<script src="static/ga4.js" type="text/javascript"></script>
</head>

<body>
<h1>Variablen und Ausdrücke</h1>

<h2 id="toc">Inhaltsverzeichnis</h2>
<ul>
  <li><a href="#Intro">Variablen</a></li>
  <li><a href="#Expressions">Ausdrücke (Expressions)</a></li>
  <li><a href="#Operators">Operatoren in Ausdrücken</a></li>
  <li><a href="#BuiltIn">Interne Variablen</a></li>
  <li><a href="#cap">Kapazität und Speicher von Variablen</a></li>
</ul>
<span id="Variables"></span><h2 id="Intro">Variablen</h2>
<p>Allgemeine Erläuterungen und Details zur Funktionsweise finden Sie unter <a href="Concepts.htm#variables">Variablen</a>.</p>
<p id="assigning"><strong>Werte in Variablen speichern</strong>: Um eine Zeichenkette oder Zahl in eine Variable zu speichern, gibt es zwei Methoden: <a href="Language.htm#legacy-syntax">Altmodisch</a> und <a href="Language.htm#expressions">Ausdruck</a>. Die altmodische Methode verwendet den <a href="commands/SetEnv.htm">Gleichheitszeichenoperator (=)</a>, um <a href="Language.htm#unquoted-text"><strong>anführungszeichenlose</strong> direkt geschriebene Zeichenketten</a> und in Prozentzeichen gesetzte Variablen zuzuweisen. Zum Beispiel:</p>
<pre>MeineZahl = 123
MeineZkette = Das ist eine direkt geschriebene Zeichenkette.
KopieVonVar = %Var%  <em>; Bei dem Operator "=" sind Prozentzeichen notwendig, um den Inhalt einer Variable abzurufen.</em></pre>
<p>Die Ausdrucksmethode hingegen verwendet den <a href="commands/SetExpression.htm">Doppelpunkt-Gleich-Operator (:=)</a>, um Zahlen, <a href="Language.htm#strings"><strong>in Anführungszeichen gesetzte</strong> Zeichenketten</a> und andere Arten von <a href="Language.htm#expressions">Ausdrücken</a> zuzuweisen. Die folgenden Beispiele sind funktional identisch mit den vorherigen Beispielen:</p>
<pre>MeineZahl := 123
MeineZkette := "Das ist eine direkt geschriebene Zeichenkette."
KopieVonVar := Var  <em>; Bei dem Operator ":=" werden Prozentzeichen weggelassen.</em></pre>
<p>Die letztere Methode wird von vielen bevorzugt, weil sie eine <a href="Language.htm#expressions">Ausdruckssyntax</a> unterstützt, die besser zu verstehen ist und nahezu identisch zur Syntax vieler anderer Sprachen ist.</p>
<p>Mit diesen Methoden kann natürlich auch der Inhalt einer Variable gelöscht werden (um sie sozusagen leer zu machen):</p>
<pre>MeineVar =
MeineVar := ""</pre>
<p>Die zwei aufeinanderfolgenden Anführungszeichen oben sollten nur mit dem Operator := verwendet werden. Verwendet man stattdessen den Operator =, würde dies dazu führen, dass zwei direkt geschriebene Anführungszeichen in die Variable gespeichert werden.</p>
<p id="retrieving"><strong>Inhalte von Variablen abrufen</strong>: Es gibt, analog zu den beiden Speichermethoden, auch zwei Methoden, wie man Variablenwerte abrufen kann: <a href="Language.htm#legacy-syntax">Altmodisch</a> und <a href="Language.htm#variables">Ausdruck</a>. Bei der altmodischen Methode müssen die Namen der Variablen mit Prozentzeichen umschlossen werden, um ihre Inhalte abzurufen. Zum Beispiel:</p>
<pre><a href="commands/MsgBox.htm">MsgBox</a> Der Wert in der Variable namens Var ist %Var%.
KopieVonVar = %Var%</pre>
<p>Bei der Ausdrucksmethode hingegen werden die Namen der Variablen nicht mit Prozentzeichen umschlossen und <a href="Language.htm#strings">direkt geschriebene Zeichenketten</a> in Anführungszeichen gesetzt. Demnach wären die folgenden Beispiele funktional identisch mit den vorherigen Beispielen:</p>
<pre>MsgBox % "Der Wert in der Variable namens Var ist " . Var . "."  <em>; Mit einem Punkt können zwei Zeichenketten verkettet (verbunden) werden.</em>
KopieVonVar := Var</pre>
<p>In der MsgBox-Zeile oben wird ein <a href="Language.htm#-expression">Prozent- und Leerzeichen</a> verwendet, um den Parameter in den Ausdrucksmodus zu versetzen. Diese Vorgehensweise ist hierbei notwendig, weil nahezu alle Befehlsparameter standardmäßig den altmodischen Modus verwenden, sofern nicht anders dokumentiert.</p>
<p><strong>Variablen vergleichen</strong>: Bitte lesen Sie sich den folgenden Abschnitt durch, um zu erfahren, welche Vergleiche es gibt und wann runde Klammern notwendig sind.</p>

<h2 id="Expressions">Ausdrücke (Expressions)</h2>
<p class="note">Eine strukturierte Übersicht und weitere Erläuterungen finden Sie unter <a href="Language.htm#expressions">Ausdrücke (Expressions)</a>.</p>
<p>Ausdrücke sind nützlich, um eine Reihe von Variablen, direkt geschriebenen Zeichenketten und/oder direkt geschriebenen Zahlen zu verarbeiten.</p>
<p>Variablennamen (außer <a href="misc/Arrays.htm#pseudo">Pseudo-Arrays</a> und andere <a href="#ref">Doppelreferenzierungen</a>) dürfen innerhalb eines Ausdrucks nicht mit Prozentzeichen umschlossen werden. Folglich müssen direkt geschriebene Zeichenketten in Anführungszeichen gesetzt werden, damit sie nicht als Variablen interpretiert werden. Zum Beispiel:</p>
<pre>if (AktuelleEinstellung &gt; 100 or GefundeneFarbe != "Blau")
    MsgBox Die Einstellung ist zu hoch oder die Farbe ist falsch.</pre>
<p>Im obigen Beispiel ist "Blau" in Anführungszeichen gesetzt, weil es sich um eine direkt geschriebene Zeichenkette handelt. Geben Sie zwei aufeinanderfolgende Anführungszeichen an, um ein <em>tatsächliches</em> Anführungszeichen in eine direkt geschriebene Zeichenkette einzufügen. Zum Beispiel: <code>"Sie sagte: <span class="red">""</span>Ein Apfel täglich.<span class="red">""</span>"</code>.</p>
<p class="warning"><strong>Hinweis</strong>: Es gibt verschiedene Typen von <a href="Language.htm#if-statement">If-Anweisungen</a>, die wie Ausdrücke aussehen, aber in Wirklichkeit keine sind.</p>
<p><strong>Leere Zeichenketten</strong>: Um eine leere Zeichenkette in einem Ausdruck anzugeben, verwenden Sie zwei aufeinanderfolgende Anführungszeichen. Zum Beispiel wäre die Anweisung <code>if (MeineVar != "")</code> wahr, wenn <em>MeineVar</em> nicht leer ist. In einer <a href="commands/IfEqual.htm">traditionellen if-Anweisung</a> werden zwei aufeinanderfolgende Anführungszeichen jedoch als direkt geschriebener Text behandelt. Zum Beispiel wäre die Anweisung <code>if MeineVar = ""</code> nur wahr, wenn <em>MeineVar</em> tatsächlich zwei Anführungszeichen enthält. Um also zu prüfen, ob eine Variable in einer traditionellen if-Anweisung leer ist, können Sie den Operator = oder != ohne Vergleichswert verwenden; zum Beispiel: <code>if Var =</code>.</p>
<p>Beachten Sie, dass ungültige Ausdrücke wie <code>(x +* 3)</code> immer eine leere Zeichenkette zurückgeben.</p>
<p><strong>Ergebnis eines Ausdrucks speichern</strong>: Um das Ergebnis eines Ausdrucks einer Variable zuzuweisen, müssen Sie den <a href="commands/SetExpression.htm">Operator :=</a> verwenden. Zum Beispiel:</p>
<pre>NettoPreis := Preis * (1 - Rabatt/100)</pre>
<p id="Boolean"><strong>Boolesche Werte</strong>: Das Ergebnis eines Ausdrucks (z. B. einer IF-Anweisung) ist falsch (False), wenn es leer oder 0 ist, oder wahr (True), wenn ein anderes Ergebnis vorliegt. Zum Beispiel wäre die Anweisung <code>if ElementeAnzahl</code> nur dann falsch, wenn ElementeAnzahl leer oder 0 ist. Der Ausdruck <code>if not ElementeAnzahl</code> würde das gegenteilige Ergebnis liefern.</p>
<p>Operatoren wie NOT/AND/OR/&gt;/=/&lt; erzeugen automatisch einen wahren oder falschen Wert: 1 für True und 0 für False. Im folgenden Beispiel bekommt die <em>Done</em>-Variable eine 1 zugewiesen, wenn eine der beiden Bedingungen wahr ist:</p>
<pre>Done := A_Index &gt; 5 or FoundIt</pre>
<p>Wie oben angedeutet, kann eine Variable zum Speichern eines falschen Wertes verwendet werden, indem man sie leer macht oder ihr eine 0 zuweist. Verwenden Sie dann die Kurzanweisung <code>if Done</code>, um zu überprüfen, ob die Done-Variable wahr oder falsch ist.</p>
<p><span id="True"></span><span id="False"></span>Die Wörter <em>True</em> und <em>False</em> sind interne Variablen, die 1 und 0 enthalten. Sie können verwendet werden, um ein Skript besser lesbar zu machen, z. B.:</p>
<pre>GroßKleinSensitiv := false
SucheFortsetzen := true</pre>
<p><strong>Integer (ganze Zahlen) und Floating-Point-Zahlen (Gleitkommazahlen)</strong>: Zahlen, die einen Dezimalpunkt enthalten, werden innerhalb eines Ausdrucks als Floating-Point-Zahlen gewertet; alle anderen Zahlen werden als Integer behandelt. Bei den meisten Operatoren -- wie Addition und Multiplikation -- gilt: Wenn einer der Eingabewerte eine Floating-Point-Zahl ist, wird das Ergebnis auch eine Floating-Point-Zahl sein.</p>
<p>Innerhalb und außerhalb von Ausdrücken können Integer sowohl im hexadezimalen als auch dezimalen Format geschrieben werden. Hexadezimalzahlen beginnen mit dem 0x-Präfix. Zum Beispiel wäre <code>Sleep 0xFF</code> das gleiche wie <code>Sleep 255</code>. <span class="ver">[v1.0.46.11+]</span>: Floating-Point-Zahlen in wissenschaftlicher Schreibweise werden erkannt; aber nur, wenn sie einen Dezimalpunkt enthalten (z. B. <code>1<strong>.</strong>0e4</code> und <code>-2<strong>.</strong>1E-4</code>).</p>
<p id="percent-space"><strong>Einen Ausdruck erzwingen</strong>: Standardmäßig unterstützen Befehlsparameter (außer AusgabeVar-Parameter) keine Ausdrücke, aber man kann mithilfe eines Prozentzeichens und Leer- oder Tabulatorzeichens einen Ausdruck in einem Parameter erzwingen. In <span class="ver">[v1.1.21+]</span> kann dieses Präfix in den EingabeVar-Parametern von fast allen Befehlen verwendet werden; benutzen Sie für die traditionellen IF-Befehlen stattdessen <a href="commands/IfExpression.htm">If (Ausdruck)</a>. Diese Technik wird häufig genutzt, um auf <a href="misc/Arrays.htm">Arrays</a> zuzugreifen. Zum Beispiel:</p>
<pre><a href="commands/FileAppend.htm">FileAppend</a>, % MeinArray[i], Meine Datei.txt
<a href="commands/FileAppend.htm">FileAppend</a>, % MeinPseudoArray%i%, Meine Datei.txt
<a href="commands/MsgBox.htm">MsgBox</a> % "Die MeineVar-Variable enthält " . MeineVar . "."
<a href="commands/Loop.htm">Loop</a> % Iterationen + 1
<a href="commands/WinSet.htm">WinSet</a>, Transparent, % X + 100
<a href="commands/Control.htm">Control</a>, Choose, % AktuelleAuswahl - 1</pre>

<h2 id="Operators">Operatoren in Ausdrücken</h2>
<p class="note">Allgemeine Informationen über Operatoren finden Sie unter <a href="Language.htm#operators">Operatoren</a>.</p>
<p>Sofern nicht anders unten angegeben, werden leere Werte (leere Zeichenketten) oder nicht-numerische Werte innerhalb einer mathematischen Operation <strong>nicht</strong> als 0 interpretiert. Stattdessen werden sie als Fehler behandelt, was dazu führt, dass dieser Teil des Ausdrucks als leere Zeichenkette gewertet wird. Wenn die Variable X zum Beispiel leer ist, wird der Ausdruck X+1 einen leeren Wert statt 1 zurückgeben.</p>
<p>Aus historischen Gründen werden <em>in Anführungszeichen gesetzte</em> numerische Zeichenketten wie <code>"123"</code> immer als nicht-numerisch angesehen, wenn sie direkt in einem Ausdruck verwendet werden (aber nicht, wenn sie in eine Variable gespeichert oder von einer Funktion zurückgegeben werden). Dieser nicht-numerische Attribut kann mit einer <a href="#concat">Verkettung</a> erzwungen werden, um Ausdrücke wie <code>"0x" n</code> einen nicht-numerischen Wert erzeugen zu lassen (auch wenn n gültige hexadezimale Ziffern enthalten sollte). Dieses Problem kann man umgehen, indem man den Wert in eine Variable speichert oder ihn via Funktion, wie z. B. <a href="Functions.htm#Round">Round()</a>, übergibt. Generell sollte man vermeiden, direkt geschriebene Zahlen in Anführungszeichen zu setzen, weil dieses Verhalten eventuell in einer zukünftigen Version geändert wird.</p>

<h3 id="operators">Ausdrucksoperatoren (in absteigender Priorität)</h3>
<table class="info">
  <tr>
    <th class="center">Operator</th>
    <th abbr="Beschr">Beschreibung</th>
  </tr>
  <tr id="ref">
    <td class="center bold">%Var%</td>
    <td><p>Umschließt man innerhalb eines Ausdrucks eine Variable mit Prozentzeichen (z. B. %Var%), wird alles, was in dieser Variable <u>enthalten</u> ist, als Name oder Teil eines Namens einer anderen Variable angesehen (wenn es diese Variable nicht gibt, wird %Var% in eine leere Zeichenkette aufgelöst). Meistens wird das verwendet, um auf Elemente eines <a href="misc/Arrays.htm#pseudo">Pseudo-Arrays</a> zu verweisen, wie z. B.:</p>
      <pre>Var := MeinArray%A_Index% + 100</pre>
      <p>Aus Gründen der Abwärtskompatibilität ignorieren Befehlsparameter, die als "kann ein Ausdruck sein" dokumentiert sind, die Prozentzeichen bei einem alleinstehenden Namen, der von Prozentzeichen umschlossen ist (z. B. %Var%, aber nicht Array%i%). Um das zu umgehen, umschließen Sie die Referenz mit runden Klammern; z. B. <code>Sleep (%Var%)</code>.</p>
      <p><span class="ver">[AHK_L 52+]:</span> Zusätzlich zu den normalen Variablen kann %Var% in eine <a href="Concepts.htm#environment-variables">Umgebungsvariable</a>, die Zwischenablage oder eine <a href="#BuiltIn">reservierte/nur lesbare Variable</a> aufgelöst werden. Vor Revision 52 wurde %Var% in solchen Fällen in eine leere Zeichenkette aufgelöst.</p></td>
  </tr>
  <tr>
    <td class="center bold">x.y</td>
    <td><span class="ver">[AHK_L 31+]:</span> <strong>Objektzugriff</strong>. Ruft einen Wert ab, setzt einen Wert oder ruft eine Methode des Objekts <i>x</i> auf. Hierbei ist <i>y</i> ein direkt geschriebener Wert. Siehe <a href="Objects.htm#Usage_Objects">Objektsyntax</a>.</td>
  </tr>
  <tr id="new">
    <td class="center bold">new</td>
    <td><span class="ver">[v1.1.00+]:</span> Erstellt ein neues von einem anderen Objekt abgeleitetes Objekt. Zum Beispiel wäre <code>x := new y</code> generell das gleiche wie <code>x := {base: y}</code>. Nach dem Wort <code>new</code> sollte eine Variable oder ein einfacher Klassenname in Form von <code>GlobaleKlasse.VerschachtelteKlasse</code> erfolgen, und je nach Bedarf Parameter wie in <code>x := new y(z)</code> (hierbei ist <code>y</code> kein Funktionsname, sondern eine Variable). Weitere Informationen finden Sie unter <a href="Objects.htm#Custom_Objects">Benutzerdefinierte Objekte</a>.</td>
  </tr>
  <tr id="IncDec">
    <td class="center bold">++<br>
    --</td>
    <td><strong>Vorherige und nachherige Inkrementierung/Dekrementierung</strong>. Erhöht oder verringert eine Zahlenvariable um 1 (in den Versionen vor 1.0.46 müssen sie allein auf einer Zeile stehen; es dürfen keine anderen Operatoren vorhanden sein). Der Operator kann entweder vor oder nach dem Namen einer Variable erfolgen. Erfolgt der Operator <em>vor</em> dem Namen, wird die Operation sofort durchgeführt und ihr Ergebnis für die nächste Operation verwendet. Zum Beispiel würde <code>Var := ++X</code> die X-Variable sofort um 1 erhöhen und ihr Wert in <em>Var</em> speichern. Erfolgt der Operator <em>nach</em> dem Namen einer Variable, wird die Operation <em>erst</em> durchgeführt, wenn die Variable für die nächste Operation verwendet wurde. Zum Beispiel würde <code>Var := X++</code> die X-Variable erst um 1 erhöhen, wenn der aktuelle Wert von X in <em>Var</em> gespeichert wurde. Aus Gründen der Abwärtskompatibilität behandeln diese Operatoren leere Variablen als 0, sofern sie allein auf einer Zeile stehen; zum Beispiel würde sowohl <code>y := 1, ++x</code> als auch <code>MsgBox % ++x</code> ein leeres Ergebnis erzeugen, wenn x leer ist.</td>
  </tr>
  <tr id="pow">
    <td class="center bold">**</td>
    <td>
      <p><strong>Potenz</strong>. Sowohl die Basis als auch der Exponent können einen Dezimalpunkt enthalten. Ist der Exponent negativ, wird das Ergebnis in eine Floating-Point-Zahl umgewandelt, auch dann, wenn Basis und Exponent Integer sind. Da dieser Operator eine höhere Priorität hat als ein unäres Minuszeichen, wird <code>-2**2</code> wie <code>-(2**2)</code> ausgewertet und daher -4 zurückgeben. Um also eine direkt geschriebene negative Zahl zu potenzieren, muss sie in runden Klammern gesetzt werden, z. B. <code>(-2)**2</code>.</p>
      <p class="note"><strong>Hinweis</strong>: Eine negative Basis in Verbindung mit einem gebrochenen Exponenten wie <code>(-2)**0.5</code> wird nicht unterstützt; das Ergebnis wird eine leere Zeichenkette sein. Schreibweisen wie <code>(-2)**2</code> und <code>(-2)**2.0</code> werden aber unterstützt.</p>
      <p class="warning"><strong>Hinweis</strong>: In AutoHotkey v1 ist ** im Gegensatz zu seinem mathematischen Gegenstück linksassoziativ. <code>x ** y ** z</code> beispielsweise wird als <code>(x ** y) ** z</code> ausgewertet.</p>
    </td>
  </tr>
  <tr id="unary">
    <td class="center bold">-<br>
    !<br>
    ~<br>
    &amp; *</td>
    <td><p><strong>Unäres Minuszeichen (-)</strong>: Obwohl dieser Operator und der Subtraktionsoperator dasselbe Symbol verwenden, wird das unäre Minuszeichen nur auf ein einzelnes Element oder einen Teilausdruck angewendet; zum Beispiel: <code><strong>-</strong>(3 / <strong>-</strong>x)</code>. Unäre Pluszeichen (+) werden hingegen in einem Ausdruck ignoriert.</p>
      <p><strong>Logisches NICHT (!)</strong>: Wenn dieser Operator bei einem Operanden angewendet wird, der leer oder 0 ist, ist das Ergebnis eine 1 (true). Ansonsten ist das Ergebnis eine 0 (false). Zum Beispiel: <code>!x or !(y and z)</code>. Hinweis: Das Wort NOT ist das gleiche wie <strong>!</strong>, allerdings hat <strong>!</strong> eine höhere Priorität. <span class="ver">[v1.0.46+]</span>: Aufeinanderfolgende unäre Operatoren wie <code><strong>!!</strong>Var</code> sind erlaubt, weil sie von rechts nach links ausgewertet werden.</p>
      <p><strong>Bitweises NICHT (~)</strong>: Dieser Operator invertiert jedes Bit seines Operanden. Handelt es sich bei den Operanden um eine Floating-Point-Zahl, wird er vor der Berechnung auf Integer-Größe gekürzt. Ist der Operand eine Zahl zwischen 0 und 4294967295 (0xffffffff), wird er als <u>vorzeichenloser</u> 32-Bit-Wert behandelt. Ansonsten wird er als <u>vorzeichenfähiger</u> 64-Bit-Wert behandelt. Zum Beispiel wäre <code>~0xf0f</code> dann 0xfffff0f0 (4294963440).</p>
      <p id="amp"><strong>Adresse (&amp;)</strong>: <code>&amp;MeineVar</code> ruft die Adresse des Inhalts von <em>MeineVar</em> im Speicher ab, was häufig in Verbindung mit <a href="commands/DllCall.htm#struct">DllCall-Strukturen</a> genutzt wird. <code>&amp;MeineVar</code> deaktiviert außerdem das Caching von Binärzahlen in dieser Variable, was sich negativ auf ihre Leistung auswirken kann, wenn sie Teil einer Berechnung oder eines numerischen Vergleichs ist. Sobald sich die Adresse einer Variable ändert, wird das Caching wieder aktiviert (z. B. via <a href="commands/VarSetCapacity.htm">VarSetCapacity()</a>).</p>
      <p><strong>Dereferenzierung (*)</strong>: <code>*Ausdruck</code> geht davon aus, dass sich <code>Ausdruck</code> in eine numerische Speicheradresse auflöst; es wird versucht, das Byte auf dieser Adresse als Zahl im Bereich von 0 und 255 abzurufen (wenn die Adresse 0 ist, wird immer 0 abgerufen; jede andere ungültige Adresse sollte man vermeiden, da sie das Skript zum Absturz bringen könnte). Beachten Sie, dass <a href="commands/NumGet.htm">NumGet()</a> in der Regel eine deutlich bessere Leistung erzielt, wenn es darum geht, binäre Zahlen abzurufen.</p></td>
  </tr>
  <tr id="MulDiv">
    <td class="center bold">*<br>
    /<br>
    //
    </td>
    <td><p><strong>Multiplizieren (*)</strong>: Das Ergebnis ist ein Integer, wenn beide Eingabewerte Integer sind; ansonsten ist es eine Floating-Point-Zahl.</p>
      <p id="divide"><strong>Echtes Dividieren (/)</strong>: Im Gegensatz zu <a href="commands/EnvDiv.htm">EnvDiv</a> liefert die echte Division immer eine Floating-Point-Zahl, auch dann, wenn beide Eingabewerte Integer sind. Zum Beispiel wäre <code>3/2</code> gleich 1.5 statt 1, und <code>4/2</code> gleich 2.0 statt 2.</p>
      <p id="FloorDivide"><strong>Floor-Dividieren (//)</strong>: Der Doppelschrägstrich-Operator verwendet eine sehr leistungsfähige Integer-Division, wenn beide Eingabewerte Integer sind. Zum Beispiel wäre <code>5//3</code> gleich 1 und <code>5//-3</code> gleich -1. Wenn einer der beiden Eingabewerte eine Floating-Point-Zahl ist, wird eine Floating-Point-Division durchgeführt und das Ergebnis auf den am nächsten links befindlichen Integer gekürzt. Zum Beispiel wäre <code>5//3.0</code> gleich 1.0 und <code>5.0//-3</code> gleich -2.0. Obwohl das Ergebnis dieser Floating-Point-Division ein Integer ist, wird es in nachfolgenden Operationen als Floating-Point-Zahl behandelt. Um stattdessen eine Division mit Rest (Modulo) durchzuführen, siehe <a href="commands/Math.htm#Mod">Mod()</a>.</p>
    <p>Die <a href="#AssignOp">Operatoren *= und /=</a> sind Kurzschreibweisen zum Multiplizieren oder Dividieren eines Variablenwertes mit einem anderen Wert. <code>Var *= 2</code> liefert zum Beispiel das gleiche Ergebnis wie <code>Var := Var * 2</code> (allerdings ist die erste Schreibweise performanter).</p>
    <p>Eine Division durch 0 liefert ein leeres Ergebnis (leere Zeichenkette).</p></td>
  </tr>
  <tr id="AddSub">
    <td class="center bold">+<br>
    -</td>
    <td><p><strong>Addieren (+)</strong> und <strong>Subtrahieren (-)</strong>. Die <a href="#AssignOp">Operatoren += und -=</a> sind Kurzschreibweisen zum Erhöhen oder Verringern eines Variablenwertes um einen beliebigen Wert. <code>Var += 2</code> liefert zum Beispiel das gleiche Ergebnis wie <code>Var := Var + 2</code> (allerdings ist die erste Schreibweise performanter). Des Weiteren gibt es die Möglichkeit, eine Variable mit <a href="#IncDec">Var++, Var--, ++Var oder --Var</a> schrittweise um 1 zu erhöhen oder zu verringern.</p>
    </td>
  </tr>
  <tr id="bitwise">
    <td class="center bold">&lt;&lt;<br>
    &gt;&gt;<br>
    &gt;&gt;&gt;</td>
    <td>
      <p><strong>Bitweise Verschiebung nach links (&lt;&lt;)</strong>. Anwendungsbeispiel: <code>Wert1 &lt;&lt; Wert2</code>. Das ist das gleiche wie, als würde man <em>Wert1</em> mit "2, potenziert um <em>Wert2</em>" multiplizieren.</p>
      <p><strong>Arithmetische bitweise Verschiebung nach rechts (&gt;&gt;)</strong>. Anwendungsbeispiel: <code>Wert1 &gt;&gt; Wert2</code>. Das ist das gleiche wie, als würde man <em>Wert1</em> mit "2, potenziert um <em>Wert2</em>" dividieren und dann das Ergebnis auf den am nächsten links befindlichen Integer runden; zum Beispiel wäre <code>-3&gt;&gt;1</code> gleich -2.</p>
      <p><strong>Logische bitweise Verschiebung nach rechts (&gt;&gt;&gt;)</strong> <span class="ver">[v1.1.35+]</span>. Anwendungsbeispiel: <code>Wert1 &gt;&gt;&gt; Wert2</code>. Im Gegensatz zur arithmetischen bitweisen Verschiebung nach rechts wird bei dieser Verschiebung das Vorzeichen der Zahl nicht beibehalten. Zum Beispiel hat -1 die gleiche Bitdarstellung wie der vorzeichenlose 64-Bit-Integer 0xffffffffffffffffff, daher ist <code>-1 &gt;&gt;&gt; 1</code> 0x7fffffffffffffffff.</p>
      <p>Bei allen drei Operatoren werden Floating-Point-Eingabewerte vor der Berechnung auf einen Integer gekürzt. Die Ergebnisse sind undefiniert, wenn <em>Wert2</em> kleiner als 0 oder größer als 63 ist.</p>
    </td>
  </tr>
  <tr>
    <td class="center bold">&amp;<br>
    ^<br>
    |
    </td>
    <td><strong>Bitweises UND (&amp;)</strong>, <strong>bitweises exklusives ODER (^)</strong> und <strong>bitweises ODER (|)</strong>. Von diesen drei Operatoren hat <strong>&amp;</strong> die höchste Priorität und <strong>|</strong> die niedrigste Priorität. Jeder Floating-Point-Eingabewert wird vor der Berechnung auf einen Integer gekürzt.</td>
  </tr>
  <tr id="concat">
    <td class="center bold">.</td>
    <td><p><strong>Verkettung</strong>. Mit dem Punkt-Operator können zwei Elemente kombiniert werden, um eine einzelne Zeichenkette zu erhalten (auf beiden Seiten des Punktes muss mindestens ein Leerzeichen vorhanden sein). Dasselbe Ergebnis kann auch ohne diesen Punkt erzielt werden (außer bei Zweideutigkeiten wie <code>x <strong>-</strong>y</code>, oder wenn das rechts befindliche Element ein ++ oder -- davor hat). Lässt man den Punkt weg, müssen die Elemente, die zusammengeführt werden sollen, mit mindestens einem Leerzeichen getrennt werden.<br>
      Beispiel (Ausdrucksmethode): <code>Var := "Die Farbe ist " <strong>.</strong> GefundeneFarbe</code><br>
      Beispiel (traditionelle Methode): <code>Var = Die Farbe ist %GefundeneFarbe%</code></p>
        <p>Teilausdrücke können auch verkettet werden. Zum Beispiel: <code>Var := "Der Nettopreis ist " <strong>.</strong> Preis * (1 - Rabatt/100)</code>.</p>
        <p>Eine Zeile, die mit einem Punkt (oder einem anderen Operator) beginnt, wird automatisch mit der darüberliegenden Zeile <a href="Scripts.htm#continuation">verbunden</a>.</p></td>
  </tr>
  <tr id="regex">
    <td class="center bold">~=</td>
    <td><span class="ver">[AHK_L 31+]:</span> Kurzschreibweise für <a href="commands/RegExMatch.htm">RegExMatch()</a>. <code>"abc123" ~= "\d"</code> beispielsweise würde ErrorLevel auf 0 setzen und eine 4 liefern (die Position des ersten numerischen Zeichens). Früher vor <span class="ver">[v1.1.03]</span> war es so, dass dieser Operator und der <em>Gleichheitsoperator (=)</em> die gleiche Priorität hatten und unvollständig dokumentiert war.</td>
  </tr>
  <tr id="compare">
    <td class="center bold">&gt;&nbsp;&nbsp;&nbsp;&lt;<br>
    &gt;= &lt;=</td>
    <td>
      <p><strong>Größer (&gt;)</strong>, <strong>kleiner (&lt;)</strong>, <strong>größer gleich (&gt;=)</strong> und <strong>kleiner gleich (&lt;=)</strong>. Wenn beide Eingabewerte <a href="Concepts.htm#numbers">Zahlen</a> oder <a href="Concepts.htm#numeric-strings">numerische Zeichenketten</a> sind, werden sie numerisch verglichen; ansonsten werden sie alphabetisch verglichen. Der Vergleich ist nur Groß-/Kleinschreibung-sensitiv, wenn <a href="commands/StringCaseSense.htm">StringCaseSense</a> eingeschaltet ist. Siehe auch: <a href="commands/Sort.htm">Sort</a></p>
      <p class="note"><strong>Hinweis</strong>: In AutoHotkey v1 wird eine in Anführungszeichen gesetzte Zeichenkette (oder das Ergebnis vom Verketten mit einer in Anführungszeichen gesetzte Zeichenkette) nie als numerisch gewertet, wenn sie direkt in einem Ausdruck verwendet wird.</p>
    </td>
  </tr>
  <tr id="equal">
    <td class="center bold">=<br>
    ==<br>
    &lt;&gt; !=<br>
    !==</td>
    <td>
      <p><strong>Gleich (=)</strong>, <strong>Groß-/Kleinschreibung-sensitiv gleich (==)</strong> und <strong>ungleich (&lt;&gt; oder !=)</strong>. Wenn beide Eingabewerte <a href="Concepts.htm#numbers">Zahlen</a> oder <a href="Concepts.htm#numeric-strings">numerische Zeichenketten</a> sind, werden sie numerisch verglichen; ansonsten werden sie alphabetisch verglichen. Die Operatoren <strong>!=</strong> und <strong>&lt;&gt;</strong> sind funktional identisch. Die Operatoren <strong>==</strong> und <strong>=</strong> verhalten sich gleich, wenn beide Eingabewerte numerisch sind, es sei denn, einer der Eingabewerte ist nicht numerisch, dann ist <strong>==</strong> immer Groß-/Kleinschreibung-sensitiv und <strong>=</strong> immer nicht-Groß-/Kleinschreibung-sensitiv (die Methode der Nichtsensitivität ist abhängig von <a href="commands/StringCaseSense.htm">StringCaseSense</a>). Die Operatoren <strong>&lt;&gt;</strong> und <strong>!=</strong> berücksichtigen hingegen <a href="commands/StringCaseSense.htm">StringCaseSense</a>.</p>
      <p><strong>Groß-/Kleinschreibung-sensitiv ungleich (!==)</strong> <span class="ver">[v1.1.35+]</span>. Verhält sich identisch zu <strong>==</strong>, außer dass das Ergebnis invertiert wird.</p>
      <p class="note"><strong>Hinweis</strong>: In AutoHotkey v1 wird eine in Anführungszeichen gesetzte Zeichenkette (oder das Ergebnis vom Verketten mit einer in Anführungszeichen gesetzte Zeichenkette) nie als numerisch gewertet, wenn sie direkt in einem Ausdruck verwendet wird.</p>
      <p class="warning"><strong>Veraltet:</strong> Der Operator &lt;&gt; ist nicht für neue Skripte empfohlen. Verwenden Sie stattdessen den Operator !=.</p>
    </td>
  </tr>
  <tr id="not">
    <td class="center bold">NOT</td>
    <td><strong>Logisches NICHT</strong>. Abgesehen von seiner geringeren Priorität ist dieser Operator funktional identisch mit dem <strong>!</strong>-Operator. <code>not (x = 3 or y = 3)</code> wäre zum Beispiel das gleiche wie <code><strong>!</strong>(x = 3 or y = 3)</code>.</td>
  </tr>
  <tr id="and">
    <td class="center bold">AND<br>
    &amp;&amp;</td>
    <td>Beide Operatoren sind ein <strong>logisches UND</strong>. Zum Beispiel: <code>x &gt; 3 and x &lt; 10</code>. Zur Verbesserung der Leistung wird die <a href="Functions.htm#ShortCircuit">Kurzschlussauswertung</a> angewendet. Eine Zeile, die mit AND/OR/&amp;&amp;/|| (oder einem anderen Operator) beginnt, wird automatisch mit der darüberliegenden Zeile <a href="Scripts.htm#continuation">verbunden</a>.</td>
  </tr>
  <tr id="or">
    <td class="center bold">OR<br>
    ||</td>
    <td>Beide Operatoren sind ein <strong>logisches ODER</strong>. Zum Beispiel: <code>x &lt;= 3 or x &gt;= 10</code>. Zur Verbesserung der Leistung wird die <a href="Functions.htm#ShortCircuit">Kurzschlussauswertung</a> angewendet.</td>
  </tr>
  <tr id="ternary">
    <td class="center bold">?:</td>
    <td><strong>Ternärer Operator</strong> <span class="ver">[v1.0.46+]</span>. Dieser Operator ist eine Kurzschreibweise zum Durchführen einer <a href="commands/IfExpression.htm">if-else-Anweisung</a>. Der Operator wertet die Bedingung auf der linken Seite aus, um festzustellen, welche der beiden Verzweigungen als Endergebnis dienen soll. <code>Var := x&gt;y ? 2 : 3</code> beispielsweise würde eine 2 in <em>Var</em> speichern, falls x größer als y ist; ansonsten würde es eine 3 speichern. Zur Verbesserung der Leistung wird nur die gewinnende Verzweigung ausgewertet (siehe <a href="Functions.htm#ShortCircuit">Kurzschlussauswertung</a>).</td>
  </tr>
  <tr id="AssignOp">
    <td class="center bold">:=<br>
        +=<br>
        -=<br>
        *=<br>
        /=<br>
        //=<br>
        .=<br>
        |=<br>
        &amp;=<br>
        ^=<br>
        &gt;&gt;=<br>
        &lt;&lt;=<br>
        &gt;&gt;&gt;=
    </td>
    <td><p><strong>Zuweisung</strong>. Führt eine Operation auf den Inhalt einer Variable aus und speichert das Ergebnis wieder in die gleiche Variable (früher vor v1.0.46 konnten sie nur als Operator ganz links auf einer Zeile verwendet werden, außerdem wurden nur die ersten fünf Operatoren unterstützt). Der einfachste Zuweisungsoperator ist der <a href="commands/SetExpression.htm">Doppelpunkt-Gleich-Operator (:=)</a>, der das Ergebnis eines Ausdrucks in eine Variable speichert. Eine Beschreibung dessen, was die anderen Operatoren tun, finden Sie in den entsprechenden Einträgen dieser Tabelle. <code>Var //= 2</code> beispielsweise führt eine <a href="#FloorDivide">Floor-Division</a> durch, um <em>Var</em> durch 2 zu teilen, und speichert dann das Ergebnis wieder in <em>Var</em>. Ein weiteres Beispiel ist <code>Var <strong>.=</strong> "abc"</code>, was die Kurzschreibweise für <code>Var := Var <strong>.</strong> "abc"</code> wäre.</p>
      <p>Im Gegensatz zu den meisten anderen Operatoren werden Zuweisungen von rechts nach links ausgewertet. Eine Zeile wie <code>Var1 := Var2 := 0</code> würde also erst eine 0 in <em>Var2</em> speichern und dann <em>Var2</em> in <em>Var1</em> speichern.</p>
    <p>Verwendet man eine Zuweisung im Eingabewert eines anderen Operators, wird die Variable selbst als Eingabewert genommen. Der Ausdruck <code>(Var += 2) &gt; 50</code> wäre beispielsweise wahr, wenn der gerade eben erhöhte Wert in <em>Var</em> größer als 50 ist. Eine auf diese Weise verwendete Zuweisung kann auch via Referenz (<a href="Functions.htm#ByRef">ByRef</a>) übergeben werden, oder ihre <a href="#amp">Adresse</a> zurückgeben; zum Beispiel: <code>&amp;(x:="abc")</code>.</p>
    <p>Die Priorität der Zuweisungsoperatoren erhöht sich automatisch, wenn dadurch ein Syntaxfehler verhindert oder ein besseres Verhalten bereitgestellt werden kann. Zum Beispiel: <code>not x := y</code> würde als <code>not (x := y)</code> ausgewertet werden. <code>++Var := X</code> würde als <code>++(Var := X)</code> ausgewertet werden; und <code>Z &gt; 0 ? X := 2 : Y := 2</code> würde als <code>Z &gt; 0 ? (X := 2) : (Y := 2)</code> ausgewertet werden.</p>
    <p><strong>&gt;&gt;&gt;=</strong> benötigt <span class="ver">[v1.1.35+]</span>.</p>
    <p>Bekannte Einschränkungen durch Abwärtskompatibilität (die eventuell in einer zukünftigen Version behoben werden): 1) Wenn <strong>/=</strong> der Operator ganz links in einem Ausdruck ist und nicht zu einer <a href="#comma">Mehrfachanweisung</a> gehört, führt dieser Operator eine <a href="#FloorDivide">Floor-Division</a> durch, es sei denn, einer der Eingabewerte ist eine Floating-Point-Zahl (in allen anderen Fällen führt <strong>/=</strong> eine <a href="#divide">echte Division</a> durch); 2) <a href="commands/EnvAdd.htm">Datum/Zeit-Berechnung</a> mit <strong>+=</strong> und <strong>-=</strong> ist nur möglich, wenn dieser Operator der Operator ganz links auf der Zeile ist; 3) Die Operatoren <strong>+=</strong>, <strong>-=</strong> und <strong>*=</strong> behandeln leere Variablen als 0, aber nur, wenn sie einzeln auf einer Zeile stehen; <code>y := 1, x += 1</code> und <code>MsgBox % x -= 3</code> würden beispielsweise ein leeres Ergebnis erzeugen, falls x leer ist.</p></td>
  </tr>
  <tr id="comma">
    <td class="center bold">,</td>
    <td><p><strong>Komma (Mehrfachanweisung)</strong> <span class="ver">[v1.0.46+]</span>. Kommas können genutzt werden, um mehrere Teilausdrücke auf einer Zeile zu schreiben. Diese Vorgehensweise wird häufig angewendet, um mehrere Zuweisungen oder Funktionsaufrufe zu gruppieren. Zum Beispiel: <code>x:=1<strong>,</strong> y+=2<strong>,</strong> ++index, MeineFunk()</code>. Solche Anweisungen werden von links nach rechts ausgeführt.</p>
      <p class="note"><strong>Hinweis</strong>: Eine Zeile, die mit einem Komma (oder einem anderen Operator) beginnt, wird automatisch mit der darüberliegenden Zeile <a href="Scripts.htm#continuation">verbunden</a>. Siehe auch: <a href="#CommaPerf">Leistung in Bezug auf Kommas</a>.</p>
      <p><span class="ver">[v1.0.46.01+]</span>: Wenn direkt nach einem Komma eine Variable und ein Gleichheitszeichen erfolgt, wird das Gleichheitszeichen automatisch als <a href="commands/SetExpression.htm">Zuweisung (:=)</a> behandelt. Alle Teilausdrücke in der folgenden Mehrfachanweisung sind beispielsweise Zuweisungen: <code>x:=1, y=2, a=b=c</code>. Neue Skripte sollten sich nicht auf dieses Verhalten verlassen, weil es eventuell noch geändert wird. Diese Regel gilt nur für reine Variablen und nicht für <a href="#ref">Doppeldereferenzierungen</a>; die folgende Mehrfachanweisung enthält beispielsweise nur eine Zuweisung: <code>x:=1, %y%=2</code></p></td>
  </tr>
</table>
<p>Die folgenden Arten von Teilausdrücken überschreiben die Priorität bzw. die Reihenfolge der Auswertung:</p>
<table class="info">
  <tr>
    <th class="center">Ausdruck</th>
    <th abbr="Beschr">Beschreibung</th>
  </tr>
  <tr>
    <td class="center"><strong>(</strong><em>Ausdruck</em><strong>)</strong></td>
    <td>
      <p>Ein beliebiger in Klammern gesetzter Teilausdruck. <code>(3 + 2) * 2</code> beispielsweise würde zuerst <code>3 + 2</code> auswerten.</p>
      <p>Bei einer Mehrfachanweisung wird das Ergebnis der <u>ersten</u> Anweisung zurückgegeben. <code>(a := 1, b := 2, c := 3)</code> beispielsweise gibt 1 zurück.</p>
    </td>
  </tr>
  <tr>
    <td class="center"><p><strong>mod()<br>
        round()<br>
    abs()</strong></p></td>
    <td><strong>Funktionsaufruf</strong>. Direkt nach dem Funktionsnamen muss eine runde Startklammer erfolgen; das heißt, dass keine Leer- oder Tabulatorzeichen zwischen dem Namen und der Klammer erlaubt sind. Einzelheiten finden Sie unter <a href="Functions.htm">Funktionen</a>.</td>
  </tr>
  <tr>
    <td class="center"><p><strong>%</strong><em>func</em><strong>%()</strong></p></td>
    <td>Siehe <a href="Functions.htm#DynCall">Funktionen dynamisch aufrufen</a>.</td>
  </tr>
  <tr>
    <td class="center"><em>func</em><strong>.()</strong></td>
    <td><p><strong>Veraltet:</strong> Diese Syntax wird nicht empfohlen. Benutzen Sie stattdessen <code>%func%()</code> (für Funktionsnamen und Objekte) oder <code>func.Call()</code> (für Funktionsobjekte).</p>
    <p><span class="ver">[AHK_L 48+]:</span> Versucht, eine namenlose Methode des Objekts <i>func</i> aufzurufen. Gemäß der Konvention ist das die "Standardmethode" des Objekts. Wenn <i>func</i> kein Objekt enthält, wird stattdessen das <a href="Objects.htm#Default_Base_Object">Standardbasisobjekt</a> aufgerufen.</p>
    <p><span class="ver">[v1.0.95+]:</span> Enthält <i>func</i> einen Funktionsnamen, wird die benannte Funktion aufgerufen.</p></td>
  </tr>
  <tr>
    <td class="center">Fn(<strong><em>Params</em>*</strong>)</td>
    <td><p><span class="ver">[AHK_L 60+]:</span> <a href="Functions.htm#VariadicCall">Variadischer Funktionsaufruf</a>. <em>Params</em> ist ein Array (Objekt), das Parameterwerte enthält.</p></td>
  </tr>
  <tr>
    <td class="center"><strong>x[y]<br>[a, b, c]</strong></td>
    <td>
      <p><span class="ver">[AHK_L 31+]:</span> <strong>Zugriff auf Objektelemente</strong>. Ruft einen Wert ab, setzt einen Wert oder ruft eine Methode des Objekts <i>x</i> auf. Hierbei ist <i>y</i> eine Parameterliste oder ein Ausdruck, der einen Methodennamen zurückgibt.</p>
      <p><span class="ver">[v1.0.97+]:</span> <strong>Direkte Array-Schreibweise</strong>. Wenn die eckige Startklammer keinen Wert (oder Teilausdruck, der einen Wert zurückgibt) davor hat, wird die Klammer als Beginn eines direkt geschriebenen Arrays interpretiert. <code>[a, b, c]</code> beispielsweise ist das gleiche wie <code>Array(a, b, c)</code> (a, b und c sind Variablen).</p>
      <p>Weitere Informationen finden Sie unter <a href="Objects.htm#Usage_Simple_Arrays">Array-Syntax</a> und <a href="Objects.htm#Usage_Objects">Objektsyntax</a>.</p>
    </td>
  </tr>
  <tr>
    <td class="center"><strong>{a: b, c: d}</strong></td>
    <td><p><span class="ver">[v1.0.97+]:</span> <strong>Direkte Objekt-Schreibweise</strong>. Erstellt ein Objekt oder assoziatives Array. <code>x := {a: b}</code> beispielsweise ist das gleiche wie <code>x := Object("a", b)</code> oder <code>x := Object(), x.a := b</code>. Weitere Informationen finden Sie unter <a href="Objects.htm#Usage_Associative_Arrays">Assoziative Arrays</a>.</p></td>
  </tr>
</table>
<br>
<p id="CommaPerf"><strong>Leistung</strong>: <span class="ver">[v1.0.48+]</span>: Ausdrücke, die mit einem Komma getrennt werden, sind leistungsfähiger als einzeln geschriebene Ausdrücke, besonders wenn es darum geht, eine Variable in eine andere Variable zu speichern (z. B. <code>x := y, a := b</code>). Je mehr Ausdrücke zu einem einzigen Ausdruck zusammengefasst werden, desto höher ist die Leistung; zum Beispiel könnte man ein Geschwindigkeitszuwachs von 35 % erreichen, wenn man fünf oder zehn einfache Ausdrücke zu einem Ausdruck kombiniert.</p>

<h2 id="BuiltIn">Interne Variablen</h2>
<p>Die folgenden Variablen sind fest in das Programm integriert und normal abrufbar.</p>
<p class="note">Allgemeine Informationen finden Sie unter <a href="Concepts.htm#built-in-variables">Interne Variablen</a>.</p>
<h3 id="BuiltIn_TOC">Inhaltsverzeichnis</h3>
<ul>
  <li>Sonderzeichen: <a href="#Space">A_Space</a>, <a href="#Tab">A_Tab</a></li>
  <li>Skript-Eigenschaften: <a href="#CommandLine">Befehlszeilenparameter</a>, <a href="#WorkingDir">A_WorkingDir</a>, <a href="#ScriptDir">A_ScriptDir</a>, <a href="#ScriptName">A_ScriptName</a>, <a href="#prop">(...mehr...)</a></li>
  <li>Datum und Zeit: <a href="#YYYY">A_YYYY</a>, <a href="#MM">A_MM</a>, <a href="#DD">A_DD</a>, <a href="#Hour">A_Hour</a>, <a href="#Min">A_Min</a>, <a href="#Sec">A_Sec</a>, <a href="#date">(...mehr...)</a></li>
  <li>Skript-Einstellungen: <a href="#IsSuspended">A_IsSuspended</a>, <a href="#BatchLines">A_BatchLines</a>, <a href="#ListLines">A_ListLines</a>, <a href="#TitleMatchMode">A_TitleMatchMode</a>, <a href="#settings">(...mehr...)</a></li>
  <li>Inaktivität des Benutzers: <a href="#TimeIdle">A_TimeIdle</a>, <a href="#TimeIdlePhysical">A_TimeIdlePhysical</a>, <a href="#TimeIdleKeyboard">A_TimeIdleKeyboard</a>, <a href="#TimeIdleMouse">A_TimeIdleMouse</a></li>
  <li>GUI-Fenster und Menüleisten: <a href="#Gui">A_Gui</a>, <a href="#GuiControl">A_GuiControl</a>, <a href="#GuiEvent">A_GuiEvent</a>, <a href="#EventInfo">A_EventInfo</a>, <a href="#gui">(...mehr...)</a></li>
  <li>Hotkeys, Hotstrings und benutzerdefinierte Menüpunkte: <a href="#ThisHotkey">A_ThisHotkey</a>, <a href="#EndChar">A_EndChar</a>, <a href="#ThisMenuItem">A_ThisMenuItem</a>, <a href="#h">(...mehr...)</a></li>
  <li>Betriebssystem und Benutzerinformationen: <a href="#OSVersion">A_OSVersion</a>, <a href="#Screen">A_ScreenWidth</a>, <a href="#Screen">A_ScreenHeight</a>, <a href="#os">(...mehr...)</a></li>
  <li>Sonstiges: <a href="#Cursor">A_Cursor</a>, <a href="#Caret">A_CaretX</a>, <a href="#Caret">A_CaretY</a>, <a href="#Clipboard">Clipboard</a>, <a href="#ClipboardAll">ClipboardAll</a>, <a href="#ErrorLevel">ErrorLevel</a>, <a href="#misc">(...mehr...)</a></li>
  <li>Loop: <a href="#Index">A_Index</a>, <a href="#loop">(...mehr...)</a></li>
</ul>
<h3 id="Special_Characters">Sonderzeichen</h3>
<table class="info">
  <tr>
    <th abbr="Var">Variable</th>
    <th abbr="Beschr">Beschreibung</th>
  </tr>
  <tr id="Space">
    <td>A_Space</td>
    <td>Diese Variable enthält ein einzelnes Leerzeichen. Siehe <a href="commands/AutoTrim.htm">AutoTrim</a> für weitere Details.</td>
  </tr>
  <tr id="Tab">
    <td>A_Tab</td>
    <td>Diese Variable enthält ein einzelnes Tabulatorzeichen. Siehe <a href="commands/AutoTrim.htm">AutoTrim</a> für weitere Details.</td>
  </tr>
</table>
<h3 id="prop">Skript-Eigenschaften</h3>
<table class="info">
  <tr>
    <th abbr="Var">Variable</th>
    <th abbr="Beschr">Beschreibung</th>
  </tr>
  <tr id="CommandLine">
    <td>1, 2, 3, etc.</td>
    <td>Diese Variablen werden automatisch erstellt, wenn ein Skript mit Befehlszeilenparametern gestartet wird. Sie können wie normale Variablennamen geändert oder abgerufen werden (zum Beispiel: %1%), aber nicht direkt in einem <a href="#Expressions">Ausdruck</a> verwiesen werden. Die Variable %0% enthält die Anzahl der Parameter, die übergeben worden sind (0 wenn keine). Einzelheiten finden Sie unter <a href="Scripts.htm#cmd">Befehlszeilenparameter</a>.</td>
  </tr>
  <tr id="Args">
    <td>A_Args<br><span class="ver">[v1.1.27+]</span></td>
    <td>Enthält ein <a href="Objects.htm#Usage_Simple_Arrays">Array</a> mit Befehlszeilenparametern. Einzelheiten finden Sie unter <a href="Scripts.htm#cmd">Befehlszeilenparameter an ein Skript übergeben</a>.</td>
  </tr>
  <tr id="WorkingDir">
    <td>A_WorkingDir</td>
    <td>Das aktuelle Arbeitsverzeichnis, von wo aus das Skript standardmäßig auf Dateien zugreift. Der letzte umgekehrte Schrägstrich ist nicht enthalten, es sei denn, es handelt sich um das Stammverzeichnis. Zwei Beispiele: C:\ und C:\Meine Dokumente. Mit <a href="commands/SetWorkingDir.htm">SetWorkingDir</a> kann das Arbeitsverzeichnis geändert werden.</td>
  </tr>
  <tr id="InitialWorkingDir">
    <td>A_InitialWorkingDir<br><span class="ver">[v1.1.35+]</span></td>
    <td>Das anfängliche Arbeitsverzeichnis des Skripts, das abhängig davon ist, wie das Skript gestartet wurde. Wurde es beispielsweise über eine Verknüpfung gestartet (z. B. im Startmenü), richtet sich dessen anfängliche Arbeitsverzeichnis nach dem Feld "Ausführen in", das im Eigenschaftsfenster der Verknüpfung zu finden ist.</td>
  </tr>
  <tr id="ScriptDir">
    <td>A_ScriptDir</td>
    <td>Der vollständige Pfadname des Verzeichnisses, wo sich das aktuelle Skript befindet. Der letzte umgekehrte Schrägstrich wird weggelassen (auch bei Stammverzeichnissen).</td>
  </tr>
  <tr id="ScriptName">
    <td>A_ScriptName</td>
    <td>
      <p>Der Dateiname des aktuellen Skripts, ohne Pfad, z. B. MeinSkript.ahk</p>
      <p>Wenn das Skript <a href="Scripts.htm#ahk2exe">kompiliert</a> oder <a href="Program.htm#embedded-scripts">eingebettet</a> ist, dann ist das hier der Name der aktuellen ausführbaren Datei.</p>
    </td>
  </tr>
  <tr id="ScriptFullPath">
    <td>A_ScriptFullPath</td>
    <td>
      <p>Der vollständige Pfadname des aktuellen Skripts, z. B. C:\Skripte\MeinSkript.ahk</p>
      <p>Wenn das Skript <a href="Scripts.htm#ahk2exe">kompiliert</a> oder <a href="Program.htm#embedded-scripts">eingebettet</a> ist, dann ist das hier der vollständige Pfadname der aktuellen ausführbaren Datei.</p>
    </td>
  </tr>
  <tr id="ScriptHwnd">
    <td>A_ScriptHwnd<br><span class="ver">[v1.1.01+]</span></td>
    <td>Die HWND-Nummer (eindeutige ID) des versteckten Skript-<a href="Program.htm#main-window">Hauptfensters</a>.</td>
  </tr>
  <tr id="LineNumber">
    <td>A_LineNumber</td>
    <td><p>Die Nummer der aktuell ausgeführten Zeile innerhalb des Skripts (oder innerhalb einer <a href="commands/_Include.htm">#Include-Datei</a>, sofern angegeben). Diese Zeilennummer stimmt mit der angezeigten Zeilennummer in <a href="commands/ListLines.htm">ListLines</a> überein; diese Variable ist zum Beispiel nützlich, um einen Fehler zu melden: <code>MsgBox, Eine Zeile konnte nicht in die Log-Datei geschrieben werden (Zeilennummer %A_LineNumber%)</code></p>
    <p>Da beim <a href="Scripts.htm#ahk2exe">Kompilieren eines Skripts</a> alle <a href="commands/_Include.htm">#Include-Dateien</a> zusammengefügt werden, sind die Zeilen eventuell anders nummeriert als im unkompilierten Modus.</p></td>
  </tr>
  <tr id="LineFile">
    <td>A_LineFile</td>
    <td>
      <p>Der vollständige Pfadname der Datei, zu der <a href="#LineNumber">A_LineNumber</a> gehört. Wenn das Skript aus einer externen Datei geladen wurde, ist das hier dasselbe wie <a href="#ScriptFullPath">A_ScriptFullPath</a>, es sei denn, die Zeile gehört zu einer der <a href="commands/_Include.htm">#Include-Dateien</a> des Skripts.</p>
      <p>Wenn das Skript basierend auf einer <a href="Scripts.htm#ahk2exe-base">BIN-Datei</a> <a href="Scripts.htm#ahk2exe">kompiliert</a> wurde, ist das hier der vollständige Pfadname der aktuellen ausführbaren Datei, analog zu <a href="#ScriptFullPath">A_ScriptFullPath</a>.</p>
      <p><span class="ver">[v1.1.34+]:</span> Wenn das Skript <a href="Program.htm#embedded-scripts">eingebettet</a> ist, enthält A_LineFile ein Sternchen (*), gefolgt von dem Ressourcennamen; z. B. *#1</p>
    </td>
  </tr>
  <tr id="ThisFunc">
    <td>A_ThisFunc<br>
    <span class="ver">[v1.0.46.16+]</span></td>
    <td>Der Name der <a href="Functions.htm">benutzerdefinierten Funktion</a>, die gerade ausgeführt wird (ansonsten leer); zum Beispiel: MeineFunktion. Siehe auch: <a href="commands/IsFunc.htm">IsFunc()</a></td>
  </tr>
  <tr id="ThisLabel">
    <td>A_ThisLabel<br>
    <span class="ver">[v1.0.46.16+]</span></td>
    <td>Der Name des <a href="misc/Labels.htm">Labels</a> (Subroutine), das gerade ausgeführt wird (ansonsten leer); zum Beispiel: MeinLabel. Diese Variable wird jedes Mal aktualisiert, wenn das Skript <a href="commands/Gosub.htm">Gosub</a>/<a href="commands/Return.htm">Return</a> oder <a href="commands/Goto.htm">Goto</a> ausführt. Sie wird auch aktualisiert, wenn ein Label automatisch durch <a href="commands/SetTimer.htm">Timer</a>, <a href="commands/Gui.htm#DefaultWin">GUI-Threads</a>, <a href="commands/Menu.htm">Menüpunkte</a>, <a href="Hotkeys.htm">Hotkeys</a>, <a href="Hotstrings.htm">Hotstrings</a>, <a href="commands/OnClipboardChange.htm#label">OnClipboardChange-Labels</a> und <a href="commands/OnExit.htm#command">OnExit-Labels</a> aufgerufen wird. A_ThisLabel wird jedoch nicht aktualisiert, wenn die Skriptausführung in eines der oben genannten Label "hineinfällt"; in diesem Fall behält A_ThisLabel ihren vorherigen Wert. Siehe auch: <a href="#ThisHotkey">A_ThisHotkey</a> und <a href="commands/IsLabel.htm">IsLabel()</a></td>
  </tr>
  <tr id="AhkVersion">
    <td>A_AhkVersion</td>
    <td>In den Versionen vor 1.0.22 ist diese Variable leer. A_AhkVersion enthält die Version des AutoHotkey-Programms, mit dem das Skript ausgeführt wird, z. B. 1.0.22. Wird diese Variable in einem <a href="Scripts.htm#ahk2exe">kompilierten Skript</a> verwendet, meldet sie die Version des AutoHotkey-Programms, mit der das Skript ursprünglich kompiliert wurde. Aufgrund der Struktur der Versionsnummer kann ein Skript mithilfe von "&gt;" oder "&gt;=" überprüfen, ob A_AhkVersion größer als eine bestimmte Versionsnummer ist. Zum Beispiel: <code>if A_AhkVersion &gt;= 1.0.25.07</code>.</td>
  </tr>
  <tr id="AhkPath">
    <td>A_AhkPath</td>
    <td>
      <p>Bei unkompilierten oder <a href="Program.htm#embedded-scripts">eingebetteten</a> Skripten: Der vollständige Pfadname der EXE-Datei, mit der das aktuelle Skript gerade ausgeführt wird. Zum Beispiel: C:\Program Files\AutoHotkey\AutoHotkey.exe</p>
      <p>Bei <a href="Scripts.htm#ahk2exe">kompilierten Skripten</a>, die auf einer <a href="Scripts.htm#ahk2exe-base">BIN-Datei</a> basieren, wird der Wert durch Lesen des Installationsverzeichnisses aus der Registry und Anfügen von "\AutoHotkey.exe" ermittelt. Wenn AutoHotkey nicht installiert ist, ist der Wert leer. Das folgende Beispiel ist äquivalent:</p>
      <pre>RegRead InstallDir, HKLM\SOFTWARE\AutoHotkey, InstallDir
AhkPath := ErrorLevel ? "" : InstallDir "\AutoHotkey.exe"</pre>
      <p><span class="ver">[v1.1.34+]:</span> Bei kompilierten Skripten, die auf einer EXE-Datei basieren, enthält A_AhkPath den vollständigen Pfadnamen des kompilierten Skripts. Dies kann in Kombination mit <a href="Scripts.htm#SlashScript">/script</a> verwendet werden, um externe Skripte auszuführen. Um stattdessen die installierte Kopie von AutoHotkey zu lokalisieren, lesen Sie die Registry wie oben gezeigt.</p>
    </td>
  </tr>
  <tr id="IsUnicode">
    <td>A_IsUnicode</td>
    <td><p>Enthält 1, wenn Zeichenketten im Unicode-Format (16-Bit) sind, oder eine leere Zeichenkette (das als <a href="#Boolean">falsch</a> angesehen wird), wenn Zeichenketten im ANSI-Format (8-Bit) sind. Das Format der Zeichenketten ist abhängig davon, mit welcher AutoHotkey-Version das Skript ausgeführt wird oder mit welcher BIN-Datei es kompiliert wurde.</p>
    <p>Bei ANSI-basierten Ausführungsdateien vor <span class="ver">[v1.1.06]</span> blieb A_IsUnicode undefiniert; das heißt, dass das Skript dieser Variable einen Wert zuweisen konnte und dass der Versuch, sie zu lesen, eine <a href="commands/_Warn.htm">UseUnsetGlobal-Warnung</a> auslösen konnte. In späteren Versionen ist sie immer definiert und schreibgeschützt.</p></td>
  </tr>
  <tr id="IsCompiled">
    <td>A_IsCompiled</td>
    <td><p>Enthält 1, wenn das Skript als <a href="Scripts.htm#ahk2exe">kompilierte EXE-Datei</a> ausgeführt wird, oder eine leere Zeichenkette (das als <a href="#Boolean">falsch</a> angesehen wird), wenn das nicht der Fall ist.</p>
    <p>Bei unkompilierten Skripten vor <span class="ver">[v1.1.06]</span> blieb A_IsCompiled undefiniert; das heißt, dass das Skript dieser Variable einen Wert zuweisen konnte und dass der Versuch, sie zu lesen, eine <a href="commands/_Warn.htm">UseUnsetGlobal-Warnung</a> auslösen konnte. In späteren Versionen ist sie immer definiert und schreibgeschützt.</p></td>
  </tr>
  <tr id="ExitReason">
    <td>A_ExitReason</td>
    <td>Der aktuellste Grund, warum das Skript terminiert werden soll. Diese Variable enthält nur einen Wert, wenn eine <a href="commands/OnExit.htm#command">OnExit</a>-Subroutine des Skripts gerade läuft oder durch einen Exitversuch mindestens einmal aufgerufen wurde. Siehe <a href="commands/OnExit.htm#command">OnExit</a> für weitere Details.</td>
  </tr>
</table>
<h3 id="date">Datum und Zeit</h3>
<table class="info">
  <tr>
    <th abbr="Var">Variable</th>
    <th abbr="Beschr">Beschreibung</th>
  </tr>
  <tr id="YYYY">
    <td>A_YYYY</td>
    <td>
      <p>Das aktuelle 4-stellige Jahr (z. B. 2004). A_Year enthält denselben Wert.</p>
      <p class="note"><strong>Hinweis</strong>: Um die formatierte Version einer Uhrzeit oder eines Datums gemäß Ihrer aktuellen Sprach- und Regionseinstellungen abzurufen, können Sie <code><a href="commands/FormatTime.htm">FormatTime</a>, AusgabeVar</code> (Uhrzeit und langes Datum) oder <code><a href="commands/FormatTime.htm">FormatTime</a>, AusgabeVar,, LongDate</code> (langes Datumformat) nutzen.</p>
    </td>
  </tr>
  <tr id="MM">
    <td>A_MM</td>
    <td>Der aktuelle 2-stellige Monat (01-12). A_Mon enthält denselben Wert.</td>
  </tr>
  <tr id="DD">
    <td>A_DD</td>
    <td>Der aktuelle 2-stellige Tag des Monats (01-31). A_MDay enthält denselben Wert.</td>
  </tr>
  <tr id="MMMM">
    <td>A_MMMM</td>
    <td>Der aktuelle vollständige Monatsname in der aktuellen Sprache des Benutzers, z. B. Juli</td>
  </tr>
  <tr id="MMM">
    <td>A_MMM</td>
    <td>Der aktuelle abgekürzte Monatsname in der aktuellen Sprache des Benutzers, z. B. Jul</td>
  </tr>
  <tr id="DDDD">
    <td>A_DDDD</td>
    <td>Der aktuelle vollständige Wochentagsname in der aktuellen Sprache des Benutzers, z. B. Sonntag</td>
  </tr>
  <tr id="DDD">
    <td>A_DDD</td>
    <td>Der aktuelle abgekürzte Wochentagsname in der aktuellen Sprache des Benutzers, z. B. So</td>
  </tr>
  <tr id="WDay">
    <td>A_WDay</td>
    <td>Der aktuelle 1-stellige Wochentag (1-7). 1 ist Sonntag in allen Sprach- und Regionseinstellungen.</td>
  </tr>
  <tr id="YDay">
    <td>A_YDay</td>
    <td>Der aktuelle Tag im Jahr (1-366). Der Wert enthält keine führenden Nullen, z. B. wird 9 abgerufen, nicht 009. Das folgende Beispiel zeigt, wie ein Wert mit führenden Nullen abgerufen werden kann: <code><a href="commands/FormatTime.htm">FormatTime</a>, AusgabeVar, , YDay0</code>.</td>
  </tr>
  <tr id="YWeek">
    <td>A_YWeek</td>
    <td>Das aktuelle Jahr und Wochennummer (z. B. 200453) gemäß ISO 8601. Um das Jahr von der Woche zu trennen, nutzen Sie <code>Jahr := <a href="commands/SubStr.htm">SubStr</a>(A_YWeek, 1, 4)</code> und <code>Woche := <a href="commands/SubStr.htm">SubStr</a>(A_YWeek, -1)</code>. Genaue Definition von A_YWeek: Wenn die Woche mit dem 1. Januar mindestens vier Tage im neuen Jahr hat, ist sie Woche 1. Ansonsten ist sie die letzte Woche des vorherigen Jahres, und die nachfolgende Woche die erste Woche des neuen Jahres.</td>
  </tr>
  <tr id="Hour">
    <td>A_Hour</td>
    <td>Die aktuelle 2-stellige Stunde (00-23) im 24-Stunden-Format. Das folgende Beispiel zeigt, wie die Zeit im 12-Stunden-Format mit den Indikatoren AM bzw. PM abgerufen werden kann: <code><a href="commands/FormatTime.htm">FormatTime</a>, AusgabeVar, , h:mm:ss tt</code></td>
  </tr>
  <tr id="Min">
    <td>A_Min</td>
    <td><p>Die aktuelle 2-stellige Minute (00-59).</p></td>
  </tr>
  <tr id="Sec">
    <td>A_Sec</td>
    <td>Die aktuelle 2-stellige Sekunde (00-59).</td>
  </tr>
  <tr id="MSec">
    <td>A_MSec</td>
    <td>Die aktuelle 3-stellige Millisekunde (000-999). Das folgende Beispiel zeigt, wie die Nullen am Anfang entfernt werden können: <code>Millisekunden := A_MSec + 0</code>.</td>
  </tr>
  <tr id="Now">
    <td>A_Now</td>
    <td>
      <p>Die aktuelle Ortszeit im <a href="commands/FileSetTime.htm#YYYYMMDD">YYYYMMDDHH24MISS</a>-Format.</p>
      <p class="note"><strong>Hinweis</strong>: Datums- und Zeitberechnungen können mit <a href="commands/EnvAdd.htm">EnvAdd</a> und <a href="commands/EnvSub.htm">EnvSub</a> durchgeführt werden. Außerdem können Sie <a href="commands/FormatTime.htm">FormatTime</a> nutzen, um das Datum und/oder die Uhrzeit gemäß Ihrer aktuellen Sprach- und Regionseinstellungen zu formatieren.</p>
    </td>
  </tr>
  <tr id="NowUTC">
    <td>A_NowUTC</td>
    <td>Die aktuelle koordinierte Weltzeit (Coordinated Universal Time oder kurz UTC) im <a href="commands/FileSetTime.htm#YYYYMMDD">YYYYMMDDHH24MISS</a>-Format. UTC ist grundsätzlich das gleiche wie Greenwich Mean Time (GMT).</td>
  </tr>
  <tr id="TickCount">
    <td>A_TickCount</td>
    <td><p>Die Zeit in Millisekunden, die seit dem Start des Systems verstrichen ist, bis zu einem Maximum von 49,7 Tagen. Um diese verstrichene Zeit zu messen, speichern Sie A_TickCount in eine Variable und ziehen Sie sie später vom aktuellen A_TickCount-Wert ab. Zum Beispiel:</p>
        <pre>StartZeit := A_TickCount
Sleep, 1000
VerstricheneZeit := A_TickCount - StartZeit
MsgBox,  %VerstricheneZeit% Millisekunden sind verstrichen.</pre>
<p>Schauen Sie sich <a href="commands/DllCall.htm#QPC">QueryPerformanceCounter()</a> an, wenn Sie eine höhere Genauigkeit als die 10 ms von A_TickCount benötigen.</p>
</td>
  </tr>
</table>
<h3 id="settings">Skript-Einstellungen</h3>
<table class="info">
  <tr>
    <th abbr="Var">Variable</th>
    <th abbr="Beschr">Beschreibung</th>
  </tr>
  <tr id="IsSuspended">
    <td>A_IsSuspended</td>
    <td>Enthält 1, wenn das Skript <a href="commands/Suspend.htm">suspendiert</a> ist, ansonsten 0.</td>
  </tr>
  <tr id="IsPaused">
    <td>A_IsPaused<br>
    <span class="ver">[v1.0.48+]</span></td>
    <td>Enthält 1, wenn der <a href="misc/Threads.htm">Thread</a> direkt unterhalb des aktuellen Threads <a href="commands/Pause.htm">pausiert</a> ist. Ansonsten ist eine 0 enthalten.</td>
  </tr>
  <tr id="IsCritical">
    <td>A_IsCritical<br>
    <span class="ver">[v1.0.48+]</span></td>
    <td>Enthält 0, wenn <a href="commands/Critical.htm">Critical</a> im <a href="misc/Threads.htm">aktuellen Thread</a> ausgeschaltet ist. Ansonsten enthält A_IsCritical einen Integer größer als 0 bzw. die von Critical verwendete <a href="commands/Critical.htm#Interval">Meldungsüberprüfungsfrequenz</a>. <code>Critical 0</code> schaltet den kritischen Status eines Threads aus. Um den aktuellen Status von Critical zu speichern und wiederherzustellen, können Sie <code>Alt_IsCritical := A_IsCritical</code> und später <code>Critical %Alt_IsCritical%</code> verwenden.</td>
  </tr>
  <tr id="BatchLines">
    <td>A_BatchLines</td>
    <td>(oder A_NumBatchLines) Der aktuell gesetzte Wert von <a href="commands/SetBatchLines.htm">SetBatchLines</a>. Beispiele: 200 oder 10ms (je nach Format).</td>
  </tr>
  <tr id="ListLines">
    <td>A_ListLines<br><span class="ver">[v1.1.28+]</span></td>
    <td>Enthält 1, wenn <a href="commands/ListLines.htm">ListLines</a> eingeschaltet ist. Ansonsten ist eine 0 enthalten.</td>
  </tr>
  <tr id="TitleMatchMode">
    <td>A_TitleMatchMode</td>
    <td>Der aktuell gesetzte Modus von <a href="commands/SetTitleMatchMode.htm">SetTitleMatchMode</a>: 1, 2, 3 oder RegEx.</td>
  </tr>
  <tr id="TitleMatchModeSpeed">
    <td>A_TitleMatchModeSpeed</td>
    <td>Die aktuell gesetzte Übereinstimmungsgeschwindigkeit (fast oder slow) von <a href="commands/SetTitleMatchMode.htm">SetTitleMatchMode</a>.</td>
  </tr>
  <tr id="DetectHiddenWindows">
    <td>A_DetectHiddenWindows</td>
    <td>Der aktuell gesetzte Modus (On oder Off) von <a href="commands/DetectHiddenWindows.htm">DetectHiddenWindows</a>.</td>
  </tr>
  <tr id="DetectHiddenText">
    <td>A_DetectHiddenText</td>
    <td>Der aktuell gesetzte Modus (On oder Off) von <a href="commands/DetectHiddenText.htm">DetectHiddenText</a>.</td>
  </tr>
  <tr id="AutoTrim">
    <td>A_AutoTrim</td>
    <td>Der aktuell gesetzte Modus (On oder Off) von <a href="commands/AutoTrim.htm">AutoTrim</a>.</td>
  </tr>
  <tr id="StringCaseSense">
    <td>A_StringCaseSense</td>
    <td>Der aktuell gesetzte Modus (On, Off oder Locale) von <a href="commands/StringCaseSense.htm">StringCaseSense</a>.</td>
  </tr>
  <tr id="FileEncoding">
    <td>A_FileEncoding</td>
    <td><span class="ver">[AHK_L 46+]</span>: Enthält die von verschiedenen Befehlen standardmäßig genutzte Codierung; siehe <a href="commands/FileEncoding.htm">FileEncoding</a>.</td>
  </tr>
  <tr id="FormatInteger">
    <td>A_FormatInteger</td>
    <td>Das aktuell gesetzte Integer-Format (H oder D) von <a href="commands/SetFormat.htm">SetFormat</a>. <span class="ver">[AHK_L 42+]:</span> Kann auch ein kleines h enthalten.</td>
  </tr>
  <tr id="FormatFloat">
    <td>A_FormatFloat</td>
    <td>Das aktuell gesetzte Floating-Point-Format von <a href="commands/SetFormat.htm">SetFormat</a>.</td>
  </tr>
  <tr id="SendMode">
    <td>A_SendMode</td>
    <td><span class="ver">[v1.1.23+]:</span> Der aktuell gesetzte Modus (Event, Input, Play oder InputThenPlay) von <a href="commands/SendMode.htm">SendMode</a>.</td>
  </tr>
  <tr id="SendLevel">
    <td>A_SendLevel</td>
    <td><span class="ver">[v1.1.23+]:</span> Die aktuelle Einstellung von <a href="commands/SendLevel.htm">SendLevel</a> (ein Integer im Bereich von 0 bis 100).</td>
  </tr>
  <tr id="StoreCapslockMode">
    <td>A_StoreCapsLockMode</td>
    <td><span class="ver">[v1.1.23+]:</span> Der aktuell gesetzte Modus (On oder Off) von <a href="commands/SetStoreCapslockMode.htm">SetStoreCapsLockMode</a>.</td>
  </tr>
  <tr id="KeyDelay">
    <td>A_KeyDelay<br>
    A_KeyDuration</td>
    <td>Die aktuell gesetzte Verzögerung oder Dauer von <a href="commands/SetKeyDelay.htm">SetKeyDelay</a> (im dezimalen Format). A_KeyDuration benötigt <span class="ver">[v1.1.23+]</span>.</td>
  </tr>
  <tr id="KeyDelayPlay">
    <td>A_KeyDelayPlay<br>
    A_KeyDurationPlay</td>
    <td>Die aktuell gesetzte Verzögerung oder Dauer von <a href="commands/SetKeyDelay.htm">SetKeyDelay</a> für den <a href="commands/Send.htm#SendPlayDetail">SendPlay</a>-Modus (im dezimalen Format). Benötigt <span class="ver">[v1.1.23+]</span>.</td>
  </tr>
  <tr id="WinDelay">
    <td>A_WinDelay</td>
    <td>Die aktuell gesetzte Verzögerung von <a href="commands/SetWinDelay.htm">SetWinDelay</a> (im dezimalen Format).</td>
  </tr>
  <tr id="ControlDelay">
    <td>A_ControlDelay</td>
    <td>Die aktuell gesetzte Verzögerung von <a href="commands/SetControlDelay.htm">SetControlDelay</a> (im dezimalen Format).</td>
  </tr>
  <tr id="MouseDelay">
    <td>A_MouseDelay<br>
    A_MouseDelayPlay</td>
    <td>Die aktuell gesetzte Verzögerung von <a href="commands/SetMouseDelay.htm">SetMouseDelay</a> (im dezimalen Format). A_MouseDelay gilt für den traditionellen SendEvent-Modus, während A_MouseDelayPlay für den <a href="commands/Send.htm#SendPlayDetail">SendPlay</a>-Modus vorgesehen ist. A_MouseDelayPlay benötigt <span class="ver">[v1.1.23+]</span>.</td>
  </tr>
  <tr id="DefaultMouseSpeed">
    <td>A_DefaultMouseSpeed</td>
    <td>Die aktuell gesetzte Geschwindigkeit von <a href="commands/SetDefaultMouseSpeed.htm">SetDefaultMouseSpeed</a> (im dezimalen Format).</td>
  </tr>
  <tr id="CoordMode">
    <td>A_CoordModeToolTip<br>
    A_CoordModePixel<br>
    A_CoordModeMouse<br>
    A_CoordModeCaret<br>
    A_CoordModeMenu</td>
    <td><span class="ver">[v1.1.23+]:</span> Der aktuell gesetzte Modus (Window, Client oder Screen) von <a href="commands/CoordMode.htm">CoordMode</a>.</td>
  </tr>
  <tr id="RegView">
    <td>A_RegView</td>
    <td><span class="ver">[v1.1.08+]:</span> Die aktuell gesetzte Registry-Ansicht von <a href="commands/SetRegView.htm">SetRegView</a>.</td>
  </tr>
  <tr id="IconHidden">
    <td>A_IconHidden</td>
    <td>Enthält 1, wenn das <a href="Program.htm#tray-icon">Tray-Symbol</a> gerade versteckt ist, ansonsten 0. Mit der <a href="commands/_NoTrayIcon.htm">#NoTrayIcon</a>-Direktive oder dem <a href="commands/Menu.htm">Menu</a>-Befehl kann das Symbol versteckt werden.</td>
  </tr>
  <tr id="IconTip">
    <td>A_IconTip</td>
    <td>Leer, es sei denn, es wurde für das <a href="Program.htm#tray-icon">Tray-Symbol</a> ein benutzerdefinierter Tooltip via <code><a href="commands/Menu.htm">Menu</a>, Tray, Tip</code> definiert, dann ist der Text des Tooltips enthalten.</td>
  </tr>
  <tr id="IconFile">
    <td>A_IconFile</td>
    <td>Leer, es sei denn, es wurde ein benutzerdefiniertes <a href="Program.htm#tray-icon">Tray-Symbol</a> via <code><a href="commands/Menu.htm">Menu</a>, Tray, Icon</code> definiert, dann ist der vollständige Pfadname der Datei des neuen Symbols enthalten.</td>
  </tr>
  <tr id="IconNumber">
    <td>A_IconNumber</td>
    <td>Leer, wenn A_IconFile leer ist. Ansonsten ist die Nummer der Symbolgruppe enthalten, die in A_IconFile verwendet wird (üblicherweise 1).</td>
  </tr>
</table>
<h3 id="User_Idle_Time">Inaktivität des Benutzers</h3>
<table class="info">
  <tr>
    <th abbr="Var">Variable</th>
    <th abbr="Beschr">Beschreibung</th>
  </tr>
  <tr id="TimeIdle">
    <td>A_TimeIdle</td>
    <td>Die Zeit in Millisekunden, die seit der letzten Eingabe via Tastatur, Maus usw. verstrichen ist. Diese Variable ist nützlich, um herauszufinden, ob der Benutzer abwesend ist. Physische Benutzereingaben sowie künstlich erzeugte Eingaben von <strong>beliebigen</strong> Programmen oder Skripten (z. B. der <a href="commands/Send.htm">Send</a>- oder <a href="commands/MouseMove.htm">MouseMove</a>-Befehl) werden diesen Wert wieder auf 0 setzen. Da dieser Wert meistens schrittweise um 10 erhöht wird, ist es ratsam, ihn nicht zu überprüfen, ob er exakt mit einem anderen Wert übereinstimmt. Überprüfen Sie stattdessen, ob dieser Wert größer oder kleiner als ein anderer Wert ist. Zum Beispiel: <code>IfGreater, A_TimeIdle, 600000, MsgBox, Die letzte Eingabeaktivität erfolgte vor ca. 10 Minuten</code>.</td>
  </tr>
  <tr id="TimeIdlePhysical">
    <td>A_TimeIdlePhysical</td>
    <td>Ähnlich wie oben, allerdings werden künstliche Tastendrücke und/oder Mausklicks ignoriert, wenn der entsprechende Hook (<a href="commands/_InstallKeybdHook.htm">Tastatur</a> oder <a href="commands/_InstallMouseHook.htm">Maus</a>) installiert ist; das heißt, dass diese Variable nur auf physische Ereignisse reagiert. Dadurch wird verhindert, dass simulierte Tastendrücke und Mausklicks fälschlicherweise die Aktivität des Benutzers vortäuschen. Wenn keine Hooks installiert sind, ist diese Variable äquivalent zu A_TimeIdle. Wenn nur ein Hook installiert ist, wird A_TimeIdlePhysical nur von dieser Art von physischer Eingabe beeinflusst (die Eingabe des anderen/nicht-installierten Hooks, hat sowohl physisch als auch künstlich keine Auswirkung).</td>
  </tr>
  <tr id="TimeIdleKeyboard">
    <td>A_TimeIdleKeyboard<br><span class="ver">[v1.1.28+]</span></td>
    <td>Wenn der <a href="commands/_InstallKeybdHook.htm">Tastatur-Hook</a> installiert ist, enthält diese Variable die Anzahl der Millisekunden, die seit der letzten physischen Tastatureingabe verstrichen sind. Ansonsten ist diese Variable äquivalent zu A_TimeIdle.</td>
  </tr>
  <tr id="TimeIdleMouse">
    <td>A_TimeIdleMouse<br><span class="ver">[v1.1.28+]</span></td>
    <td>Wenn der <a href="commands/_InstallMouseHook.htm">Maus-Hook</a> installiert ist, enthält diese Variable die Anzahl der Millisekunden, die seit der letzten physischen Mauseingabe verstrichen sind. Ansonsten ist diese Variable äquivalent zu A_TimeIdle.</td>
  </tr>
</table>
<h3 id="gui">GUI-Fenster und Menüleisten</h3>
<table class="info">
  <tr>
    <th abbr="Var">Variable</th>
    <th abbr="Beschr">Beschreibung</th>
  </tr>
  <tr id="DefaultGui">
    <td>A_DefaultGui <span class="ver">[v1.1.23+]</span></td>
    <td>Name oder Nummer der im aktuellen Thread verwendeten <a href="commands/Gui.htm#Default">Standard-GUI</a>.</td>
  </tr>
  <tr id="DefaultListView">
    <td>A_DefaultListView <span class="ver">[v1.1.23+]</span></td>
    <td><a href="commands/Gui.htm#Events">Variablenname</a> oder <a href="commands/Gui.htm#HwndOutputVar">HWND</a> des <a href="commands/ListView.htm">ListView-Steuerelements</a>, auf dem sich die <a href="commands/ListView.htm#BuiltIn">ListView-Funktionen</a> gerade beziehen. Wenn die Standard-GUI keine ListView hat, ist diese Variable leer.</td>
  </tr>
  <tr id="DefaultTreeView">
    <td>A_DefaultTreeView <span class="ver">[v1.1.23+]</span></td>
    <td><a href="commands/Gui.htm#Events">Variablenname</a> oder <a href="commands/Gui.htm#HwndOutputVar">HWND</a> des <a href="commands/TreeView.htm">TreeView-Steuerelements</a>, auf dem sich die <a href="commands/TreeView.htm#BuiltIn">TreeView-Funktionen</a> gerade beziehen. Wenn die Standard-GUI keine TreeView hat, ist diese Variable leer.</td>
  </tr>
  <tr id="Gui">
    <td>A_Gui</td>
    <td>Name oder Nummer einer <a href="commands/Gui.htm">GUI</a>, die den <a href="misc/Threads.htm">aktuellen Thread</a> gestartet hat. Diese Variable ist leer, es sei denn, ein GUI-Steuerelement, Menüpunkt oder Ereignis wie GuiClose/GuiEscape hat den aktuellen Thread gestartet.</td>
  </tr>
  <tr id="GuiControl">
    <td>A_GuiControl</td>
    <td>Der Name der zugeordneten Variable des GUI-Steuerelements, das den <a href="misc/Threads.htm">aktuellen Thread</a> gestartet hat. Wenn dieses Steuerelement keine <a href="commands/Gui.htm#Events">zugeordnete Variable</a> hat, enthält A_GuiControl stattdessen den Text bzw. Beschriftung des Steuerelements, bis zu einem Maximum von 63 Zeichen (auf diese Weise können zum Beispiel Button-Steuerelemente angesteuert werden, ohne ihnen zwingend einen Variablennamen zuzuordnen). A_GuiControl ist leer, wenn: 1) A_Gui leer ist; 2) ein GUI-Menüpunkt oder Ereignis wie GuiClose/GuiEscape den aktuellen Thread gestartet hat; 3) das Steuerelement keine zugeordnete Variable und Beschriftung hat; oder 4) das Steuerelement, das den aktuellen Thread ursprünglich gestartet hat, nicht mehr existiert (z. B. aufgrund von <a href="commands/Gui.htm#Destroy">Gui Destroy</a>).</td>
  </tr>
  <tr id="GuiWidth">
    <td>A_GuiWidth<br>
    A_GuiHeight</td>
    <td>Diese Variablen enthalten die Breite und Höhe des GUI-Fensters für <a href="commands/Gui.htm#GuiSize">GuiSize</a>-Ereignisse. Diese gelten nur für den Clientbereich des GUI-Fensters (das ist der Bereich ohne Titelleiste, Menüleiste und Rahmen). <span class="ver">[v1.1.11+]:</span> Diese Werte werden von der <a href="commands/Gui.htm#DPIScale">DPI-Skalierung</a> beeinflusst.</td>
  </tr>
  <tr>
    <td><span id="GuiX"></span><span id="GuiY"></span>A_GuiX<br>
    A_GuiY</td>
    <td>Diese Variablen enthalten die X- und Y-Koordinate für <a href="commands/Gui.htm#GuiContextMenu">GuiContextMenu</a>- und <a href="commands/Gui.htm#GuiDropFiles">GuiDropFiles</a>-Ereignisse. Die Koordinaten sind relativ zur linken oberen Ecke des Fensters. <span class="ver">[v1.1.11+]:</span> Diese Werte werden von der <a href="commands/Gui.htm#DPIScale">DPI-Skalierung</a> beeinflusst.</td>
  </tr>
  <tr>
    <td><span id="GuiEvent"></span><span id="GuiControlEvent"></span>A_GuiEvent<br><span class="small80">oder A_GuiControlEvent</span></td>
    <td><p>Die Art des Ereignisses, das den <a href="misc/Threads.htm">aktuellen Thread</a> gestartet hat. Wenn der Thread nicht durch eine <a href="commands/Gui.htm">GUI-Aktion</a> gestartet wurde, ist diese Variable leer. Ansonsten enthält sie eine der folgenden Zeichenketten:</p>
      <p><strong>Normal</strong>: Das Ereignis wurde via Linksklick oder Tastendrücke (<kbd>↑</kbd>, <kbd>→</kbd>, <kbd>↓</kbd>, <kbd>←</kbd>, <kbd>Tab</kbd>, <kbd>Leer</kbd>, unterstrichene Tastaturkurzbefehle und so weiter) ausgelöst. Dieser Wert wird auch für Menüpunkte und spezielle Ereignisse wie GuiClose und GuiEscape verwendet.</p>
      <p><strong>DoubleClick</strong>: Das Ereignis wurde durch einen Doppelklick ausgelöst. Hinweis: Der erste Klick des Doppelklicks bewirkt immer noch, dass ein <em>Normal</em>-Ereignis ausgelöst wird. Mit anderen Worten wird die Subroutine zweimal gestartet: zuerst durch den ersten Klick und dann durch den zweiten Klick.</p>
      <p><strong>RightClick</strong>: Tritt nur bei <a href="commands/Gui.htm#GuiContextMenu">GuiContextMenu</a>, <a href="commands/ListView.htm">ListViews</a> und <a href="commands/TreeView.htm">TreeViews</a> auf.</p>
      <p><strong>Kontextabhängige Werte:</strong> Um mehr zu erfahren, siehe <a href="commands/Gui.htm#GuiContextMenu">GuiContextMenu</a>, <a href="commands/Gui.htm#GuiDropFiles">GuiDropFiles</a>, <a href="commands/GuiControls.htm#Slider">Slider</a>, <a href="commands/GuiControls.htm#MonthCal">MonthCal</a>, <a href="commands/ListView.htm">ListView</a> und <a href="commands/TreeView.htm">TreeView</a>.</p>
    </td>
  </tr>
  <tr id="EventInfo">
    <td>A_EventInfo</td>
    <td><p>Enthält zusätzliche Informationen über die folgenden Ereignisse:</p>
      <ul>
        <li>Das <a href="commands/OnClipboardChange.htm#label">OnClipboardChange-Label</a></li>
        <li><a href="Hotkeys.htm#Wheel">Mausrad-Hotkeys</a> (WheelDown/Up/Left/Right)</li>
        <li><a href="commands/OnMessage.htm">OnMessage()</a></li>
        <li><a href="commands/RegisterCallback.htm">RegisterCallback()</a></li>
        <li><a href="misc/RegExCallout.htm">Callouts in Regulären Ausdrücken</a></li>
        <li><a href="commands/Gui.htm#label">GUI-Ereignisse</a>, genauer gesagt <a href="commands/Gui.htm#GuiContextMenu">GuiContextMenu</a>, <a href="commands/Gui.htm#GuiDropFiles">GuiDropFiles</a>, <a href="commands/GuiControls.htm#ListBox">ListBox</a>, <a href="commands/ListView.htm">ListView</a>, <a href="commands/TreeView.htm">TreeView</a> und <a href="commands/GuiControls.htm#StatusBar">StatusBar</a>. Wenn es keine zusätzlichen Informationen zu einem Ereignis gibt, enthält A_EventInfo eine 0.</li>
      </ul></td>
  </tr>
</table>
<p class="note"><strong>Hinweis</strong>: Jeder <a href="misc/Threads.htm">Thread</a> verwaltet seine eigenen Werte für A_Gui, A_GuiControl, A_GuiX/Y, A_GuiEvent und A_EventInfo (im Gegensatz zu Variablen wie A_ThisHotkey). Das heißt, dass die aktuellen Werte solcher Variablen für jeden Thread erhalten bleiben, egal ob er zwischenzeitlich von einem anderen Thread unterbrochen wird.</p>
<h3 id="h">Hotkeys, Hotstrings und benutzerdefinierte Menüpunkte</h3>
<table class="info">
  <tr>
    <th abbr="Var">Variable</th>
    <th abbr="Beschr">Beschreibung</th>
  </tr>
  <tr id="ThisMenuItem">
    <td>A_ThisMenuItem</td>
    <td>Der Name des zuletzt ausgewählten <a href="commands/Menu.htm">benutzerdefinierten Menüpunkts</a> (ansonsten leer).</td>
  </tr>
  <tr id="ThisMenu">
    <td>A_ThisMenu</td>
    <td>Der Name des Menüs, wo A_ThisMenuItem ausgewählt wurde.</td>
  </tr>
  <tr id="ThisMenuItemPos">
    <td>A_ThisMenuItemPos</td>
    <td>Eine Nummer, die die <u>aktuelle</u> Position von A_ThisMenuItem innerhalb von A_ThisMenu repräsentiert. Der erste Menüpunkt ist 1, der Zweite ist 2 und so weiter. Menütrennlinien werden mitgezählt. Diese Variable ist leer, wenn A_ThisMenuItem leer ist oder innerhalb von A_ThisMenu nicht mehr existiert. Sie ist auch leer, wenn A_ThisMenu selbst nicht mehr existiert.</td>
  </tr>
  <tr id="ThisHotkey">
    <td>A_ThisHotkey</td>
    <td><p>Der zuletzt ausgeführte <a href="Hotkeys.htm">Hotkey</a> oder <a href="Hotstrings.htm">nicht-automatisch-ersetzende Hotstring</a> (ansonsten leer), z. B. #z. Dieser Wert ändert sich, wenn der <a href="misc/Threads.htm">aktuelle Thread</a> von einem anderen Hotkey unterbrochen wird, deshalb ist es ratsam, diesen Wert sofort in eine andere Variable zu speichern, wenn der originale Wert später für eine andere Subroutine benötigt wird.</p>
      <p>Jeder neu erstellte Hotkey -- entweder via <a href="commands/Hotkey.htm">Hotkey-Befehl</a> oder <a href="Hotkeys.htm">Zweifach-Doppelpunkt-Label</a> -- erhält einen fest zugewiesenen Namen, der eine Zeichenkette bestehend aus seinem Tastennamen und der Reihenfolge seiner Modifikatorsymbolen ist. Dieser Name wird von allen <a href="commands/_IfWinActive.htm#variant">Varianten</a> des Hotkeys verwendet.</p>
      <p>Jeder neu erstellte Hotstring erhält einen fest zugewiesenen Namen, der identisch zum verwendeten Text ist.</p>
      <p>Siehe auch: <a href="#ThisLabel">A_ThisLabel</a></p></td>
  </tr>
  <tr id="PriorHotkey">
    <td>A_PriorHotkey</td>
    <td>Das gleiche wie oben, aber für den vorher ausgeführten Hotkey. Ansonsten leer.</td>
  </tr>
  <tr id="PriorKey">
    <td>A_PriorKey</td>
    <td><span class="ver">[v1.1.01+]:</span> Der Name der Taste, die vor dem Drücken oder Loslassen der letzten Taste gedrückt wurde, oder leer, wenn kein geeigneter Tastendruck im Tastenverlauf gefunden werden kann. Alle via Skript erzeugten Eingaben werden ignoriert. Bevor diese Variable genutzt werden kann, muss der <a href="commands/_InstallKeybdHook.htm">Tastatur</a>- oder <a href="commands/_InstallMouseHook.htm">Maus-Hook</a> installiert und der <a href="commands/KeyHistory.htm">Tastenverlauf</a> aktiviert sein.</td>
  </tr>
  <tr id="TimeSinceThisHotkey">
    <td>A_TimeSinceThisHotkey</td>
    <td>Die Zeit in Millisekunden, die seit dem Drücken von A_ThisHotkey verstrichen ist. Dieser Wert wird -1 sein, wenn A_ThisHotkey leer ist.</td>
  </tr>
  <tr id="TimeSincePriorHotkey">
    <td>A_TimeSincePriorHotkey</td>
    <td>Die Zeit in Millisekunden, die seit dem Drücken von A_PriorHotkey verstrichen ist. Dieser Wert wird -1 sein, wenn A_PriorHotkey leer ist.</td>
  </tr>
  <tr id="EndChar">
    <td>A_EndChar</td>
    <td>Ein <a href="Hotstrings.htm#EndChars">Endungszeichen</a>, das der Benutzer zuletzt gedrückt hat, um einen <a href="Hotstrings.htm">nicht-automatisch-ersetzenden Hotstring</a> auszulösen. Wenn kein Endungszeichen notwendig war (wegen der *-Option), wird diese Variable leer sein.</td>
  </tr>
</table>
<h3 id="os">Betriebssystem und Benutzerinformationen</h3>
<table class="info">
  <tr>
    <th abbr="Var">Variable</th>
    <th abbr="Beschr">Beschreibung</th>
  </tr>
  <tr id="ComSpec">
    <td>ComSpec <span class="ver">[v1.0.43.08+]</span><br>
    A_ComSpec <span class="ver">[v1.1.28+]</span></td>
    <td>
      <p>Enthält wie die ComSpec-Umgebungsvariable den Pfadnamen des Befehlszeileninterpreters. Diese Variable wird oft in Verbindung mit <a href="commands/Run.htm">Run/RunWait</a> genutzt. Zum Beispiel:</p>
      <pre class="NoIndent no-highlight">C:\Windows\system32\cmd.exe</pre>
    </td>
  </tr>
  <tr id="Temp">
    <td>A_Temp<br>
    <span class="ver">[v1.0.43.09+]</span></td>
    <td><p>Der vollständige Pfadname des Ordners zum Speichern von temporären Dateien. Folgende Standorte werden der Reihenfolge nach durchsucht, um den Pfadnamen zu ermitteln: 1) <a href="Concepts.htm#environment-variables">Umgebungsvariable</a> TMP, TEMP oder USERPROFILE; 2) Windows-Verzeichnis. Zum Beispiel:</p>
    <pre class="NoIndent no-highlight">C:\Users\&lt;Benutzer&gt;\AppData\Local\Temp</pre>
  </td>
  </tr>
  <tr id="OSType">
    <td>A_OSType</td>
    <td>Der aktuelle Typ des Betriebssystems. Da AutoHotkey 1.1 nur NT-basierte Betriebssysteme unterstützt, wird diese Variable immer WIN32_NT enthalten. Ältere Versionen von AutoHotkey geben WIN32_WINDOWS zurück, wenn Windows 95/98/ME als Betriebssystem verwendet wird.</td>
  </tr>
  <tr id="OSVersion">
    <td>A_OSVersion</td>
    <td><p>Enthält je nach Windows-Version eine der folgenden Zeichenketten: WIN_7 <span class="ver">[benötigt AHK_L 42+]</span>, WIN_8 <span class="ver">[benötigt v1.1.08+]</span>, WIN_8.1 <span class="ver">[benötigt v1.1.15+]</span>, WIN_VISTA, WIN_2003, WIN_XP, WIN_2000.</p>
    <p>Beachten Sie, dass das Betriebssystem eine andere Versionsnummer meldet bzw. A_OSVersion einen anderen Wert enthält, wenn der Kompatibilitätsmodus im Eigenschaftsfenster der AutoHotkey-Datei oder des kompilierten Skripts eingeschaltet ist.</p>
    <p><span class="ver">[v1.1.20+]:</span> Wenn die Version des Betriebssystems nicht als eine der oben aufgelisteten Versionen erkannt wird, enthält die Variable eine Zeichenkette im Format "Haupt.Neben.Build". <code>10.0.14393</code> wäre beispielsweise Windows 10 Build 14393, auch bekannt als Version 1607.</p>
      <pre><em>; Das folgende Beispiel ist obsolet, da diese Betriebssysteme nicht mehr unterstützt werden.</em>
if A_OSVersion in WIN_NT4,WIN_95,WIN_98,WIN_ME  <em>; Hinweis: Keine Leerzeichen hinter oder nach den Kommas.</em>
{
    MsgBox Dieses Skript benötigt Windows 2000/XP oder höher.
    ExitApp
}</pre>
    </td>
  </tr>
  <tr id="Is64bitOS">
    <td>A_Is64bitOS</td>
    <td><span class="ver">[v1.1.08+]:</span> Enthält 1 (wahr), wenn das Betriebssystem eine 64-Bit-Version ist, oder 0 (falsch), wenn es eine 32-Bit-Version ist.</td>
  </tr>
  <tr id="PtrSize">
    <td>A_PtrSize</td>
    <td><span class="ver">[AHK_L 42+]:</span> Enthält die Größe eines Pointers in Bytes. Dieser Wert ist entweder 4 oder 8, abhängig davon, ob zum Ausführen des Skripts die 32-Bit- oder 64-Bit-Version von AutoHotkey verwendet wird.</td>
  </tr>
  <tr id="Language">
    <td>A_Language</td>
    <td>Die Standardsprache des Systems als <a href="misc/Languages.htm">4-stelligen Code</a>.</td>
  </tr>
  <tr id="ComputerName">
    <td>A_ComputerName</td>
    <td>Der Netzwerkname des Computers.</td>
  </tr>
  <tr id="UserName">
    <td>A_UserName</td>
    <td>Der Anmeldename des Benutzers, der dieses Skript gestartet hat.</td>
  </tr>
  <tr id="WinDir">
    <td>A_WinDir</td>
    <td>Das Windows-Verzeichnis. Zum Beispiel: <code>C:\Windows</code></td>
  </tr>
  <tr id="ProgramFiles">
    <td>A_ProgramFiles<br>
    oder ProgramFiles</td>
    <td>
      <p>Das Verzeichnis der Programmdateien (z. B. <code>C:\Programme</code> oder <code>C:\Programme (x86)</code>). Die <a href="Concepts.htm#environment-variables">Umgebungsvariable</a> <em>ProgramFiles</em> enthält in der Regel denselben Wert.</p>
      <p>Für <a href="#Is64bitOS">64-Bit-Systeme</a> (nicht 32-Bit-Systeme) gilt Folgendes:</p>
      <ul>
        <li>Wenn zum Ausführen des Skripts die 32-Bit-Version von AutoHotkey verwendet wird, enthält A_ProgramFiles den Pfadnamen des Ordners "Programme (x86)".</li>
        <li>32-Bit-Prozesse können auf die Umgebungsvariable <em>ProgramW6432</em> zurückgreifen, um den Pfadnamen des 64-Bit-Ordners "Programme" abzurufen. In Windows 7 und höher steht diese Variable auch für 64-Bit-Prozesse zur Verfügung.</li>
        <li>Die Umgebungsvariable <em>ProgramFiles(x86)</em> enthält den Pfadnamen des 32-Bit-Ordners "Programme (x86)".</li>
      </ul>
      <p><span class="ver">[v1.0.43.08+]</span>: Das Präfix "A_" kann weggelassen werden, um den Umstieg auf <a href="commands/_NoEnv.htm">#NoEnv</a> zu erleichtern.</p>
    </td>
  </tr>
  <tr id="AppData">
    <td>A_AppData<br>
    <span class="ver">[v1.0.43.09+]</span></td>
    <td>
      <p>Der vollständige Pfadname des Ordners, der anwendungsspezifische Daten des aktuellen Benutzers enthält. Zum Beispiel:</p>
      <pre class="NoIndent no-highlight">C:\Users\&lt;Benutzer&gt;\AppData\Roaming</pre>
    </td>
  </tr>
  <tr id="AppDataCommon">
    <td>A_AppDataCommon<br>
    <span class="ver">[v1.0.43.09+]</span></td>
    <td>
      <p>Der vollständige Pfadname des Ordners, der anwendungsspezifische Daten aller Benutzer enthält. Zum Beispiel:</p>
      <pre class="NoIndent no-highlight">C:\ProgramData</pre>
    </td>
  </tr>
  <tr id="Desktop">
    <td>A_Desktop</td>
    <td>
      <p>Der vollständige Pfadname des Ordners, der die Desktop-Dateien des aktuellen Benutzers enthält. Zum Beispiel:</p>
      <pre class="NoIndent no-highlight">C:\Users\&lt;Benutzer&gt;\Desktop</pre>
    </td>
  </tr>
  <tr id="DesktopCommon">
    <td>A_DesktopCommon</td>
    <td>
      <p>Der vollständige Pfadname des Ordners, der die Desktop-Dateien aller Benutzer enthält. Zum Beispiel:</p>
      <pre class="NoIndent no-highlight">C:\Users\Public\Desktop</pre>
    </td>
  </tr>
  <tr id="StartMenu">
    <td>A_StartMenu</td>
    <td>
      <p>Der vollständige Pfadname des Ordners, der die Startmenü-Dateien des aktuellen Benutzers enthält. Zum Beispiel:</p>
      <pre class="NoIndent no-highlight">C:\Users\&lt;Benutzer&gt;\AppData\Roaming\Microsoft\Windows\Start Menu</pre>
    </td>
  </tr>
  <tr id="StartMenuCommon">
    <td>A_StartMenuCommon</td>
    <td>
      <p>Der vollständige Pfadname des Ordners, der die Startmenü-Dateien aller Benutzer enthält. Zum Beispiel:</p>
      <pre class="NoIndent no-highlight">C:\ProgramData\Microsoft\Windows\Start Menu</pre>
    </td>
  </tr>
  <tr id="Programs">
    <td>A_Programs</td>
    <td>
      <p>Der vollständige Pfadname des Programme-Ordners im Startmenü des aktuellen Benutzers. Zum Beispiel:</p>
      <pre class="NoIndent no-highlight">C:\Users\&lt;Benutzer&gt;\AppData\Roaming\Microsoft\Windows\Start Menu\Programs</pre>
    </td>
  </tr>
  <tr id="ProgramsCommon">
    <td>A_ProgramsCommon</td>
    <td>
      <p>Der vollständige Pfadname des Programme-Ordners im Startmenü aller Benutzer. Zum Beispiel:</p>
      <pre class="NoIndent no-highlight">C:\ProgramData\Microsoft\Windows\Start Menu\Programs</pre>
  </td>
  </tr>
  <tr id="Startup">
    <td>A_Startup</td>
    <td>
      <p>Der vollständige Pfadname des Autostart-Ordners im Startmenü des aktuellen Benutzers. Zum Beispiel:</p>
      <pre class="NoIndent no-highlight">C:\Users\&lt;Benutzer&gt;\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup</pre>
  </td>
  </tr>
  <tr id="StartupCommon">
    <td>A_StartupCommon</td>
    <td>
      <p>Der vollständige Pfadname des Autostart-Ordners im Startmenü aller Benutzer. Zum Beispiel:</p>
      <pre class="NoIndent no-highlight">C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Startup</pre>
  </td>
  </tr>
  <tr id="MyDocuments">
    <td>A_MyDocuments</td>
    <td>
      <p>Der vollständige Pfadname des Ordners "Eigene Dokumente", der beliebige Dateien (vorzugsweise Dokumente) des aktuellen Benutzers enthält. Wenn der Ordner die oberste Ebene eines Laufwerks ist, wird im Gegensatz zu anderen ähnlichen Variablen der umgekehrte Schrägstrich am Ende weggelassen (zum Beispiel wäre <code>M:</code> anstelle von <code>M:\</code> enthalten). Zum Beispiel:</p>
      <pre class="NoIndent no-highlight">C:\Users\&lt;Benutzer&gt;\Documents</pre>
  </td>
  </tr>
  <tr id="IsAdmin">
    <td>A_IsAdmin</td>
    <td><p>Wenn der aktuelle Benutzer über administrative Rechte verfügt, ist eine 1 enthalten. Ansonsten ist eine 0 enthalten.</p>
    <p id="RequireAdmin">Um das Skript sich selbst mit administrativen Rechten neu starten zu lassen (oder um diese Rechte vom Benutzer einzufordern), verwenden Sie <a href="commands/Run.htm#RunAs">Run *RunAs</a>. Beachten Sie aber, dass die Ausführung des Skripts als Administrator dazu führt, dass alle vom Skript gestarteten Programme auch als Administrator ausgeführt werden. Eine mögliche Alternative finden Sie in <a href="FAQ.htm#uac">der FAQ</a>.</p>
    </td>
  </tr>
  <tr id="Screen">
    <td><p>A_ScreenWidth<br>
    A_ScreenHeight</p></td>
    <td><p>Die Breite und Höhe des primären Bildschirms in Pixel (z. B. 1024 und 768).</p>
      <p>Mit <a href="commands/SysGet.htm">SysGet</a> können die Abmessungen von nicht-primären Bildschirmen abgerufen werden.</p>
      <p>Das folgende Beispiel zeigt, wie die Breite und Höhe des gesamten Desktops ermittelt werden kann (selbst wenn er sich über mehrere Bildschirme erstrecken sollte):</p>
<pre>
<a href="commands/SysGet.htm">SysGet</a>, VirtuelleBreite, 78
<a href="commands/SysGet.htm">SysGet</a>, VirtuelleHöhe, 79
</pre>
    <p>Mit <a href="commands/SysGet.htm">SysGet</a> kann zudem der Arbeitsbereich eines Bildschirms ermittelt werden. Dieser Bereich ist in der Regel kleiner als der Gesamtbereich des Bildschirms, weil die Taskleiste und andere registrierte Desktopsymbolleisten nicht berücksichtigt werden.</p></td>
  </tr>
  <tr id="ScreenDPI">
    <td>A_ScreenDPI <span class="ver">[v1.1.11+]</span></td>
    <td>Die Anzahl der Pixel pro logischen Zoll entlang der Bildschirmbreite. Dieser Wert bezieht sich auf alle Bildschirme eines Systems. Standardmäßig gilt ein DPI-Wert von 96, abhängig von der Textgrößeneinstellung des Systems. Siehe auch <a href="commands/Gui.htm#DPIScale">Gui -DPIScale</a>.</td>
  </tr>
  <tr id="IPAddress">
    <td>A_IPAddress1 bis 4</td>
    <td>Die IP-Adressen der ersten 4 Netzwerkadapter im Computer.</td>
  </tr>
</table>
<h3 id="misc">Sonstiges</h3>
<table class="info">
  <tr>
    <th abbr="Var">Variable</th>
    <th abbr="Beschr">Beschreibung</th>
  </tr>
  <tr id="Cursor">
    <td>A_Cursor</td>
    <td><p>Der Typ des aktuell angezeigten Mauszeigers. Die Variable kann eines der folgenden Wörter enthalten: AppStarting, Arrow, Cross, Help, IBeam, Icon, No, Size, SizeAll, SizeNESW, SizeNS, SizeNWSE, SizeWE, UpArrow, Wait, Unknown. Die Großbuchstaben nach Size sind Himmelsrichtungen, z. B. NESW = NorthEast+SouthWest (Nordosten+Südwesten). Die handförmigen Mauszeiger (Zeigen und Greifen) sind als Unknown klassifiziert.</p></td>
  </tr>
  <tr id="Caret">
    <td>A_CaretX<br>
    A_CaretY</td>
    <td><p>Die aktuelle X- und Y-Koordinate des Textcursors (Texteinfügemarke). Standardmäßig sind die Koordinaten relativ zum aktiven Fenster. Mit <a href="commands/CoordMode.htm">CoordMode</a> können die Koordinaten relativ zum gesamten Bildschirm gemacht werden. Wenn kein Fenster aktiv ist oder die Position des Textcursors nicht ermittelt werden kann, sind diese Variablen leer.</p>
      <p>Das folgende Skript zeigt die aktuellen Positionsdaten eines Textcursors mithilfe eines selbstaktualisierenden Tooltips an. Beachten Sie, dass einige Fenster (z. B. bestimmte Versionen von MS Word) immer die gleichen Positionsdaten melden, wenn Sie den Textcursor verschieben.</p>
<pre>
#Persistent
SetTimer, TextcursorAbfragen, 100
return
TextcursorAbfragen:
    ToolTip, X%A_CaretX% Y%A_CaretY%, A_CaretX, A_CaretY - 20
return
</pre>
    </td>
  </tr>
  <tr id="Clipboard">
    <td>Clipboard</td>
    <td>Kann genutzt werden, um den Inhalt der systeminternen Zwischenablage abzurufen oder zu setzen. Einzelheiten finden Sie unter <a href="misc/Clipboard.htm">Clipboard</a>.</td>
  </tr>
  <tr id="ClipboardAll">
    <td>ClipboardAll</td>
    <td>Der gesamte Inhalt der Zwischenablage (z. B. Formatierung und Text). Einzelheiten finden Sie unter <a href="misc/Clipboard.htm#ClipboardAll">ClipboardAll</a>.</td>
  </tr>
  <tr id="ErrorLevel">
    <td>ErrorLevel</td>
    <td>Diese Variable wird gesetzt, um den Erfolg oder Misserfolg einiger Befehle zu kennzeichnen. Einzelheiten finden Sie unter <a href="misc/ErrorLevel.htm">ErrorLevel</a>.</td>
  </tr>
  <tr id="LastError">
    <td>A_LastError</td>
    <td>Das Ergebnis der GetLastError()-Systemfunktion oder des letzten COM-Objektaufrufs. Einzelheiten finden Sie unter <a href="commands/DllCall.htm#LastError">DllCall()</a> und <a href="commands/Run.htm#LastError">Run/RunWait</a>.</td>
  </tr>
  <tr id="TrueFalse">
    <td>True<br />False</td>
    <td><p>Enthalten 1 und 0. Sie können verwendet werden, um ein Skript besser lesbar zu machen. Einzelheiten finden Sie unter <a href="Concepts.htm#boolean">Boolesche Werte</a>.</p>
    </td>
  </tr>
</table>
<h3 id="loop">Loop</h3>
<table class="info">
  <tr>
    <th abbr="Var">Variable</th>
    <th abbr="Beschr">Beschreibung</th>
  </tr>
  <tr id="Index">
    <td>A_Index</td>
    <td>Enthält die Nummer des aktuellen Schleifendurchlaufs (ein 64-Bit-Integer). Wenn beispielsweise das Skript den Schleifenkörper zum ersten Mal ausführt, enthält diese Variable eine 1. Einzelheiten finden Sie unter <a href="commands/Loop.htm">Loop</a> oder <a href="commands/While.htm">While-Schleife</a>.</td>
  </tr>
  <tr>
    <td>A_LoopFileName, etc.</td>
    <td>Diese und andere verwandten Variablen sind nur für <a href="commands/LoopFile.htm">Datei-Schleifen</a> relevant.</td>
  </tr>
  <tr>
    <td>A_LoopRegName, etc.</td>
    <td>Diese und andere verwandten Variablen sind nur für <a href="commands/LoopReg.htm">Registry-Schleifen</a> relevant.</td>
  </tr>
  <tr>
    <td>A_LoopReadLine</td>
    <td>Siehe <a href="commands/LoopReadFile.htm">dateilesende Schleife</a>.</td>
  </tr>
  <tr>
    <td>A_LoopField</td>
    <td>Siehe <a href="commands/LoopParse.htm">parsende Schleife</a>.</td>
  </tr>
</table>

<h2 id="cap">Kapazität und Speicher von Variablen</h2>
<ul>
  <li>Jede Variable kann bis zu 64 MB Text enthalten (dieses Limit kann mit <a href="commands/_MaxMem.htm">#MaxMem</a> erhöht werden).</li>
  <li>Wenn man einer Variable eine neue Zeichenkette zuweist, die länger als der aktuelle Inhalt der Variable ist, wird der reservierte Systemspeicher automatisch erweitert.</li>
  <li>Um den reservierten Speicher einer großen Variable wieder freizugeben, weisen Sie ihr einen leeren Wert zu (z. B. <code>Var := ""</code>).</li>
  <li>Es können beliebig viele Variablen erstellt werden. Das Programm unterstützt mehrere Millionen Variablen, ohne dass es signifikant an Leistung einbüßt.</li>
  <li>Befehle, Funktionen und Ausdrücke, die numerische Eingaben akzeptieren, unterstützen in der Regel Floating-Point-Werte mit einer Genauigkeit von 15 Nachkommastellen. Integer können vorzeichenfähige 64-Bit-Werte sein, die einen Bereich von -9223372036854775808 (-0x8000000000000000) bis 9223372036854775807 (0x7FFFFFFFFFFFFFFF) abdecken. Integer-Konstanten oder numerische Zeichenketten außerhalb dieses Bereichs werden nicht unterstützt, und können zu inkonsistenten Ergebnissen führen, wenn sie als Zahlen verwendet werden. Arithmetische Operationen mit Integern werden bei Überlauf umgekehrt (z. B. 0x7FFFFFFFFFFFFFFF + 1 = -0x8000000000000000).</li>
</ul>
</body>
</html>
