<!DOCTYPE HTML>
<html lang="de">
<head>
<title>Func-Objekt - Methoden &amp; Eigenschaften | AutoHotkey</title>
<meta name="description" content="Das Func-Objekt bietet eine Schnittstelle für eine Funktion zum Abrufen von Werten wie die Parameteranzahl oder zum Durchführen von Aktionen wie das Aufrufen der Funktion." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga4.js" type="text/javascript"></script>
</head>
<body>

<h1>Func-Objekt <span class="ver">[v1.1.00+]</span></h1>

<p>Repräsentiert eine benutzerdefinierte oder interne Funktion, die über das Skript aufgerufen werden kann. <a href="../commands/Func.htm">Func</a> gibt ein Objekt dieses Typs zurück.</p>

<p>Informationen zu anderen Objekten, die wie Funktionen aufgerufen werden können, finden Sie unter <a href="Functor.htm">Funktionsobjekte</a>.</p>

<p>Eine Referenz zu einem Func-Objekt wird auch als <em>Funktionsreferenz</em> bezeichnet. Um eine Funktionsreferenz abzurufen, verwenden Sie wie folgt die Func-Funktion:</p>
<pre><em>; Ruft eine Referenz zu der Funktion "StrLen" ab.</em>
fn := Func("StrLen")

<em>; Zeigt Informationen über die Funktion an.</em>
MsgBox % fn.Name "() ist " (fn.IsBuiltIn ? "integriert." : "benutzerdefiniert.")</pre>

<h2 id="toc">Inhaltsverzeichnis</h2>
<ul class="indent">
  <li><a href="#Methods">Methoden</a>:
    <ul>
      <li><a href="#Call">Call</a>: Ruft die Funktion auf.</li>
      <li><a href="#Bind">Bind</a>: Bindet Parameter an die Funktion und gibt ein <a href="Functor.htm#BoundFunc">BoundFunc-Objekt</a> zurück.</li>
      <li><a href="#IsByRef">IsByRef</a>: Stellt fest, ob der Parameter ein ByRef ist.</li>
      <li><a href="#IsOptional">IsOptional</a>: Stellt fest, ob der Parameter optional ist.</li>
    </ul>
  </li>
  <li><a href="#Properties">Eigenschaften</a>:
    <ul>
      <li><a href="#Name">Name</a>: Gibt den Funktionsnamen zurück.</li>
      <li><a href="#IsBuiltIn">IsBuiltIn</a>: Gibt <i>True</i> zurück, wenn die Funktion eine <a href="../Functions.htm#BuiltIn">interne Funktion</a> ist, ansonsten <i>False</i>.</li>
      <li><a href="#IsVariadic">IsVariadic</a>: Gibt <i>True</i> zurück, wenn die Funktion <a href="../Functions.htm#Variadic">variadisch</a> ist, ansonsten <i>False</i>.</li>
      <li><a href="#MinParams">MinParams</a>: Gibt die Anzahl der benötigten Parameter zurück.</li>
      <li><a href="#MaxParams">MaxParams</a>: Gibt die Anzahl der offiziell deklarierten Parameter einer benutzerdefinierten Funktion oder die maximale Anzahl der Parameter einer internen Funktion zurück.</li>
    </ul>
  </li>
</ul>

<h2 id="Methods">Methoden</h2>
<div class="methodShort" id="Call"><h3>Call</h3>
<p>Ruft die Funktion auf.</p>
<pre class="Syntax">
Func.<span class="func">Call</span>(Param1, Param2, ...)  <em>; Benötigt <span class="ver">[v1.1.19+]</span></em>
Func.(Param1, Param2, ...)  <em>; Alte Form - veraltet</em>
</pre>
<dl>
  <dt>Param1, Param2, ...</dt>
  <dd>Parameter und Rückgabewerte werden durch die Funktion definiert.</dd>
</dl>
<p><span class="ver">[v1.1.07+]:</span> <code><a href="../Functions.htm#DynCall">%Func%()</a></code> kann verwendet werden, um eine Funktion via Name oder Referenz aufzurufen, oder um ein Objekt aufzurufen, das die __Call-<a href="../Objects.htm#Meta_Functions">Metafunktion</a> implementiert. Dies sollte anstelle von <code>Func.()</code> verwendet werden, wo auch immer das möglich ist.</p>
</div>

<div class="methodShort" id="Bind"><h3>Bind <span class="ver">[v1.1.20+]</span></h3>
<p>Bindet Parameter an die Funktion und gibt ein <a href="Functor.htm#BoundFunc">BoundFunc-Objekt</a> zurück.</p>
<pre class="Syntax">BoundFunc := Func.<span class="func">Bind</span>(Param1, Param2, ...)</pre>
<dl>
  <dt>Param1, Param2, ...</dt>
  <dd>Beliebig viele Parameter.</dd>
</dl>
<p>Informationen und Beispiele finden Sie unter <a href="Functor.htm#BoundFunc">BoundFunc-Objekt</a>.</p>
</div>

<div class="methodShort" id="IsByRef"><h3>IsByRef</h3>
<p>Stellt fest, ob der Parameter ein ByRef ist.</p>
<pre class="Syntax">BoolescherWert := Func.<span class="func">IsByRef</span>(<span class="optional">ParamIndex</span>)</pre>
<dl>
  <dt>ParamIndex</dt>
  <dd>Optional: Die 1-basierte Indexnummer eines Parameters. Lässt man diesen Parameter weg, kennzeichnet <em>BoolescherWert</em>, ob die Funktion überhaupt ByRef-Parameter hat.</dd>
</dl>
<p>Der Rückgabewert ist eine leere Zeichenkette, wenn die Funktion integriert oder <i>ParamIndex</i> ungültig ist; ansonsten kennzeichnet ein boolescher Wert, ob der Parameter ein ByRef ist.</p>
</div>

<div class="methodShort" id="IsOptional"><h3>IsOptional</h3>
<p>Stellt fest, ob der Parameter optional ist.</p>
<pre class="Syntax">BoolescherWert := Func.<span class="func">IsOptional</span>(<span class="optional">ParamIndex</span>)</pre>
<dl>
  <dt>ParamIndex</dt>
  <dd>Optional: Die 1-basierte Indexnummer eines Parameters. Lässt man diesen Parameter weg, kennzeichnet <em>BoolescherWert</em>, ob die Funktion überhaupt optionale Parameter hat.</dd>
</dl>
<p>Der Rückgabewert ist eine leere Zeichenkette, wenn <i>ParamIndex</i> ungültig ist; ansonsten kennzeichnet ein boolescher Wert, ob der Parameter optional ist.</p>
<p>Parameter müssen nicht offiziell deklariert werden, wenn die Funktion variadisch ist. Interne Funktionen werden unterstützt.</p></div>

<h2 id="Properties">Eigenschaften</h2>
<div class="methodShort" id="Name"><h3>Name</h3>
<p>Gibt den Funktionsnamen zurück.</p>
<pre class="Syntax">FunktionName := Func.Name</pre>
</div>

<div class="methodShort" id="IsBuiltIn"><h3>IsBuiltIn</h3>
<p>Gibt <i>True</i> zurück, wenn die Funktion eine <a href="../Functions.htm#BuiltIn">interne Funktion</a> ist, ansonsten <i>False</i>.</p>
<pre class="Syntax">BoolescherWert := Func.IsBuiltIn</pre>
</div>

<div class="methodShort" id="IsVariadic"><h3>IsVariadic</h3>
<p>Gibt <i>True</i> zurück, wenn die Funktion <a href="../Functions.htm#Variadic">variadisch</a> ist, ansonsten <i>False</i>.</p>
<pre class="Syntax">BoolescherWert := Func.IsVariadic</pre>
</div>

<div class="methodShort" id="MinParams"><h3>MinParams</h3>
<p>Gibt die Anzahl der benötigten Parameter zurück.</p>
<pre class="Syntax">ParamAnzahl := Func.MinParams</pre>
</div>

<div class="methodShort" id="MaxParams"><h3>MaxParams</h3>
<p>Gibt die Anzahl der offiziell deklarierten Parameter einer benutzerdefinierten Funktion oder die maximale Anzahl der Parameter einer internen Funktion zurück.</p>
<pre class="Syntax">ParamAnzahl := Func.MaxParams</pre>
<p>Wenn die Funktion <a href="../Functions.htm#Variadic">variadisch</a> ist, kennzeichnet <em>ParamAnzahl</em> die maximale Anzahl an Parametern, die von der Funktion akzeptiert werden kann, ohne einen Überlauf zu riskieren.</p></div>

</body>
</html>
