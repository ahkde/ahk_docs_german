<!DOCTYPE HTML>
<html lang="de">
<head>
<title>Label - Syntax &amp; Verwendung | AutoHotkey</title>
<meta name="description" content="Label identifizieren eine Codezeile und können verwendet werden, um ein Ziel von Goto zu sein oder um eine Subroutine zu formen." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga4.js" type="text/javascript"></script>
</head>
<body>

<h1>Label</h1>

<h2 id="toc">Inhaltsverzeichnis</h2>
<ul>
  <li><a href="#syntax-and-usage">Syntax und Verwendung</a></li>
  <li><a href="#subroutines">Subroutinen</a></li>
  <li><a href="#dynamic-labels">Dynamische Label</a></li>
  <li><a href="#hotkeys-and-hotstrings">Hotkeys und Hotstrings</a></li>
  <li><a href="#named-loops">Benannte Schleifen</a></li>
  <li><a href="#Functions">Funktionen</a></li>
  <li><a href="#related">Siehe auch</a></li>
</ul>

<h2 id="syntax-and-usage">Syntax und Verwendung</h2>
<p>Ein Label identifiziert eine Codezeile. Es dient als Ziel von <a href="../commands/Goto.htm">Goto</a> oder formt eine <a href="#subroutines">Subroutine</a>. Es gibt drei verschiedene Labeltypen: Normale benannte Label, <a href="../Hotkeys.htm">Hotkey</a>-Label und <a href="../Hotstrings.htm">Hotstring</a>-Label.</p>
<p>Normale Label bestehen aus einem Namen, gefolgt von einem Doppelpunkt.</p>
<pre>das_ist_ein_Label:
</pre>
<p>Hotkey-Label bestehen aus einem Hotkey, gefolgt von zwei Doppelpunkten.</p>
<pre>^a::
</pre>
<p>Hotstring-Label bestehen aus einem Doppelpunkt, null oder mehr <a href="../Hotstrings.htm#Options">Optionen</a>, einem weiteren Doppelpunkt, einer Abkürzung und zwei Doppelpunkten.</p>
<pre>:*:bzw::
</pre>
<p>Grundsätzlich darf, außer Leerraumzeichen und Kommentare, kein anderer Code auf der Zeile eines Labels stehen. Allerdings:</p>
<ul>
  <li>Direkt nach einem Hotkey-Label kann ein Befehl oder eine andere Anweisung erfolgen, um einen <em>einzeiligen</em> Hotkey zu erstellen. Mit anderen Worten: Wenn ein Befehl, eine Zuweisung oder ein Ausdruck auf der Zeile eines Hotkey-Labels vorhanden ist, verhält es sich so, als ob danach ein <code>return</code> angegeben wurden wäre.</li>
  <li>Ein Hotkey, der rechts neben den zwei Doppelpunkten einen <a href="../KeyList.htm">Tastennamen</a> stehen hat, ist eigentlich eine <a href="Remap.htm"><em>Neubelegung</em></a>, also eine Kurzschreibweise für ein <a href="../misc/Remap.htm#actually">Hotkey-Paar</a>. <code>a::b</code> beispielsweise erstellt Hotkeys und Labels für <code>*a</code> und <code>*a Up</code>, aber erstellt kein Label mit dem Namen <code>a</code>.</li>
  <li>Ein Hotstring, der rechts neben den letzten zwei Doppelpunkten Text stehen hat, ist ein <em>automatisch-ersetzender</em> Hotstring. Automatisch-ersetzende Hotstrings werden nicht als Label angesehen.</li>
</ul>
<p><strong>Namen</strong>: Labelnamen sind nicht Groß-/Kleinschreibung-sensitiv und können aus beliebigen Zeichen, außer Leerzeichen, Tabulator, Komma und <a href="EscapeChar.htm">Escapezeichen</a> (`), bestehen. Allerdings sollten die Namen aufgrund von Gestaltungsrichtlinien nur aus Buchstaben, Zahlen und Unterstriche bestehen (zum Beispiel: <em>MeineListView</em>, <em>Menü_Datei_Öffnen</em> und <em>outer_loop</em>). Labelnamen dürfen nur einmal im ganzen Skript vorkommen.</p>
<p>Zwar gibt es keine reservierten Namen, allerdings sollten die folgenden Namen nicht verwendet werden: On, Off, Toggle, AltTab, ShiftAltTab, AltTabAndMenu und AltTabMenuDismiss. Diese Werte haben eine besondere Bedeutung beim <a href="../commands/Hotkey.htm">Hotkey-Befehl</a>.</p>
<p><strong>Ziel</strong>: Das Ziel eines Labels ist die nächste Zeile mit ausführbarem Code. Ausführbarer Code beinhaltet Befehle, Zuweisungen, <a href="../Variables.htm#Expressions">Ausdrücke</a> und <a href="../commands/Block.htm">Blöcke</a>, aber nicht Direktiven, Label, Hotkeys oder Hotstrings. Im folgenden Beispiel verweisen <code>run_notepad</code> und <code>#n</code> auf dieselbe <code>Run</code>-Zeile:</p>
<pre>run_notepad:
#n::
    Run Notepad
    return
</pre>
<p><strong>Ausführung</strong>: Labels haben wie Direktiven keine Wirkung, wenn sie während einer normalen Ausführung erreicht werden. Im folgenden Beispiel wird eine MsgBox zweimal angezeigt - einmal beim Ausführen der Subroutine durch <a href="../commands/Gosub.htm">Gosub</a> und nochmals, nachdem die Subroutine ihr Return erreicht hat:</p>
<pre>Gosub Label1

Label1:
MsgBox <a href="../Variables.htm#ThisLabel">%A_ThisLabel%</a>
return</pre>

<h2 id="subroutines">Subroutinen</h2>
<p>Eine Subroutine ist ein Teil des Codes, der <em>aufgerufen</em> werden kann, um eine bestimmte Aufgabe durchzuführen. Die Ausführung einer Subroutine beginnt beim Ziel eines Labels und endet, wenn ein <a href="../commands/Return.htm">Return</a> oder <a href="../commands/Exit.htm">Exit</a> erreicht wird. Da das Ende einer Subroutine abhängig vom Kontrollfluss ist, kann jedes Label als Goto-Ziel und als Beginn einer Subroutine fungieren.</p>

<h2 id="dynamic-labels">Dynamische Label</h2>
<p>Viele Befehle, die einen Labelnamen akzeptieren, akzeptieren auch eine <a href="../Variables.htm">Variablenreferenz</a> wie %MeinLabel% - in diesem Fall wird der Name, der in der Variable enthalten ist, als Ziel verwendet. Allerdings geschieht das auf Kosten der Leistung, weil das Ziellabel jedes Mal neu gesucht werden muss und nicht wie sonst nur beim Starten des Skripts.</p>

<h2 id="hotkeys-and-hotstrings">Hotkeys und Hotstrings</h2>
<p>Jeder <a href="../Hotkeys.htm">Zweifach-Doppelpunkt-Hotkey</a> erzeugt ebenfalls ein Label, es sei denn, es handelt sich um einen <a href="../Hotkeys.htm#Function">Funktions-Hotkey</a>. Der Name des Labels entspricht genau dem, wie er im Skript geschrieben ist, und kann vom Namen des Hotkeys (wie von <a href="../Variables.htm#ThisHotkey">A_ThisHotkey</a> zurückgegeben) abweichen, z. B. wenn die Modifikatoren in einer anderen Reihenfolge geschrieben sind. Der Labelname enthält die Modifikatoren des Hotkeys, aber nicht den abschließenden Zweifach-Doppelpunkt (<code>::</code>).</p>
<p>Der Name des <a href="../Hotstrings.htm#label">Hotstring-Labels</a> enthält am Anfang den Doppelpunkt und die Optionen, aber nicht den abschließenden Zweifach-Doppelpunkt (<code>::</code>).</p>
<p><a href="../Hotkeys.htm">Hotkey</a>- und <a href="../Hotstrings.htm#label">Hotstring</a>-Label sind auch gültige Ziele für <a href="../commands/Goto.htm">Goto</a>, <a href="../commands/Gosub.htm">Gosub</a> und andere Befehle. Allerdings kann ein Hotkey- oder Hotstring-Label nur auf diese Weise verwendet werden, wenn es das erste Label mit dem angegebenen Namen ist. Zum Beispiel:</p>
<pre>gosub ^+a  <em>; Beispiel-Hotkey.</em>
gosub +^a  <em>; Globaler Hotkey.</em>
gosub Esc  <em>; Esc-Label.</em>
ExitApp

#IfWinActive Beispiel
^+a::MsgBox Beispiel-Hotkey.
Esc:
    MsgBox Esc-Label.
    return
#If
+^a::MsgBox Globaler Hotkey.
Esc::MsgBox Esc-Hotkey.</pre>
<p>Diese Einschränkung gilt auch für den <em>Label</em>-Parameter des <a href="../commands/Hotkey.htm">Hotkey</a>-Befehls.</p>

<h2 id="named-loops">Benannte Schleifen</h2>
<p>Ein Label kann auch dazu verwendet werden, eine Schleife für die Befehle <a href="../commands/Continue.htm">Continue</a> und <a href="../commands/Break.htm">Break</a> zu identifizieren. Dies ermöglicht dem Skript, von einer inneren Schleife heraus den aktuellen Durchlauf einer äußeren Schleife zu überspringen oder die äußere Schleife zu unterbrechen.</p>

<h2 id="Functions">Funktionen</h2>
<p><span class="ver">[v1.1.20+]</span>: In einigen Fällen können <a href="../Functions.htm">Funktionen</a> anstelle von Labels verwendet werden, dazu zählen:</p>
<ul>
  <li><a href="../commands/Gui.htm#Labels">Gui-Ereignisse</a> wie z. B. GuiClose</li>
  <li><a href="../commands/Gui.htm#label">Gui-Steuerelement-Ereignisse</a> (g-Labels)</li>
  <li><a href="../commands/Hotkey.htm#Functor">Hotkey</a></li>
  <li><a href="../commands/Menu.htm#Functor">Menu</a></li>
  <li><a href="../commands/SetTimer.htm#Functor">SetTimer</a></li>
</ul>
<p></p>
<p>Die Vorteile von Funktionen sind, dass sie lokale Variablen verwenden können und dass sie in einigen Fällen (wie z. B. Gui-Steuerelement-Ereignisse) auch Parameter mit nützlichen Informationen akzeptieren.</p>

<h2 id="related">Siehe auch</h2>
<p><a href="../commands/IsLabel.htm">IsLabel()</a>, <a href="../Variables.htm#ThisLabel">A_ThisLabel</a>, <a href="../commands/Gosub.htm">Gosub</a>, <a href="../commands/Goto.htm">Goto</a>, <a href="../commands/OnExit.htm#command">OnExit</a>, <a href="../commands/SetTimer.htm">SetTimer</a>, <a href="../commands/Hotkey.htm">Hotkey</a>, <a href="../commands/Gui.htm#Labels">Gui-Ereignisse</a>, <a href="../commands/Gui.htm#label">g-Label</a>, <a href="../commands/OnClipboardChange.htm#label">OnClipboardChange-Label</a></p>

</body>
</html>
