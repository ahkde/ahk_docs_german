<!DOCTYPE HTML>
<html lang="de">
<head>
<title>Arrays - Definition &amp; Verwendung | AutoHotkey v1</title>
<meta name="description" content="Arrays sind entweder Datenstrukturen, die aus einer Sammlung von Werten bestehen, die jeweils durch einen Schlüssel identifiziert werden, oder eine Sammlung von sequentiell nummerierten Variablen." />
<meta name="ahk:equiv-v2" content="lib/Array.htm" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga4.js" type="text/javascript"></script>
</head>

<body>
<h1>Arrays</h1>
<p>In AutoHotkey gibt es zwei verschiedene Typen von Dingen, die etwas mit Arrays zu tun haben:</p>
<ul>
  <li><a href="#object-based">Objektbasierte Arrays</a></li>
  <li><a href="#pseudo">Pseudo-Arrays</a> (nicht zur Verwendung empfohlen)</li>
</ul>
<p class="note"><strong>Hinweis:</strong> Die folgenden Codebeispiele zeigen verschiedene Ansätze, die zum gleichen Endergebnis führen.</p>

<h2 id="object-based">Objektbasierte Arrays <span class="ver">[AHK_L 31+]</span></h2>
<p>Solche Arrays können <a href="../Objects.htm#Usage_Associative_Arrays">assoziative Arrays</a> oder <a href="../Objects.htm#Usage_Simple_Arrays">einfache Arrays</a> sein. Assoziative Arrays werden mit der Object-Funktion oder mit geschweiften Klammern erstellt, während einfache Arrays mit der Array-Funktion oder mit eckigen Klammern erstellt werden. Weitere Informationen finden Sie unter <a href="../Tutorial.htm#s7">AutoHotkey Anfänger-Tutorial</a> oder <a href="../Objects.htm">Objekte</a>.</p>

<p>Das folgende Beispiel zeigt die Verwendung eines einfachen Arrays:</p>
<pre><em>; Ein Array erstellen, das zunächst leer ist:</em>
Array := [] <em>; oder Array := Array()</em>

<em>; In das Array schreiben:</em>
Loop, Read, %A_WinDir%\system.ini <em>; Jede Dateizeile nacheinander abrufen.</em>
{
    Array.Push(A_LoopReadLine) <em>; Diese Zeile an das Array anfügen.</em>
}

<em>; Aus dem Array lesen:
; Loop % Array.MaxIndex()   ; Traditionellerer Ansatz.</em>
for index, element in Array <em>; Enumeration ist meistens empfohlen.</em>
{
    <em>; Mit "Loop" müssen die Indexe fortlaufende Nummern von 1 bis zur Anzahl
    ; der Elemente im Array sein (oder in der Schleife berechnet werden).
    ; MsgBox % "Elementnummer " . A_Index . " ist " . Array[A_Index]

    ; Mit "for" wird sowohl der Index (oder "Schlüssel") als auch dessen Wert
    ; bereitgestellt, wobei der Index ein *beliebiger* Wert sein kann.</em>
    MsgBox % "Elementnummer " . index . " ist " . element
}</pre>
<p>Dies zeigt nur einen kleinen Teil der <a href="../lib/Object.htm">Funktionalität</a> von <a href="../Objects.htm">Objekten</a>. Elemente können gesetzt, abgerufen, eingefügt, entfernt und enumeriert werden. Neben Zahlen können auch Zeichenketten und Objekte als Schlüssel verwendet werden. Objekte können als Werte in andere Objekte gespeichert und als Funktionsparameter oder Rückgabewerte übergeben werden. Außerdem können Objekte um neue Funktionalität <a href="../Objects.htm#Custom_Objects">erweitert</a> werden.</p>
<p>Obwohl Push() und Enumeratoren durchaus ihre Vorteile haben, finden es manche Benutzer einfacher, den traditionelleren Ansatz zu verwenden (die auskommentierten Zeilen sind die entsprechenden Counterparts, die die unten beschriebenen <a href="#pseudo">Pseudo-Arrays</a> verwenden):</p>
<pre>
  <em>; Jedes Array muss vorher initialisiert werden:</em>
  Array := []

<em>; Array%j% := A_LoopField</em>
  Array[j] := A_LoopField

<em>; Array%j%_%k% := A_LoopReadLine</em>
  Array[j, k] := A_LoopReadLine

  ArrayAnzahl := 0
  Loop, Read, %A_WinDir%\system.ini
  {
      ArrayAnzahl += 1
    <em>; Array%ArrayAnzahl% := A_LoopReadLine</em>
      Array[ArrayAnzahl] := A_LoopReadLine
  }

  Loop %ArrayAnzahl%
  {
    <em>; Element := Array%A_Index%</em>
      Element := Array[A_Index]
    <em>; MsgBox % "Elementnummer " . A_Index . " ist " . Array%A_Index%</em>
      MsgBox % "Elementnummer " . A_Index . " ist " . Array[A_Index]
  }
</pre>
<p><i>ArrayAnzahl</i> bleibt der Einfachheit halber eine Variable, kann aber mit <code>Array.Anzahl := <i>n</i></code> in das Array selbst gespeichert oder mit <code>Array.<a href="../lib/Object.htm#MinMaxIndex">MaxIndex</a>()</code> ersetzt werden. Wenn ein anderer Startindex als 1 gewünscht ist, kann auch <code>Array.<a href="../lib/Object.htm#MinMaxIndex">MinIndex</a>()</code> verwendet werden.</p>

<h2 id="pseudo">Pseudo-Arrays</h2>
  <p class="note"><strong>Hinweis:</strong> Verwenden Sie nach Möglichkeit immer das oben erwähnte objektbasierte Array. Es ist einem Pseudo-Array in fast jeder Hinsicht überlegen: Es ist platzsparend, flexibler, übersichtlicher und ähnelt vielen anderen Programmiersprachen.</p>
<p>Pseudo-Arrays sind meist konzeptuell: Jedes Array ist eigentlich nur eine Sammlung von durchnummerierten <a href="../Variables.htm">Variablen</a> oder <a href="../Functions.htm">Funktionen</a>, die als <em>Elemente</em> des Arrays wahrgenommen werden. In AutoHotkey sind diese Elemente in keiner Weise miteinander verbunden.</p>
<p>Neben Befehlen wie <a href="../lib/StringSplit.htm">StringSplit</a> und <a href="../lib/WinGet.htm#List">WinGet List</a>, die Arrays erstellen, können auch Befehle verwendet werden, die eine Ausgabevariable akzeptieren oder einen Wert in eine Variable speichern, um ein Array zu erstellen. Das einfachste Beispiel ist der <a href="../lib/SetExpression.htm">Zuweisungsoperator (:=)</a>, wie unten gezeigt:</p>
<pre>Array%j% := A_LoopField</pre>
<p>Es ist auch möglich, mehrdimensionale Arrays zu erstellen, indem ein beliebiges Trennzeichen zwischen den Indexen verwendet wird. Zum Beispiel:</p>
<pre>Array%j%_%k% := A_LoopReadLine</pre>
<p>Das folgende Beispiel zeigt, wie ein Array erstellt und darauf zugegriffen werden kann (in diesem Fall werden mehrere Namen aus einer Textdatei abgerufen):</p>
<pre><em><strong>; In das Array schreiben:</strong></em>
ArrayAnzahl := 0
Loop, Read, %A_WinDir%\system.ini   <em>; Jede Dateizeile nacheinander abrufen.</em>
{
    ArrayAnzahl += 1  <em>; Speichern, wie viele Elemente im Array sind.</em>
    Array%ArrayAnzahl% := A_LoopReadLine  <em>; Speichert diese Zeile in das nächste Array-Element.</em>
}

<em><strong>; Aus dem Array lesen:</strong></em>
Loop %ArrayAnzahl%
{
    <em>; Die folgende Zeile verwendet ":=", um ein Array-Element abzurufen:</em>
    Element := Array%A_Index%  <em>; <a href="../Variables.htm#Index">A_Index</a> ist eine interne Variable.</em>
    <em>; Alternativ kann auch das "% "-Präfix verwendet werden, um MsgBox oder andere Befehle <a href="../Variables.htm#Expressions">ausdrucksfähig</a> zu machen:</em>
    MsgBox % "Elementnummer" . A_Index . " ist " . Array%A_Index%
}</pre>
<p>Ein ähnliches Konzept wird mit <a href="../lib/NumPut.htm">NumPut()</a> und <a href="../lib/NumGet.htm">NumGet()</a> erreicht, mit denen mehrere Zahlen im Binärformat gespeichert bzw. abgerufen werden können. Dies ist besonders dann nützlich, wenn Performanz und/oder Speicherverbrauch von entscheidender Bedeutung sind.</p>

</body>
</html>
