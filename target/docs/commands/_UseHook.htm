<!DOCTYPE HTML>
<html lang="de">
<head>
<title>#UseHook - Syntax &amp; Verwendung | AutoHotkey</title>
<meta name="description" content="Die #UseHook-Direktive bewirkt, dass alle oder einige Tastatur-Hotkeys mit dem Hook implementiert werden." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga4.js" type="text/javascript"></script>
</head>
<body>

<h1>#UseHook</h1>

<p>Bewirkt, dass alle oder einige Tastatur-<a href="../Hotkeys.htm">Hotkeys</a> mit dem Hook implementiert werden.</p>

<pre class="Syntax"><span class="func">#UseHook</span> <span class="optional">OnOff</span></pre>
<h2 id="Parameters">Parameter</h2>
<dl>

  <dt>OnOff</dt>
  <dd>
    <p>Geben Sie eines der folgenden Wörter an (lässt man diesen Parameter weg, wird standardmäßig On verwendet):</p>
    <p><strong>On</strong>: Der <a href="_InstallKeybdHook.htm">Tastatur-Hook</a> wird genutzt, um alle Tastatur-Hotkeys zwischen hier und der nächsten Direktive <code>#UseHook OFF</code> (falls vorhanden) zu implementieren.</p>
    <p><strong>Off</strong>: Hotkeys werden mit der Standardmethode (RegisterHotkey() wenn möglich, ansonsten der Tastatur-Hook) implementiert.</p>
  </dd>

</dl>

<h2 id="Remarks">Bemerkungen</h2>
<p>Normalerweise wird die Windows-API-Funktion RegisterHotkey() wann immer möglich genutzt, um einen Tastatur-Hotkey zu implementieren. Allerdings ist die Reaktionsfähigkeit von Hotkeys unter Umständen besser, wenn stattdessen der <a href="_InstallKeybdHook.htm">Tastatur-Hook</a> verwendet wird.</p>
<p>Diese Direktive auf ON zu setzen ist das gleiche wie, als würde man in den Definitionen der Hotkeys, die davon betroffen sein sollen, das <a href="../Hotkeys.htm#prefixdollar">$-Präfix</a> nutzen.</p>
<p><code>#UseHook</code> sollte wie alle anderen Direktiven nicht positioniert werden -- Direktiven werden nur einmal beim Start des Skripts verarbeitet -- als wäre sie ein Befehl (beispielsweise ist es sinnlos, die Direktive in eine Subroutine zu setzen). Positionieren Sie diese Direktive stattdessen direkt vor dem ersten Hotkey-Label, der von ihr beeinflusst werden soll.</p>
<p>Standardmäßig können Hotkeys, die den <a href="_InstallKeybdHook.htm">Tastatur-Hook</a> nutzen, nicht durch den <a href="Send.htm">Send</a>-Befehl ausgelöst werden. Ebenso können Maus-Hotkeys nicht durch Befehle wie <a href="Click.htm">Click</a> ausgelöst werden, weil solche Hotkeys immer den <a href="_InstallMouseHook.htm">Maus-Hook</a> nutzen. Um das zu umgehen, können Sie <a href="Gosub.htm">Gosub</a> nutzen, um direkt zur Subroutine des Hotkeys zu springen. Zum Beispiel: <code>Gosub #LButton</code>.</p>
<p><span class="ver">[v1.1.06+]:</span> <a href="_InputLevel.htm">#InputLevel</a> und <a href="SendLevel.htm">SendLevel</a> ermöglichen zusätzliche Kontrolle darüber, welche Hotkeys und Hotstrings vom Send-Befehl ausgelöst werden können.</p>
<p>Wenn diese Direktive im Skript nicht angegeben ist, wird sie sich so verhalten, als wäre sie auf OFF gesetzt.</p>
<p>#UseHook kann wie alle anderen Direktiven nicht bedingt ausgeführt werden.</p>

<h2 id="Related">Siehe auch</h2>
<p><a href="_InstallKeybdHook.htm">#InstallKeybdHook</a>, <a href="_InstallMouseHook.htm">#InstallMouseHook</a>, <a href="ListHotkeys.htm">ListHotkeys</a>, <a href="_InputLevel.htm">#InputLevel</a></p>
<h2 id="Examples">Beispiele</h2>
<div class="ex" id="ExBasic">
<p><a class="ex_number" href="#ExBasic"></a> Bewirkt, dass die ersten beiden Hotkeys den Tastatur-Hook verwenden.</p>
<pre>#UseHook  <em>; Bewirkt, dass die nachfolgenden Hotkeys den Hook verwenden.</em>
#x::MsgBox, Dieser Hotkey wird mit dem Hook implementiert.
#y::MsgBox, Dieser Hotkey auch.
#UseHook Off
#z::MsgBox, Aber dieser nicht.</pre>
</div>

</body>
</html>
