<!DOCTYPE HTML>
<html lang="de">
<head>
<title>Process - Syntax &amp; Verwendung | AutoHotkey</title>
<meta name="description" content="Der Process-Befehl führt verschiedene Operationen an einem Prozess aus: überprüft, ob er vorhanden ist; ändert seine Priorität; schließt ihn; wartet, bis er geschlossen wurde." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga4.js" type="text/javascript"></script>
</head>
<body>

<h1>Process</h1>

<p>Führt verschiedene Operationen an einem Prozess aus: überprüft, ob er vorhanden ist; ändert seine Priorität; schließt ihn; wartet, bis er geschlossen wurde.</p>
<pre class="Syntax"><span class="func">Process</span>, <a href="#SubCommands">Unterbefehl</a> <span class="optional">, PIDOderName, Wert</span></pre>

<h2 id="Parameters">Parameter</h2>
<dl>
    <dt>Unterbefehl, Wert</dt>
    <dd>Diese Parameter sind voneinander abhängig und können wie <a href="#SubCommands">unten gezeigt</a> genutzt werden.</dd>

    <dt>PIDOderName</dt>
    <dd>
        <p>Dieser Parameter kann entweder eine Nummer (die PID) oder ein Prozessname sein, wie unten beschrieben. Er kann zudem leer gelassen werden, um die Priorität des Skripts selbst zu ändern.</p>
        <p><strong>PID:</strong> Die Prozess-ID in Form einer Nummer zur eindeutigen Identifizierung eines Prozesses (diese Nummer ist nur gültig, solange es diesen Prozess gibt). Mit dem <a href="Run.htm">Run</a>-Befehl kann die PID eines neu gestarteten Prozesses ermittelt werden. Im Vergleich dazu kann mit <a href="WinGet.htm">WinGet</a> die PID eines Fensters ermittelt werden. Der Process-Befehl selbst kann auch zum Abrufen eine PID verwendet werden.</p>
        <p><strong>Name:</strong> Der Name eines Prozesses, den üblicherweise auch seine ausführbare Datei hat (ohne Pfad), z. B. notepad.exe oder winword.exe. Da ein Name mit mehreren laufenden Prozessen übereinstimmen kann, wird nur der erste Prozess einbezogen. Der Name ist nicht Groß-/Kleinschreibung-sensitiv.</p>
    </dd>
</dl>

<h2 id="SubCommands">Unterbefehle</h2>
<p>Geben Sie für <em>Unterbefehl</em> Folgendes an:</p>
<ul>
    <li><a href="#Exist">Exist</a>: Überprüft, ob ein bestimmter Prozess vorhanden ist.</li>
    <li><a href="#Close">Close</a>: Erzwingt das Schließen des ersten gefundenen Prozesses.</li>
    <li><a href="#List">List</a>: Noch nicht implementiert.</li>
    <li><a href="#Priority">Priority</a>: Ändert die Prioritätsstufe des ersten gefundenen Prozesses.</li>
    <li><a href="#Wait">Wait</a>: Wartet, bis ein bestimmter Prozess existiert.</li>
    <li><a href="#WaitClose">WaitClose</a>: Wartet, bis alle gefundenen Prozesse geschlossen sind.</li>
</ul>

<h3 id="Exist">Exist</h3>
<p>Überprüft, ob ein bestimmter Prozess vorhanden ist.</p>
<pre class="Syntax"><span class="func">Process</span>, Exist <span class="optional">, PIDOderName</span></pre>
<p>Setzt <a href="../misc/ErrorLevel.htm">ErrorLevel</a> auf die Prozess-ID (PID) des gefundenen Prozesses, oder ansonsten auf 0. Wenn der <em>PIDOderName</em>-Parameter leer ist, wird die PID des Skripts abgerufen. Eine alternative Methode zum Abrufen der Skript-PID ist <code>PID := DllCall("GetCurrentProcessId")</code>.</p>

<h3 id="Close">Close</h3>
<p>Erzwingt das Schließen des ersten gefundenen Prozesses.</p>
<pre class="Syntax"><span class="func">Process</span>, Close <span class="optional">, PIDOderName</span></pre>
<p>Nachdem ein gefundener Prozess erfolgreich terminiert wurde, wird <a href="../misc/ErrorLevel.htm">ErrorLevel</a> auf seine ehemalige Prozess-ID (PID) gesetzt. Ansonsten wird ErrorLevel auf 0 gesetzt (also wenn ein Prozess nicht gefunden wurde oder nicht terminiert werden konnte). Da der Prozess abrupt terminiert wird - mit der Chance, dass seine Ausführung an einem kritischen Punkt unterbrochen wird oder dass ungespeicherte Daten innerhalb seiner Fenster (sofern er welche hat) verloren gehen - sollte diese Methode nur verwendet werden, wenn ein Prozess durch Anwenden von <a href="WinClose.htm">WinClose</a> an eines seiner Fenster nicht geschlossen werden kann.</p>

<h3 id="List">List</h3>
<p>Obwohl dieser Unterbefehl noch nicht unterstützt wird, zeigt <a href="#ListEx">Beispiel #4</a>, wie eine Liste von Prozessen via <a href="DllCall.htm">DllCall()</a> abgerufen werden kann.</p>

<h3 id="Priority">Priority</h3>
<p>Ändert die Prioritätsstufe des ersten gefundenen Prozesses.</p>
<pre class="Syntax"><span class="func">Process</span>, Priority, PIDOderName, Stufe</pre>
<p>Ändert die Priorität (wie im Windows-Task-Manager angezeigt) des ersten gefundenen Prozesses auf <em>Stufe</em> und setzt <a href="../misc/ErrorLevel.htm">ErrorLevel</a> auf seine Prozess-ID (PID). Wenn der <em>PIDOderName</em>-Parameter leer ist, wird die Priorität des Skripts geändert. Wenn ein Prozess nicht gefunden wurde oder gab es Probleme beim Ändern seiner Priorität, wird ErrorLevel auf 0 gesetzt.</p>
<p><em>Stufe</em> sollte einer der folgenden Buchstaben oder Wörter sein: L (oder Low), B (oder BelowNormal), N (oder Normal), A (oder AboveNormal), H (oder High), R (oder Realtime). Hinweis: Jeder Prozess, der nicht darauf abgestimmt ist, in Echtzeit (Realtime) zu laufen, könnte die Systemstabilität reduzieren, wenn er auf diese Priorität gesetzt wird.</p>

<h3 id="Wait">Wait</h3>
<p>Wartet, bis ein bestimmter Prozess existiert.</p>
<pre class="Syntax"><span class="func">Process</span>, Wait, PIDOderName <span class="optional">, Zeitlimit</span></pre>
<p>Geben Sie für <em>Zeitlimit</em> die maximale Wartezeit in Sekunden an (kann ein Dezimalpunkt enthalten). Lässt man <em>Zeitlimit</em> weg, wird der Unterbefehl unendlich lang warten. Wenn ein Prozess gefunden wurde, wird <a href="../misc/ErrorLevel.htm">ErrorLevel</a> auf seine Prozess-ID (PID) gesetzt. Hat der Unterbefehl das Zeitlimit überschritten, wird ErrorLevel auf 0 gesetzt.</p>

<h3 id="WaitClose">WaitClose</h3>
<p>Wartet, bis <strong>alle</strong> gefundenen Prozesse geschlossen sind.</p>
<pre class="Syntax"><span class="func">Process</span>, WaitClose, PIDOderName <span class="optional">, Zeitlimit</span></pre>
<p>Geben Sie für <em>Zeitlimit</em> die maximale Wartezeit in Sekunden an (kann ein Dezimalpunkt enthalten). Lässt man <em>Zeitlimit</em> weg, wird der Unterbefehl unendlich lang warten. Wenn alle gefundenen Prozesse geschlossen sind, wird <a href="../misc/ErrorLevel.htm">ErrorLevel</a> auf 0 gesetzt. Hat der Unterbefehl das Zeitlimit überschritten, wird ErrorLevel auf die Prozess-ID (PID) des ersten noch vorhandenen gefundenen Prozesses gesetzt.</p>

<h2 id="ErrorLevel">ErrorLevel</h2>
<p><a href="../misc/ErrorLevel.htm">ErrorLevel</a> wird auf 0 gesetzt, wenn ein Unterbefehl scheitert oder das Zeitlimit überschreitet. Ansonsten wird es auf eine Prozess-ID (PID) gesetzt. Schauen Sie sich die Unterbefehle oben an, um mehr zu erfahren.</p>

<h2 id="Remarks">Bemerkungen</h2>
<p>Für die Unterbefehle <a href="#Wait">Wait</a> und <a href="#WaitClose">WaitClose</a>: Prozesse werden alle 100 Millisekunden überprüft; sobald die Bedingung erfüllt wurde, hört der Unterbefehl auf zu warten. Das heißt, dass der Unterbefehl nicht bis zum Ablaufen des Zeitlimits wartet, sondern dass er <a href="../misc/ErrorLevel.htm">ErrorLevel</a> sofort auf einen der oben genannten Werte setzt und dann die Ausführung des Skripts fortsetzt. Während der Unterbefehl im Wartezustand ist, können neue <a href="../misc/Threads.htm">Threads</a> via <a href="../Hotkeys.htm">Hotkeys</a>, <a href="Menu.htm">benutzerdefinierte Menüpunkte</a> oder <a href="SetTimer.htm">Timer</a> gestartet werden.</p>

<h2 id="Related">Siehe auch</h2>
<p><a href="Run.htm">Run</a>, <a href="WinGet.htm">WinGet</a>, <a href="WinClose.htm">WinClose</a>, <a href="WinKill.htm">WinKill</a>, <a href="WinWait.htm">WinWait</a>, <a href="WinWaitClose.htm">WinWaitClose</a>, <a href="WinExist.htm">WinExist()</a></p>

<h2 id="Examples">Beispiele</h2>

<div class="ex" id="ExBasic">
<p><a class="ex_number" href="#ExBasic"></a> Startet den Texteditor, setzt seine Priorität auf "Hoch" und meldet seine aktuelle PID.</p>
<pre>Run notepad.exe,,, NeuePID
Process, Priority, %NeuePID%, High
MsgBox Die PID des neu gestarteten Texteditors ist %NeuePID%.</pre>
</div>

<div class="ex" id="ExAdvanced">
<p><a class="ex_number" href="#ExAdvanced"></a> Wartet bis zu 5.5 Sekunden auf das Erscheinen des Texteditors. Wenn der Texteditor innerhalb dieses Zeitrahmens erscheint, wird seine Priorität auf "Niedrig" und die Priorität des Skripts auf "Hoch" gesetzt. Danach wird der Texteditor geschlossen und ein Mitteilungsfenster angezeigt, wenn der Texteditor nicht innerhalb von 5 Sekunden geschlossen wird.</p>
<pre>Process, Wait, notepad.exe, 5.5
NeuePID := ErrorLevel  <em>; Den Wert sofort speichern, da ErrorLevel ständig geändert wird.</em>
if not NeuePID
{
    MsgBox Der angegebene Prozess ist innerhalb der 5.5 Sekunden nicht erschienen.
    return
}
<em>; Ansonsten:</em>
MsgBox Es wurde passender Prozess gefunden (Prozess-ID ist %NeuePID%).
Process, Priority, %NeuePID%, Low
Process, Priority,, High  <em>; Lässt das Skript sich selbst auf hohe Priorität setzen.</em>
WinClose Unbenannt - Editor
Process, WaitClose, %NeuePID%, 5
if ErrorLevel <em>; Die PID ist noch vorhanden.</em>
    MsgBox Der Prozess wurde innerhalb von 5 Sekunden nicht geschlossen.</pre>
</div>

<div class="ex" id="ExHotkey">
<p><a class="ex_number" href="#ExHotkey"></a> Drücken Sie einen Hotkey, um die Priorität des Prozesses des aktiven Fensters zu ändern.</p>
<pre>#z:: <em>; WIN+Z-Hotkey</em>
WinGet, aktive_pid, PID, A
WinGetTitle, aktiver_titel, A
Gui, 5:Add, Text,, Drücken Sie ESCAPE zum Abbrechen, oder klicken Sie doppelt auf einen`nneuen Prioritätslevel für das folgende Fenster:`n%aktiver_titel%
Gui, 5:Add, ListBox, vMeineListBox gMeineListBox r5, Normal|High|Low|BelowNormal|AboveNormal
Gui, 5:Add, Button, default, OK
Gui, 5:Show,, Priorität setzen
return

5GuiEscape:
5GuiClose:
Gui, Destroy
return

MeineListBox:
if (A_GuiEvent != "DoubleClick")
    return
<em>; springe ansonsten zum nächsten Label:</em>
5ButtonOK:
GuiControlGet, MeineListBox
Gui, Destroy
Process, Priority, %aktive_pid%, %MeineListBox%
if ErrorLevel
    MsgBox Erfolg: Die Priorität wurde auf "%MeineListBox%" gesetzt.
else
    MsgBox Fehler: Die Priorität konnte nicht auf "%MeineListBox%" gesetzt werden.
return</pre>
</div>

<div class="ex" id="ListEx">
<p><a class="ex_number" href="#ListEx"></a> Ermittelt eine Liste von allen laufenden Prozessen via <a href="DllCall.htm">DllCall()</a> und zeigt sie dann in einem Mitteilungsfenster an.</p>
<pre>d := "  |  "  <em>; Zeichenkette-Trennzeichen</em>
s := 4096  <em>; Größe der Pufferspeicher und Arrays (4 KB)</em>

Process, Exist  <em>; Setzt ErrorLevel auf die PID des laufenden Skripts.</em>
<em>; Ermittelt das Handle des Skripts mit PROCESS_QUERY_INFORMATION (0x0400):</em>
h := DllCall("OpenProcess", "UInt", 0x0400, "Int", false, "UInt", ErrorLevel, "Ptr")
<em>; Öffnet einen anpassbaren Zugriffstoken mit diesem Prozess (TOKEN_ADJUST_PRIVILEGES = 32):</em>
DllCall("Advapi32.dll\OpenProcessToken", "Ptr", h, "UInt", 32, "PtrP", t)
VarSetCapacity(ti, 16, 0)  <em>; Struktur mit Berechtigungen</em>
NumPut(1, ti, 0, "UInt")  <em>; Setzt einen Eintrag in das Array mit Berechtigungen ...</em>
<em>; Ermittelt den lokalen eindeutigen Identifikator der Debug-Berechtigung:</em>
DllCall("Advapi32.dll\LookupPrivilegeValue", "Ptr", 0, "Str", "SeDebugPrivilege", "Int64P", luid)
NumPut(luid, ti, 4, "Int64")
NumPut(2, ti, 12, "UInt")  <em>; Aktiviert diese Berechtigung: SE_PRIVILEGE_ENABLED = 2</em>
<em>; Aktualisiert die Berechtigungen des Prozesses mit dem neuen Zugriffstoken:</em>
r := DllCall("Advapi32.dll\AdjustTokenPrivileges", "Ptr", t, "Int", false, "Ptr", &amp;ti, "UInt", 0, "Ptr", 0, "Ptr", 0)
DllCall("CloseHandle", "Ptr", t)  <em>; Schließt diesen Zugriffstoken-Handle, um Speicher freizugeben.</em>
DllCall("CloseHandle", "Ptr", h)  <em>; Schließt diesen Prozess-Handle, um Speicher freizugeben.</em>

hModule := DllCall("LoadLibrary", "Str", "Psapi.dll")  <em>; Erhöht die Leistung durch Vorausladen der Bibliothek.</em>
s := VarSetCapacity(a, s)  <em>; Ein Array, in der die Liste der Prozessidentifikatoren gespeichert wird:</em>
c := 0  <em>; Zähler für die Prozess-IDs</em>
DllCall("Psapi.dll\EnumProcesses", "Ptr", &amp;a, "UInt", s, "UIntP", r)
Loop, % r // 4  <em>; Parst das Array mit Identifikatoren als DWORDs (32 Bit):</em>
{
    id := NumGet(a, A_Index * 4, "UInt")
   <em>; Öffnet Prozess mit: PROCESS_VM_READ (0x0010) | PROCESS_QUERY_INFORMATION (0x0400)</em>
    h := DllCall("OpenProcess", "UInt", 0x0010 | 0x0400, "Int", false, "UInt", id, "Ptr")
    if !h
        continue
    VarSetCapacity(n, s, 0)  <em>; Ein Pufferspeicher für den Basisnamen des Moduls:</em>
    e := DllCall("Psapi.dll\GetModuleBaseName", "Ptr", h, "Ptr", 0, "Str", n, "UInt", A_IsUnicode ? s//2 : s)
    if !e    <em>; Fallback-Methode für 64-Bit-Prozesse, wenn sie im 32-Bit-Modus sind:</em>
        if e := DllCall("Psapi.dll\GetProcessImageFileName", "Ptr", h, "Str", n, "UInt", A_IsUnicode ? s//2 : s)
            SplitPath n, n
    DllCall("CloseHandle", "Ptr", h)  <em>; Schließt diesen Prozess-Handle, um Speicher freizugeben</em>
    if (n &amp;&amp; e)  <em>; Wenn Image nicht null ist, füge es zur Liste hinzu:</em>
        l .= n . d, c++
}
DllCall("FreeLibrary", "Ptr", hModule)  <em>; Entlädt die Bibliothek, um Speicher freizugeben.</em>
<em>;Sort, l, C  ; Heben Sie die Kommentierung in dieser Zeile auf, um die Liste alphabetisch zu sortieren.</em>
MsgBox, 0, %c% Prozesse, %l%</pre>
</div>

<div class="ex" id="ListCom">
<p><a class="ex_number" href="#ListCom"></a> Ermittelt eine Liste von allen laufenden Prozessen via COM. Bezüglich Win32_Process siehe <a href="https://learn.microsoft.com/windows/win32/cimwin32prov/win32-process">Microsoft Docs</a>.</p>
<pre>Gui, Add, ListView, x2 y0 w400 h500, Prozessname|Befehlszeile
for Prozess in ComObjGet("winmgmts:").ExecQuery("Select * from Win32_Process")
    LV_Add("", Prozess.Name, Prozess.CommandLine)
Gui, Show,, Prozessliste</pre>
</div>

</body>
</html>
