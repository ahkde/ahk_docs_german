<!DOCTYPE HTML>
<html lang="de">
<head>
<title>TreeView (GUI) - Syntax &amp; Verwendung | AutoHotkey</title>
<meta name="description" content="Eine TreeView (auf Deutsch: Baumansicht) wird in der Regel verwendet, um eine hierarchisch gegliederte Liste darzustellen, die aus mehreren ineinander geschachtelten Elementen besteht. Diese Seite enthält die Funktionen, um sie zu modifizieren." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>

<body>
<h1>TreeView <span class="ver">[v1.0.44+]</span></h1>

<h2 id="toc">Inhaltsverzeichnis</h2>
<ul>
  <li><a href="#Intro">Einführung und einfaches Beispiel</a></li>
  <li><a href="#Options">Optionen und Styles für den Optionen-Parameter</a></li>
  <li><a href="#BuiltIn">Interne TreeView-Funktionen</a></li>
  <li><a href="#notify">G-Label-Benachrichtigungen</a></li>
  <li><a href="#Remarks">Bemerkungen</a></li>
  <li><a href="#Examples">Beispiele</a></li>
</ul>

<h2 id="Intro">Einführung und einfaches Beispiel</h2>
<p>Eine TreeView (auf Deutsch: Baumansicht) wird in der Regel verwendet, um eine hierarchisch gegliederte Liste darzustellen, die aus mehreren ineinander geschachtelten Elementen besteht. Das wohl bekannteste Beispiel dafür ist der Navigationsbereich des Explorers, der Laufwerke und Ordner hierarchisch darstellt.</p>
<p>Eine typische TreeView sieht wie folgt aus:</p>
<img src="../static/ctrl_treeview.png" alt="TreeView" />
<p>Die Syntax zur Erstellung einer TreeView ist:</p>
<pre class="Syntax" id="GuiAdd"><span class="func">Gui</span>, Add, TreeView, Optionen</pre>
<p>Hier sehen Sie ein funktionierendes Skript, das eine einfache Hierarchie von Elementen erstellt und anzeigt:</p>
<pre>Gui, Add, TreeView
<span class="red">P1</span> := <a href="#TV_Add">TV_Add</a>("Erstes Elternelement")
P1C1 := TV_Add("Erstes Kindelement von Elternelement 1", <span class="red">P1</span>)  <em>; P1 als Elternelement für dieses Element festlegen.</em>
P2 := TV_Add("Zweites Elternelement")
P2C1 := TV_Add("Erstes Kindelement von Elternelement 2", P2)
P2C2 := TV_Add("Zweites Kindelement von Elternelement 2", P2)
P2C2C1 := TV_Add("Erstes Kindelement von Kindelement 2", P2C2)

Gui, Show  <em>; Das Fenster und dessen TreeView anzeigen.</em>
return

GuiClose:  <em>; Skript beenden, wenn der Benutzer die GUI der TreeView schließt.</em>
ExitApp</pre>

<h2 id="Options">Optionen und Styles für den Optionen-Parameter</h2>
<p id="AltSubmit"><strong>AltSubmit</strong>: Teilt dem Skript mehr TreeView-Ereignisse als normal mit. Das heißt, dass das g-Label öfters gestartet wird. Weitere Informationen finden Sie unter <a href="#notify">TreeView-Benachrichtigungen</a>.</p>
<p><strong>Background</strong>: Geben Sie das Wort Background an, unmittelbar gefolgt von einem Farbnamen (siehe <a href="Progress.htm#colors">Farbentabelle</a>) oder RGB-Wert (das 0x-Präfix ist optional). Beispiele: <code>BackgroundSilver</code>, <code>BackgroundFFDD99</code>. Wenn diese Option nicht vorhanden ist, verwendet TreeView als Hintergrundfarbe standardmäßig die im letzten Parameter von <a href="Gui.htm#Color">Gui Color</a> definierte Farbe (wenn keine definiert ist, dann die Standardhintergrundfarbe des Systems). Mit <code>BackgroundDefault</code> kann die Standardhintergrundfarbe des Systems gesetzt werden (in der Regel weiß). Zum Beispiel kann die Standardfarbe einer TreeView via <code>GuiControl, +BackgroundDefault, MeineTreeView</code> wiederhergestellt werden.</p>
<p><strong>Buttons</strong>: Geben Sie <code>-Buttons</code> (minus Buttons) an, um die Plus- oder Minuszeichen auf der linken Seite eines Elements, das Kindelemente hat, zu entfernen.</p>
<p><strong>C</strong>: Textfarbe. Geben Sie den Buchstaben C an, unmittelbar gefolgt von einem Farbnamen (siehe <a href="Progress.htm#colors">Farbentabelle</a>) oder RGB-Wert (das 0x-Präfix ist optional). Beispiele: <code>cRed</code>, <code>cFF2211</code>, <code>c0xFF2211</code>, <code>cDefault</code>.</p>
<p id="Checked"><strong>Checked</strong>: Zeigt auf der linken Seite jeden Elements eine CheckBox an. Fügt man ein Element via <a href="#TV_Add">TV_Add</a> hinzu, kann das Wort <em>Check</em> in den Optionen angegeben werden, um die CheckBox vorerst im abgehakten Zustand anzuzeigen. Der Benutzer kann die CheckBox anklicken oder die Leertaste drücken, um ein Häkchen zu setzen oder zu entfernen. Um herauszufinden, welche Elemente aktuell in der TreeView abgehakt sind, rufen Sie <a href="#TV_GetNext">TV_GetNext()</a> oder <a href="#TV_Get">TV_Get()</a> auf.</p>
<p><strong>HScroll</strong>: Geben Sie <code>-HScroll</code> (minus HScroll) an, um das horizontale Scrollen im Steuerelement zu deaktivieren (zusätzlich wird der horizontale Scrollbalken entfernt).</p>
<p id="ImageList"><strong>ImageList</strong>: Das Mittel, mit dem Symbole zu einer TreeView hinzugefügt werden. Geben Sie das Wort <em>ImageList</em> an, unmittelbar gefolgt von der ImageListID, die von einem vorherigen <a href="ListView.htm#IL_Create">IL_Create()</a>-Aufruf zurückgegeben wurde. Diese Option funktioniert nur, während eine TreeView erstellt wird (<a href="#TV_SetImageList">TV_SetImageList()</a> hingegen unterliegt nicht dieser Einschränkung). Hier ein funktionierendes Beispiel:</p>
<pre>ImageListID := <a href="ListView.htm#IL_Create">IL_Create</a>(10)  <em>; ImageList für vsl. 10 Symbole erstellen.</em>
Loop 10  <em>; ImageList mit einigen Standard-Systemsymbolen befüllen.</em>
    <a href="ListView.htm#IL_Add">IL_Add</a>(ImageListID, "shell32.dll", A_Index)
Gui, Add, TreeView, ImageList%ImageListID%
<a href="#TV_Add">TV_Add</a>("Elementname", 0, "Icon4")  <em>; Element zur TreeView hinzufügen und Ordnersymbol zuweisen.</em>
Gui Show</pre>
<p><strong>Lines</strong>: Geben Sie <code>-Lines</code> (minus Lines) an, um die Verbindungslinien zwischen den Eltern- und Kindelementen zu verstecken. Das Entfernen solcher Linien verhindert allerdings auch, dass die Plus-/Minuszeichen bei Top-Level-Elementen angezeigt werden.</p>
<p id="ReadOnly"><strong>ReadOnly</strong>: Geben Sie <code>-ReadOnly</code> (minus ReadOnly) an, um dem Benutzer zu erlauben, den Text/Namen eines Elements zu editieren. Um ein Element zu editieren, wählen Sie es aus und drücken Sie <kbd>F2</kbd> (weitere Informationen finden Sie unter <a href="#WantF2">WantF2</a>). Alternativ können Sie ein Element einmal anklicken, um es auszuwählen, mindestens eine halbe Sekunde warten und dann das gleiche Element erneut anklicken, um es zu editieren. Nach dem Editieren kann ein Element unter seinen Geschwisterelementen alphabetisch neu positioniert werden; zum Beispiel:</p>
<pre>Gui, Add, TreeView, -ReadOnly gMeinTree  <em>; Für gMeinTree siehe <a href="#notify">TreeView-g-Label</a>.</em>
<em>; ...</em>
MeinTree:
if (A_GuiEvent == "e")  <em>; Der Benutzer hat aufgehört, ein Element zu editieren (== ermöglicht einen Groß-/Kleinschreibung-sensitiven Vergleich).</em>
    TV_Modify(TV_GetParent(A_EventInfo), "Sort")  <em>; Funktioniert auch, wenn das Element kein Elternelement hat.</em>
return</pre>
<p><strong>R</strong>: Höhe in Zeilen (beim Erstellen). Geben Sie den Buchstaben R an, unmittelbar gefolgt von der Anzahl der Zeilen, für die innerhalb des Steuerelements Platz geschaffen werden soll. <code>R10</code> beispielsweise macht das Steuerelement 10 Elemente hoch.</p>
<p id="WantF2"><strong>WantF2</strong>: Geben Sie <code>-WantF2</code> (minus WantF2) an, um den Benutzer daran zu hindern, mithilfe von <kbd>F2</kbd> das aktuell ausgewählte Element zu <a href="#ReadOnly">editieren</a>. Diese Einstellung wird ignoriert, wenn <a href="#ReadOnly">-ReadOnly</a> ebenfalls wirksam ist. Unabhängig von dieser Einstellung erhält das g-Label weiterhin <kbd>F2</kbd>-<a href="#NotifyK">Benachrichtigungen</a>.</p>
<p><strong>(Namenlose numerische Styles)</strong>: Andere Styles als die oben genannten werden selten verwendet und haben dementsprechend keine Namen. Eine vollständige Liste finden Sie unter <a href="../misc/Styles.htm#TreeView">TreeView-Styles</a>.</p>

<h2 id="BuiltIn">Interne TreeView-Funktionen</h2>
<p>Alle TreeView-Funktionen agieren mit dem <a href="Gui.htm#DefaultWin">Standard-GUI-Fenster</a> des aktuellen Threads (das mit <code><a href="Gui.htm#Default">Gui, 2:Default</a></code> geändert werden kann). Wenn das Standardfenster weder vorhanden ist noch TreeView-Steuerelemente hat, geben alle Funktionen Null zurück, um das Problem zu kennzeichnen.</p>
<p id="GuiTV">Wenn das Fenster mehrere TreeView-Steuerelemente aufweist, agieren die Funktionen standardmäßig mit dem zuletzt hinzugefügten Steuerelement. Um das zu ändern, verwenden Sie <code>Gui, TreeView, TreeViewName</code> - hierbei ist <em>TreeViewName</em> entweder der Name der <a href="Gui.htm#var">zugeordneten Variable</a>, die ClassNN-Bezeichnung (wie vom internen Tool Window Spy gezeigt) oder <span class="ver">[in v1.1.04+]</span> die HWND-Nummer (eindeutige ID) der TreeView. Einmal geändert, werden alle vorhandenen und zukünftigen <a href="../misc/Threads.htm">Threads</a> die angegebene TreeView verwenden. <span class="ver">[v1.1.23+]:</span> <a href="../Variables.htm#DefaultTreeView">A_DefaultTreeView</a> enthält die aktuelle Einstellung.</p>

<p id="bifAddModifyDelete"><strong>Element-Funktionen:</strong></p>
<ul>
    <li><a href="#TV_Add">TV_Add</a>: Fügt ein neues Element zur TreeView hinzu.</li>
    <li><a href="#TV_Modify">TV_Modify</a>: Ändert die Attribute und/oder den Namen eines Elements.</li>
    <li><a href="#TV_Delete">TV_Delete</a>: Löscht ein bestimmtes Element oder alle Elemente.</li>
</ul>

<p id="bifGet"><strong>Abruffunktionen:</strong></p>
<ul>
    <li><a href="#TV_GetSelection">TV_GetSelection</a>: Gibt die ID-Nummer des ausgewählten Elements zurück.</li>
    <li><a href="#TV_GetCount">TV_GetCount</a>: Gibt die Anzahl aller Elemente im Steuerelement zurück.</li>
    <li><a href="#TV_GetParent">TV_GetParent</a>: Gibt das Elternelement eines bestimmten Elements als Element-ID zurück.</li>
    <li><a href="#TV_GetChild">TV_GetChild</a>: Gibt die ID-Nummer des ersten/obersten Kindelements eines bestimmten Elements zurück.</li>
    <li><a href="#TV_GetPrev">TV_GetPrev</a>: Gibt die ID-Nummer des Geschwisterelements zurück, das sich oberhalb eines bestimmten Elements befindet.</li>
    <li><a href="#TV_GetNext">TV_GetNext</a>: Gibt die ID-Nummer des nächsten Elements zurück, das sich unterhalb eines bestimmten Elements befindet.</li>
    <li><a href="#TV_GetText">TV_GetText</a>: Ruft den Text/Namen eines bestimmten Elements ab.</li>
    <li><a href="#TV_Get">TV_Get</a>: Gibt die ID-Nummer eines bestimmten Elements zurück, unter Beachtung des angegebenen Attributs.</li>
</ul>

<p id="bifIcon"><strong>Sonstige Funktionen:</strong></p>
<ul>
    <li><a href="#TV_SetImageList">TV_SetImageList</a> <span class="ver">[v1.1.02+]</span>: Setzt oder ersetzt eine ImageList zum Darstellen von Symbolen.</li>
</ul>

<h3 id="TV_Add">TV_Add</h3>
<p>Fügt ein neues Element zur TreeView hinzu und gibt seine eindeutige Element-ID-Nummer zurück (oder 0 bei Misserfolg).</p>
<pre class="Syntax"><span class="func">TV_Add</span>(Name, <span class="optional">ElternElementID, Optionen</span>)</pre>
<p><em>Name</em> ist der Anzeigetext des Elements, das textuell oder numerisch sein kann (einschließlich numerische Ergebnisse von <a href="../Variables.htm#Expressions">Ausdrücken</a>). <em>ElternElementID</em> ist die ID-Nummer des Elternelements des neuen Elements (wenn dieser Parameter weggelassen wird oder 0 ist, wird das Element als Top-Level-Element hinzugefügt). Um das Hinzufügen sehr vieler Elemente leistungsfähiger zu machen, verwenden Sie <code>GuiControl, -Redraw, MeineTreeView</code>, bevor Sie die Elemente hinzufügen, und danach <code>GuiControl, +Redraw, MeineTreeView</code>.</p>

<h4 id="Options_for_TV_Add_and_TV_Modify">Optionen für TV_Add() und TV_Modify()</h4>
<p>Der <em>Optionen</em>-Parameter ist eine Zeichenkette bestehend aus null oder mehr Wörtern von der unteren Liste (nicht Groß-/Kleinschreibung-sensitiv). Trennen Sie alle Wörter jeweils mit einem Leer- oder Tabulatorzeichen. Um eine Option zu entfernen, setzen Sie ein Minuszeichen davor. Um eine Option hinzuzufügen, lassen Sie das Vorzeichen weg oder setzen Sie ein Pluszeichen davor.</p>
<p id="Bold"><strong>Bold</strong>: Stellt den Namen des Elements in fetter Schrift dar. Um dessen Schrift später wieder zu normalisieren, verwenden Sie <code>TV_Modify(ElementID, "-Bold")</code>. <span class="ver">[v1.1.30.01+]:</span> Direkt nach dem Wort <em>Bold</em> kann optional eine 0 oder 1 erfolgen, um den Startzustand zu bestimmen.</p>
<p id="Check"><strong>Check</strong>: Zeigt ein Häkchen links neben dem Element an (sofern die TreeView über <a href="#Checked">CheckBoxen</a> verfügt). Um das Häkchen später wieder zu entfernen, verwenden Sie <code>TV_Modify(ElementID, "-Check")</code>. Direkt nach dem Wort <em>Check</em> kann optional eine 0 oder 1 erfolgen, um den Startzustand zu bestimmen. In diesem Fall ist <code>"Check"</code> das gleiche wie <code>"Check" <strong>.</strong> VarEnhältEins</code> (der hier verwendete Punkt ist ein <a href="../Variables.htm#concat">Verkettungsoperator</a>).</p>
<p id="Expand"><strong>Expand</strong>: Klappt das Element auf, um seine Kindelemente anzuzeigen (sofern vorhanden). Um das Element später wieder zuzuklappen, verwenden Sie <code>TV_Modify(ElementID, "-Expand")</code>. Wenn es keine Kindelemente hat, wird <a href="#TV_Modify">TV_Modify()</a> eine 0 anstelle der Element-ID zurückgeben. <a href="#TV_Add">TV_Add()</a> hingegen markiert das Element als aufgeklappt, falls später noch Kindelemente hinzugefügt werden. Im Gegensatz zu "Select" (siehe unten) wird beim Aufklappen eines Elements nicht automatisch sein Elternelement aufgeklappt. Direkt nach dem Wort <em>Expand</em> kann optional eine 0 oder 1 erfolgen, um den Startzustand zu bestimmen. In diesem Fall ist <code>"Expand"</code> das gleiche wie <code>"Expand" <strong>.</strong> VarEnhältEins</code>.</p>
<p><strong>First | Sort | N</strong>: Diese Optionen gelten nur für <a href="#TV_Add">TV_Add()</a>. Sie bestimmen die Position des neuen Elements relativ zu seinen Geschwisterelementen (ein <em>Geschwisterelement</em> befindet sich auf derselben Ebene). Wenn keine dieser Optionen vorhanden ist, wird das neue Element als letztes/unterstes Geschwisterelement hinzugefügt. Geben Sie ansonsten <em>First</em> an, um das Element als erstes/oberstes Geschwisterelement hinzuzufügen, oder <em>Sort</em>, um das Element unter seinen Geschwisterelementen in alphabetischer Reihenfolge einzufügen. Wenn eine Nummer (<strong>N</strong>) angegeben ist, wird sie als ID-Nummer des Geschwisterelements vermutet, nach der das neue Element eingefügt werden soll (wenn die Nummer die einzige vorhandene Option ist, muss sie nicht in Anführungszeichen gesetzt werden).</p>
<p><strong>Icon</strong>: Geben Sie das Wort <em>Icon</em> an, unmittelbar gefolgt von der Nummer eines Symbols, das auf der linken Seite des Elementnamens angezeigt werden soll. Fehlt diese Option, wird das erste Symbol in der <a href="#ImageList">ImageList</a> verwendet. Um ein leeres Symbol darzustellen, geben Sie eine Nummer größer als die Anzahl der Symbole in der ImageList an. Wenn dem Steuerelement keine ImageList zugewiesen wurde, wird weder ein Symbol angezeigt noch dafür Platz reserviert.</p>
<p id="Select"><strong>Select</strong>: Wählt das Element aus. Da jeweils nur ein einziges Element ausgewählt werden kann, wird das zuvor ausgewählte Element automatisch abgewählt. Darüber hinaus wird diese Option alle Elternelemente des neu ausgewählten Elements aufklappen, falls erforderlich. Um die aktuelle Auswahl festzustellen, verwenden Sie <a href="#TV_GetSelection">TV_GetSelection()</a>.</p>
<p><strong>Sort</strong>: In Verbindung mit <a href="#TV_Modify">TV_Modify()</a> wird diese Option die Kindelemente des angegebenen Elements in alphabetischer Reihenfolge sortieren. Um stattdessen alle Top-Level-Elemente zu sortieren, verwenden Sie <code>TV_Modify(0, "Sort")</code>. Wenn es keine Kindelemente hat, wird nicht die ID des geänderten Elements, sondern 0 zurückgegeben.</p>
<p><strong>Vis</strong>: Stellt sicher, dass das Element vollständig sichtbar ist, gegebenenfalls durch Scrollen der TreeView und/oder Aufklappen seines Elternelements.</p>
<p><strong>VisFirst</strong>: Das gleiche wie oben, außer dass die TreeView zusätzlich gescrollt wird, damit das Element ganz oben erscheint, wenn möglich. Diese Option ist in Verbindung mit <a href="#TV_Modify">TV_Modify()</a> in der Regel effektiver als mit <a href="#TV_Add">TV_Add()</a>.</p>

<h3 id="TV_Modify">TV_Modify</h3>
<p>Ändert die Attribute und/oder den Namen eines Elements.</p>
<pre class="Syntax"><span class="func">TV_Modify</span>(ElementID <span class="optional">, Optionen, NeuerName</span>)</pre>
<p>Diese Funktion gibt bei Erfolg die ID des Elements und bei Misserfolg (oder teilweisem Misserfolg) eine 0 zurück. Verwendet man nur den ersten Parameter, wird das angegebene Element <a href="#Select">ausgewählt</a>. Lässt man <em>NeuerName</em> weg, bleibt der aktuelle Name unverändert. Für <em>Optionen</em> können die Optionen aus der oberen Liste verwendet werden.</p>

<h3 id="TV_Delete">TV_Delete</h3>
<p>Löscht ein bestimmtes Element oder alle Elemente.</p>
<pre class="Syntax"><span class="func">TV_Delete</span>(<span class="optional">ElementID</span>)</pre>
<p>Lässt man <em>ElementID</em> weg, werden <strong>alle</strong> Elemente in der TreeView gelöscht. Ansonsten wird nur <em>ElementID</em> gelöscht. Diese Funktion gibt bei Erfolg eine 1 und bei Misserfolg eine 0 zurück.</p>

<h3 id="TV_GetSelection">TV_GetSelection</h3>
<p>Gibt die ID-Nummer des ausgewählten Elements zurück.</p>
<pre class="Syntax"><span class="func">TV_GetSelection</span>()</pre>

<h3 id="TV_GetCount">TV_GetCount</h3>
<p>Gibt die Anzahl aller Elemente im Steuerelement zurück.</p>
<pre class="Syntax"><span class="func">TV_GetCount</span>()</pre>
<p>Diese Funktion gibt diesen Wert ohne Verzögerung zurück, weil das Steuerelement diesen stets zwischenspeichert.</p>

<h3 id="TV_GetParent">TV_GetParent</h3>
<p>Gibt das Elternelement eines bestimmten Elements als Element-ID zurück.</p>
<pre class="Syntax"><span class="func">TV_GetParent</span>(ElementID)</pre>
<p>Top-Level-Elemente haben keine Elternelemente und geben daher 0 zurück.</p>

<h3 id="TV_GetChild">TV_GetChild</h3>
<p>Gibt die ID-Nummer des ersten/obersten Kindelements eines bestimmten Elements zurück (oder 0, wenn keines vorhanden ist).</p>
<pre class="Syntax"><span class="func">TV_GetChild</span>(ElternElementID)</pre>

<h3 id="TV_GetPrev">TV_GetPrev</h3>
<p>Gibt die ID-Nummer des Geschwisterelements zurück, das sich oberhalb eines bestimmten Elements befindet (oder 0, wenn keines vorhanden ist).</p>
<pre class="Syntax"><span class="func">TV_GetPrev</span>(ElementID)</pre>

<h3 id="TV_GetNext">TV_GetNext</h3>
<p>Gibt die ID-Nummer des nächsten Elements zurück, das sich unterhalb eines bestimmten Elements befindet (oder 0, wenn keines vorhanden ist).</p>
<pre class="Syntax"><span class="func">TV_GetNext</span>(<span class="optional">ElementID, ElementTyp</span>)</pre>
<p>Diese Funktion verfügt über folgende Modi:</p>
<ul>
  <li>Wenn alle Parameter weggelassen werden, gibt sie die ID-Nummer des ersten/obersten Elements in der TreeView zurück (oder 0, wenn keines vorhanden ist).</li>
  <li>Verwendet man nur <em>ElementID</em>, gibt sie die ID-Nummer des Geschwisterelements zurück, das sich unterhalb des angegebenen Elements befindet (oder 0, wenn keines vorhanden ist). Wenn <em>ElementID</em> eine 0 ist, gibt sie die ID-Nummer des ersten/obersten Elements in der TreeView zurück (oder 0, wenn keines vorhanden ist).</li>
  <li>Wenn <em>ElementTyp</em> "Full" oder "F" ist, wird das nächste Element abgerufen, egal wie seine Beziehung zu dem angegebenen Element ist. Dadurch kann das Skript auf einfache Weise die gesamte TreeView Element für Element durchgehen. Zum Beispiel:
    <pre>ElementID := 0  <em>; Die Suche beim ersten Element beginnen.</em>
Loop
{
    ElementID := TV_GetNext(ElementID, "Full")  <em>; Ersetzen Sie "Full" mit "Checked", um alle abgehakten Elemente zu finden.</em>
    if not ElementID  <em>; Keine weiteren Elemente verfügbar.</em>
        break
    TV_GetText(ElementText, ElementID)
    MsgBox Das nächste Element ist %ElementID% und enthält "%ElementText%".
}</pre>
  </li>
  <li>Wenn <em>ElementTyp</em> "Check", "Checked" oder "C" ist, erfolgt dasselbe wie oben, außer dass Elemente ohne Häkchen übersprungen werden. Dadurch können alle abgehakten Elemente in der TreeView einzeln abgerufen werden.</li>
</ul>

<h3 id="TV_GetText">TV_GetText</h3>
<p>Ruft den Text/Namen der angegebenen <em>ElementID</em> ab und speichert ihn in <em>AusgabeVar</em>.</p>
<pre class="Syntax"><span class="func">TV_GetText</span>(AusgabeVar, ElementID)</pre>
<p>Wenn der Text länger als 8191 ist, werden nur die ersten 8191 Zeichen abgerufen. Bei Erfolg gibt die Funktion die ID des Elements zurück. Bei Misserfolg gibt sie eine 0 zurück (und macht <em>AusgabeVar</em> zudem leer).</p>

<h3 id="TV_Get">TV_Get</h3>
<p>Gibt die ID-Nummer eines bestimmten Elements zurück, unter Beachtung des angegebenen Attributs.</p>
<pre class="Syntax"><span class="func">TV_Get</span>(ElementID, Attribut)</pre>
<p>Wenn das angegebene Element das angegebene Attribut aufweist, wird seine <em>ElementID</em> zurückgegeben. Ansonsten wird eine 0 zurückgegeben. Geben Sie für <em>Attribut</em> "E", "Expand" oder "Expanded" an, um zu ermitteln, ob das Element gerade <a href="#Expand">aufgeklappt</a> ist (oder anders gesagt, ob seine Kindelemente gerade sichtbar sind); geben Sie "C", "Check" oder "Checked" an, um zu ermitteln, ob das Element ein <a href="#Check">Häkchen</a> hat; oder geben Sie "B" oder "Bold" an, um zu ermitteln, ob das Element gerade in <a href="#Bold">fetter</a> Schrift dargestellt wird.</p>
<p class="note"><strong>Hinweis:</strong> Da eine IF-Anweisung jeden Wert ungleich 0 als "wahr" ansieht, sind die folgenden zwei Zeilen funktionsgemäß identisch: <code>if TV_Get(ElementID, "Checked") = ElementID</code> and <code>if TV_Get(ElementID, "Checked")</code>.</p>

<h3 id="TV_SetImageList">TV_SetImageList <span class="ver">[v1.1.02+]</span></h3>
<p>Setzt oder ersetzt eine <a href="#ImageList">ImageList</a> zum Darstellen von Symbolen.</p>
<pre class="Syntax"><span class="func">TV_SetImageList</span>(ImageListID <span class="optional">, SymbolTyp</span>)</pre>
<p><em>ImageListID</em> ist die Nummer, die von einem vorherigen <a href="ListView.htm#IL_Create">IL_Create()</a>-Aufruf zurückgegeben wurde. <em>SymbolTyp</em> wird normalerweise weggelassen, um standardmäßig 0 zu verwenden. Geben Sie ansonsten eine 2 für Zustandssymbole an (Zustandssymbole werden noch nicht direkt unterstützt, aber können via <a href="PostMessage.htm">SendMessage</a> verwendet werden). Bei Erfolg gibt TV_SetImageList() die <em>ImageListID</em> zurück, die vorher mit der TreeView verknüpft war (oder 0, wenn nicht). Jede nicht mehr verwendete ImageList sollte normalerweise mit <a href="ListView.htm#IL_Destroy">IL_Destroy(ImageListID)</a> zerstört werden.</p>

<h2 id="notify">G-Label-Benachrichtigungen (Primär)</h2>
<p>Ein <a href="Gui.htm#label">g-Label</a> wie z. B. <code><strong>g</strong>MeineSubroutine</code> kann in den Optionen des Steuerelements eingefügt werden. Dies führt dazu, dass jedes Mal das Label <em>MeineSubroutine</em> gestartet wird, wenn der Benutzer eine Aktion im Steuerelement durchführt. Diese Subroutine hat Zugriff auf die internen Variablen <a href="../Variables.htm#Gui">A_Gui</a> und <a href="../Variables.htm#GuiControl">A_GuiControl</a>, um zu ermitteln, welches Fenster und welche TreeView für das Ereignis verantwortlich war. Noch wichtiger ist, dass sie zudem auf <strong>A_GuiEvent</strong> zugreifen kann. Diese interne Variable enthält eine der folgenden Zeichenketten oder Buchstaben (aus Gründen der Kompatibilität mit zukünftigen Versionen sollte ein Skript nicht davon ausgehen, dass dies die einzigen möglichen Werte sind):</p>
<p><strong>DoubleClick</strong>: Der Benutzer hat ein Element doppelt angeklickt. Die Variable A_EventInfo enthält die ID des Elements.</p>
<p><strong>D</strong>: Der Benutzer hat den Versuch gestartet, ein Element via Drag-and-Drop zu verschieben (es gibt derzeit keine interne Unterstützung für das Verschieben von Elementen). Die Variable A_EventInfo enthält die ID des Elements.</p>
<p><strong>d</strong> (kleines D): Das gleiche wie oben, außer dass beim Drag-and-Drop die rechte statt linke Maustaste verwendet wurde.</p>
<p><strong>e</strong> (kleines E): Der Benutzer hat aufgehört, ein Element zu editieren (der Benutzer kann Elemente nur editieren, wenn <code>-<a href="#ReadOnly">ReadOnly</a></code> in den Optionen der TreeView vorhanden ist). Die Variable A_EventInfo enthält die ID des Elements.</p>
<p><strong>S</strong>: Ein neues Element wurde ausgewählt, entweder durch den Benutzer oder das Skript selbst. Die Variable A_EventInfo enthält die ID des neu ausgewählten Elements.</p>

<h2 id="G-Label_Notifications_Secondary">G-Label-Benachrichtigungen (Sekundär)</h2>
<p>Wenn die TreeView das Wort AltSubmit in ihren <a href="#Options">Optionen</a> verwendet, wird ihr g-Label öfters gestartet und <strong>A_GuiEvent</strong> folgende zusätzliche Werte enthalten:</p>
<p><strong>Normal</strong>: Der Benutzer hat ein Element mit der linken Maustaste angeklickt. Die Variable A_EventInfo enthält die ID des Elements.</p>
<p><strong>RightClick</strong>: Der Benutzer hat ein Element mit der rechten Maustaste angeklickt. Die Variable A_EventInfo enthält die ID des Elements. In den meisten Fällen ist es ratsam, kein Popup-Menü in Reaktion auf dieses Ereignis anzuzeigen. Verwenden Sie stattdessen das <a href="Gui.htm#GuiContextMenu">GuiContextMenu-Label</a>, da es auch die MENÜ-Taste erkennt. Zum Beispiel:</p>
<pre>GuiContextMenu:  <em>; Startet bei einem Rechtsklick oder MENÜ-Tastendruck.</em>
if (A_GuiControl != "MeineTreeView")  <em>; Diese Überprüfung ist optional. Das Menü wird nur bei einem Klick innerhalb der TreeView angezeigt.</em>
    return
<em>; Das Menü auf den Koordinaten A_GuiX und A_GuiY anzeigen. Diese Koordinaten
; sind auch dann korrekt, wenn der Benutzer die MENÜ-Taste drückt:</em>
Menu, MeinKontextmenü, Show, %A_GuiX%, %A_GuiY%
return</pre>
<p><strong>E</strong>: Der Benutzer hat begonnen, ein Element zu editieren (der Benutzer kann Elemente nur editieren, wenn <a href="#ReadOnly">-ReadOnly</a> in den Optionen der TreeView vorhanden ist). Die Variable A_EventInfo enthält die ID des Elements.</p>
<p><strong>F</strong>: Die TreeView hat den Tastaturfokus erhalten.</p>
<p><strong>f</strong> (kleines F): Die TreeView hat den Tastaturfokus verloren.</p>
<p id="NotifyK"><strong>K</strong>: Der Benutzer hat eine Taste gedrückt, während die TreeView den Fokus hat. A_EventInfo enthält den virtuellen Tastencode der Taste (eine Zahl zwischen 1 und 255). Wenn die Taste alphabetisch ist, kann sie bei den meisten Tastaturlayouts via <code><a href="Chr.htm">Chr</a>(A_EventInfo)</code> in das entsprechende Zeichen übersetzt werden. <kbd>F2</kbd> wird unabhängig von <a href="#WantF2">WantF2</a> erfasst. <kbd>Enter</kbd> hingegen wird nicht erfasst; um es dennoch zu erfassen, können Sie, wie <a href="#Enter">unten</a> beschrieben, eine Standardschaltfläche nutzen.</p>
<p><strong>+</strong> (Pluszeichen): Ein Element wurde aufgeklappt, um seine Kindelemente anzuzeigen. Die Variable A_EventInfo enthält die ID des Elements.</p>
<p><strong>-</strong> (Minuszeichen): Ein Element wurde zugeklappt, um seine Kindelemente zu verstecken. Die Variable A_EventInfo enthält die ID des Elements.</p>

<h2 id="Remarks">Bemerkungen</h2>
<p>Der Befehl <a href="Gui.htm#Submit">Gui Submit</a> funktioniert nicht mit einem TreeView-Steuerelement. Demzufolge kann das Skript die <a href="Gui.htm#var">zugeordnete Variable</a> der TreeView (falls vorhanden) zum Speichern anderer Daten verwenden, ohne befürchten zu müssen, dass diese jemals überschrieben werden.</p>
<p id="Enter">Um einen <kbd>Enter</kbd>-Tastendruck in einer fokussierten TreeView zu erfassen, verwenden Sie eine <a href="GuiControls.htm#DefaultButton">Standardschaltfläche</a> (die bei Bedarf versteckt werden kann). Zum Beispiel:</p>
<pre>Gui, Add, Button, Hidden Default, OK
...
ButtonOK:
GuiControlGet, FokussiertesStrlmnt, FocusV
if (FokussiertesStrlmnt != "MeineTreeView")
    return
MsgBox % "Sie haben ENTER gedrückt. Die ID des ausgewählten Elements ist " . TV_GetSelection()
return</pre>
<p>Neben der Möglichkeit, mit der Tastatur von Element zu Element zu navigieren, kann der Benutzer auch eine inkrementelle Suche durchführen, indem er die ersten paar Zeichen eines Elementnamens eingibt. Dies führt dazu, dass die Auswahl zum nächst passenden Element springt.</p>
<p>Obwohl ein beliebig langer Text in einem TreeView-Element gespeichert werden kann, werden nur die ersten 260 Zeichen angezeigt.</p>
<p>Auch wenn die TreeView theoretisch maximal 65536 Elemente enthalten kann, wird die Leistung beim Hinzufügen von Elementen schon lange vorher merklich abnehmen. Um diesen Leistungsverfall etwas abzuschwächen, können Sie den in <a href="#TV_Add">TV_Add()</a> beschriebenen Tipp bzgl. Redraw verwenden.</p>
<p id="ILremarks">Im Gegensatz zu den ImageLists einer <a href="ListView.htm">ListView</a> werden ImageLists einer TreeView nicht automatisch zerstört, wenn die TreeView zerstört wird. Demzufolge sollte ein Skript <a href="ListView.htm#IL_Destroy">IL_Destroy(ImageListID)</a> nach dem Zerstören eines TreeView-Fensters aufrufen, wenn die ImageList nicht länger benötigt wird. Dies ist jedoch nicht erforderlich, wenn das Skript schon bald beendet wird, da in diesem Fall alle ImageLists automatisch zerstört werden.</p>
<p>Ein Skript kann mehr als eine TreeView pro Fenster erstellen. Informationen darüber, wie man mit einer anderen als der Standard-TreeView agieren kann, finden Sie unter <a href="#BuiltIn">interne Funktionen</a>.</p>
<p>Um eine TreeView zum Beispiel größer/kleiner zu machen, zu verstecken, oder um die Schrift einer TreeView zu ändern, verwenden Sie <a href="GuiControl.htm">GuiControl</a>.</p>
<p>Tree View eXtension (TVX) erweitert TreeViews mit der Möglichkeit, Elemente zu verschieben, einzufügen und zu löschen. Siehe dazu <a href="https://www.autohotkey.com/forum/topic19021.html">www.autohotkey.com/forum/topic19021.html</a>.</p>

<h2 id="Related">Siehe auch</h2>
<p><a href="ListView.htm">ListView</a>, <a href="GuiControls.htm">Andere Steuerelemente</a>, <a href="Gui.htm">Gui</a>, <a href="Gui.htm#GuiContextMenu">GuiContextMenu</a>, <a href="GuiControl.htm">GuiControl</a>, <a href="GuiControlGet.htm">GuiControlGet</a>, <a href="../misc/Styles.htm#TreeView">TreeView-Styles</a></p>

<h2 id="Examples">Beispiele</h2>

<div class="ex" id="ExAdvanced">
<p><a class="ex_number" href="#ExAdvanced"></a> Das folgende Beispiel ist ein funktionierendes Skript, das umfangreicher als das Beispiel ganz oben ist. Es erstellt und zeigt eine TreeView mit allen Ordnern, die sich im Alle-Benutzer-Startmenü befinden. Wenn der Benutzer einen Ordner auswählt, wird dessen Inhalt in einer ListView auf der rechten Seite angezeigt (so ähnlich wie der Windows Explorer). Zusätzlich zeigt ein <a href="GuiControls.htm#StatusBar">StatusBar</a>-Steuerelement Informationen über den aktuell ausgewählten Ordner an.</p>
<pre><em>; Der folgende Ordner definiert den Root-Ordner der TreeView. Beachten Sie, dass das
; Laden lange dauern kann, wenn ein komplettes Laufwerk wie C:\ angegeben ist:</em>
TreeRoot := A_StartMenuCommon
TreeViewBreite := 280
ListViewBreite := A_ScreenWidth - TreeViewBreite - 30

<em>; Dem Benutzer erlauben, das Fenster zu maximieren oder dessen Größe anzupassen:</em>
Gui +Resize

<em>; Eine ImageList erstellen und mit einigen Standard-Systemsymbolen befüllen:</em>
ImageListID := <a href="ListView.htm#IL_Create">IL_Create</a>(5)
Loop 5 
    <a href="ListView.htm#IL_Add">IL_Add</a>(ImageListID, "shell32.dll", A_Index)
<em>; Eine <a href="#GuiAdd">TreeView</a> und ListView nebeneinandersetzen, ähnlich zum Windows Explorer:</em>
Gui, Add, TreeView, vMeineTreeView r20 w%TreeViewBreite% gMeineTreeView <a href="#ImageList">ImageList</a>%ImageListID%
Gui, Add, ListView, vMeineListView r20 w%ListViewBreite% x+10, Name|Änderungsdatum

<em>; Spaltenbreiten der ListView setzen (dies ist optional):</em>
Spalte2Breite := 70  <em>; Kürzen, um nur den YYYYMMDD-Teil anzuzeigen.</em>
LV_ModifyCol(1, ListViewBreite - Spalte2Breite - 30)  <em>; Platz machen für vertikalen Scrollbalken.</em>
LV_ModifyCol(2, Spalte2Breite)

<em>; <a href="GuiControls.htm#StatusBar">Statusleiste</a> erstellen, um Anzahl der Dateien und Gesamtgröße anzuzeigen:</em>
Gui, Add, StatusBar
<a href="GuiControls.htm#SB_SetParts">SB_SetParts</a>(60, 85)  <em>; Leiste in drei Segmente aufteilen (das dritte Segment füllt die restliche Breite aus).</em>

<em>; Ordner und ihre Unterordner zur TreeView hinzufügen. Status anzeigen, falls das Laden länger dauert:</em>
SplashTextOn, 200, 25, TreeView-StatusBar-Beispiel, Lade Baumstruktur...
UnterordnerInBaumEinfügen(TreeRoot)
SplashTextOff

<em>; Das Fenster anzeigen und in den Leerlauf gehen. Das Skript wird benachrichtigt, wenn der Benutzer eine gültige Aktion durchführt:</em>
Gui, Show,, %TreeRoot%  <em>; Root-Ordner in der Titelleiste anzeigen.</em>
return

UnterordnerInBaumEinfügen(Ordner, ElternElementID = 0)
{
    <em>; Diese Funktion fügt alle Unterordner eines Ordners zur TreeView hinzu.</em>
    <em>; Sie ruft sich selbst rekursiv auf, um Unterordner in beliebiger Tiefe zu erfassen.</em>
    Loop %Ordner%\*.*, 2  <em>; Alle Unterordner des Ordners abrufen.</em>
        UnterordnerInBaumEinfügen(A_LoopFileFullPath, <a href="#TV_Add">TV_Add</a>(A_LoopFileName, ElternElementID, "Icon4"))
}

MeineTreeView:  <em>; Diese Subroutine verarbeitet Benutzeraktionen (z. B. Klicken).</em>
if (A_GuiEvent != "S")  <em>; Ein anderes Ereignis als "Neues Baumelement auswählen".</em>
    return  <em>; Nichts tun.
; Ansonsten die ListView mit dem Inhalt des ausgewählten Ordners füllen.
; Zuerst den vollständigen Pfad des ausgewählten Ordners ermitteln:</em>
<a href="#TV_GetText">TV_GetText</a>(AusgewähltesElementText, A_EventInfo)
ElternID := A_EventInfo
Loop  <em>; Vollständigen Pfad des ausgewählten Ordners zusammensetzen.</em>
{
    ElternID := <a href="#TV_GetParent">TV_GetParent</a>(ElternID)
    if not ElternID  <em>; Keine weiteren Elternelemente.</em>
        break
    TV_GetText(ElternText, ElternID)
    AusgewähltesElementText := ElternText "\" AusgewähltesElementText
}
AusgewähltesElementPfad := TreeRoot "\" AusgewähltesElementText

<em>; Dateien in die ListView einfügen:</em>
LV_Delete()  <em>; Alle Zeilen löschen.</em>
GuiControl, -Redraw, MeineListView  <em>; Leistung verbessern durch Abschalten von Redraw beim Laden.</em>
DateienAnzahl := 0  <em>; Für die untere Schleife initialisieren.</em>
GesamtGröße := 0
Loop %AusgewähltesElementPfad%\*.*  <em>; Nur die Dateien in der ListView anzeigen.</em>
{
    LV_Add("", A_LoopFileName, A_LoopFileTimeModified)
    DateienAnzahl += 1
    GesamtGröße += A_LoopFileSize
}
GuiControl, +Redraw, MeineListView

<em>; Die drei Segmente der Statusleiste mit Infos über den aktuell ausgewählten Ordner aktualisieren:</em>
<a href="GuiControls.htm#SB_SetText">SB_SetText</a>(DateienAnzahl . " Dateien", 1)
SB_SetText(Round(GesamtGröße / 1024, 1) . " KB", 2)
SB_SetText(AusgewähltesElementPfad, 3)
return

GuiSize:  <em>; ListView und TreeView kleiner/größer machen, wenn Benutzer die Fenstergröße ändert.</em>
if (A_EventInfo = 1)  <em>; Das Fenster wurde minimiert. Keine Aktion notwendig.</em>
    return
<em>; Ansonsten wurde das Fenster kleiner/größer gemacht oder maximiert. Größe der Steuerelemente anpassen.</em>
GuiControl, Move, MeineTreeView, % "H" . (A_GuiHeight - 30)  <em>; -30 für StatusBar und Abstände.</em>
GuiControl, Move, MeineListView, % "H" . (A_GuiHeight - 30) . " W" . (A_GuiWidth - TreeViewBreite - 30)
return

GuiClose:  <em>; Skript beenden, wenn der Benutzer die GUI der TreeView schließt.</em>
ExitApp</pre>
</div>

</body>
</html>
