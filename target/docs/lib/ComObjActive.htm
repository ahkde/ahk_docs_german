<!DOCTYPE HTML>
<html lang="de">
<head>
<title>ComObjActive() - Syntax &amp; Verwendung | AutoHotkey</title>
<meta name="description" content="Die ComObjActive-Funktion ermittelt ein laufendes Objekt, das mit OLE registriert wurde." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga4.js" type="text/javascript"></script>
</head>
<body>

<h1>ComObjActive() <span class="ver">[AHK_L 53+]</span></h1>

<p>Ermittelt ein laufendes Objekt, das mit OLE registriert wurde.</p>
<pre class="Syntax">ComObject := <span class="func">ComObjActive</span>(CLSID)</pre>

<p id="param">Erstellt ein Objekt, das in typisierter Form als Parameter oder Rückgabewert übergeben werden kann.</p>
<pre class="Syntax">ParamObj := <span class="func">ComObject</span>(VarTyp, Wert <span class="optional">, Flags</span>)</pre>
<hr>
<p class="warning"><strong>Veraltet:</strong> Die unten gezeigten Verwendungen sind veraltet und werden in einer zukünftigen Version geändert oder nicht mehr zur Verfügung stehen.</p>
<p id="missing">Erstellt ein Objekt, das stellvertretend für den Standardwert eines optionalen Parameters verwendet werden kann, wenn eine Methode eines COM-Objekts aufgerufen wird. <span class="ver">[v1.1.12+]</span>: Diese Funktion ist veraltet. Schreiben Sie stattdessen zwei aufeinanderfolgende Kommas, wie z. B. in <code>Obj.Methode(1,,3)</code></p>
<pre class="Syntax">ParamObj := <span class="func">ComObjMissing</span>()</pre>

<p id="enwrap">Wrappt oder entwrappt einen rohen <a href="https://msdn.microsoft.com/de-DE/de/library/dd318520.aspx">IDispatch</a>-Pointer in ein brauchbares Objekt und ruft automatisch AddRef auf.</p>
<pre class="Syntax">
ComObject := <span class="func">ComObjEnwrap</span>(DispPtr)
DispPtr := <span class="func">ComObjUnwrap</span>(ComObject)
</pre>
<p>Um den Code zukunftssicherer zu machen, können Sie stattdessen Folgendes verwenden:</p>
<pre>ComObject := ComObject(9, DispPtr, 1), ObjAddRef(DispPtr)
DispPtr := <a href="ComObjValue.htm">ComObjValue</a>(ComObject), ObjAddRef(DispPtr)</pre>
<hr>

<h2 id="Parameters">Parameter</h2>
<dl>

  <dt>CLSID</dt>
  <dd><p>CLSID oder eine visuell lesbare ProgID des COM-Objekts.</p></dd>

  <dt>ComObject</dt>
  <dd><p>COM-Objekt, das mit der <a href="../Objects.htm#Usage_Objects">Objekt-Syntax</a> verwendbar ist.</p></dd>

  <dt>VarTyp</dt>
  <dd><p>Ein Integer, der den Typ des Wertes kennzeichnet. Eine Auflistung aller Typennummern finden Sie unter <a href="ComObjType.htm#vt">ComObjType()</a>.</p></dd>

  <dt>Wert</dt>
  <dd><p>Ein Wert, der gewrappt werden soll. Zurzeit werden nur Integer und Pointer-Werte unterstützt.</p></dd>

  <dt>Flags</dt>
  <dd><p>Flags haben Einfluss auf das Verhalten dieser Funktion und des Wrapper-Objekts (siehe unten).</p></dd>

  <dt>DispPtr</dt>
  <dd><p>Roher IDispatch-Pointer.</p></dd>

</dl>

<h2 id="Flags">Flags</h2>
<table class="info">
  <tr>
    <th class="center">Flag</th>
    <th>Auswirkung</th>
  </tr>
  <tr>
    <td class="center">0</td>
    <td>
      <p>Standardverhalten. <a href="https://msdn.microsoft.com/de-de/library/ms691379.aspx">AddRef()</a> wird für IUnknown- und IDispatch-Pointer automatisch aufgerufen, daher sollte der Aufrufer <a href="ObjAddRef.htm">ObjRelease()</a> verwenden, um ihre Kopie des Pointers gegebenenfalls freizugeben.</p>
      <p>Da das Standardverhalten in einer zukünftigen Version eventuell geändert wird, ist es ratsam, <em>Flags</em> immer auf <code>1</code> zu setzen, wenn ein Interface-Pointer gewrappt wird, und <a href="ObjAddRef.htm">ObjAddRef()</a> aufzurufen, falls nötig.</p>
    </td>
  </tr>
  <tr>
    <td class="center">1</td>
    <td>Ergreift Besitz von einem IUnknown-, IDispatch- oder SAFEARRAY-Pointer. AddRef wird nicht aufgerufen. Enthält das Wrapper-Objekt einen SAFEARRAY (außer VT_BYREF), wird beim Freigeben des Wrapper-Objekts <a href="https://msdn.microsoft.com/de-de/library/ms221702(v=vs.85).aspx">SafeArrayDestroy</a> automatisch aufgerufen.</td>
  </tr>
</table>

<h2 id="ByRef">ByRef <span class="ver">[v1.1.17+]</span></h2>
<p>Wenn der <a href="ComObjType.htm"><em>VarTyp</em></a> eines Wrapper-Objekts den VT_BYREF-Flag (0x4000) enthält, können leere eckige Klammern <code>[]</code> zum Lesen oder Schreiben des referenzierten Wertes genutzt werden.</p>
<p>Beim Erstellen einer Referenz muss <em>Wert</em> die Speicheradresse einer Variable oder eines Pufferspeichers mit genügend Kapazität sein, um einen Wert bestimmten Typs enthalten zu können. Das folgende Beispiel erstellt eine Variable, die von einer VBScript-Funktion beschrieben werden kann:</p>
<pre>VarSetCapacity(var, 24, 0)
vref := ComObject(0x400C, &amp;var)  <em>; 0x400C ist eine Kombination von VT_BYREF und VT_VARIANT.</em>

vref[] := "Eingabewert"
sc.Run("Beispiel", vref)  <em>; sc sollte wie im <a href="#ByRefEx">Beispiel unten</a> initialisiert werden.</em>
MsgBox % vref[]</pre>
<p>Beachten Sie, dass zwar jeder vorherige Wert freigegeben wird, wenn ein neuer Wert mittels <code>vref[]</code> oder der COM-Methode zugewiesen wird, aber der finale Wert nicht automatisch freigegeben wird. Für die Freigabe des Wertes muss man wissen, um welchen Typ es sich handelt. Da es sich in diesem Fall um VT_VARIANT handelt, kann es durch Aufrufen von <a href="https://docs.microsoft.com/de-de/windows/win32/api/oleauto/nf-oleauto-variantclear">VariantClear</a> mit <a href="DllCall.htm">DllCall</a> oder durch Verwendung einer einfacheren Methode freigegeben werden: weisen Sie einen Integer zu, z. B. <code>vref[] := 0</code>.</p>

<h2 id="Remarks">Allgemeine Bemerkungen</h2>
<p>In den aktuellen Versionen wird jeder Funktionsaufruf, der mit "ComObj" beginnt, aber keine der internen COM-Funktionen ist, tatsächlich ComObjActive aufrufen. Zum Beispiel sind <code>ComObjEnwrap(DispPtr)</code> und <code>ComObjActive(DispPtr)</code> beide äquivalent zu <code>ComObject(DispPtr)</code> (standardmäßig mit <em>VarTyp</em> 9). Allerdings wird dieses Verhalten in einer zukünftigen Version nicht mehr verfügbar sein, so dass es am besten ist, nur <code>ComObject()</code> und <code>ComObjActive()</code> zu verwenden, wie auf dieser Seite gezeigt.</p>
<p>Wenn ComObjActive ein aktives Objekt nicht abrufen kann, wird die Funktion je nach aktueller <a href="ComObjError.htm">ComObjError()</a>-Einstellung und <a href="ComObjError.htm#factors">anderen Faktoren</a> eventuell eine Ausnahme auslösen, das Skript beenden oder eine leere Zeichenkette zurückgeben.</p>
<p>Wenn diese Funktion genutzt wird, um einen IDispatch- oder IUnknown-Interface-Pointer zu wrappen oder abzurufen, wird standardmäßig die Referenzanzahl des COM-Objekts um 1 erhöht. Daher muss der Interface-Pointer, wenn er nicht länger benötigt wird, <a href="ObjAddRef.htm">manuell freigegeben werden</a>. Wenn das Wrapper-Objekt frei wird, wird die darin enthaltene Referenz automatisch freigegeben.</p>
<p><b>Bekannte Einschränkung:</b> Jedes Mal, wenn ein COM-Objekt gewrappt wird, wird ein neues Wrapper-Objekt erstellt. Bei Vergleichen und Zuweisungen wie <code>if (obj1 == obj2)</code> und <code>array[obj1] := Wert</code> werden beide Wrapper-Objekte nicht als identisch angesehen, obwohl sie das gleiche COM-Objekt enthalten.</p>

<h2 id="Related">Siehe auch</h2>
<p><a href="ComObjCreate.htm">ComObjCreate()</a>, <a href="ComObjGet.htm">ComObjGet()</a>, <a href="ComObjConnect.htm">ComObjConnect()</a>, <a href="ComObjError.htm">ComObjError()</a>, <a href="ComObjFlags.htm">ComObjFlags()</a>, <a href="ObjAddRef.htm">ObjAddRef() / ObjRelease()</a>, <a href="ComObjQuery.htm">ComObjQuery()</a>, <a href="https://msdn.microsoft.com/de-de/library/ms221467.aspx">GetActiveObject (MSDN)</a></p>

<h2 id="Examples">Beispiele</h2>
<p>ComObjUnwrap: Siehe <a href="ComObjConnect.htm#Examples">ComObjConnect()</a>.</p>
<div class="ex" id="ByRefEx">
<p><a class="ex_number" href="#ByRefEx"></a> Übergibt VARIANT-ByRef an eine COM-Funktion.</p>
<pre>
<em>; Einleitung - ScriptControl benötigt eine 32-Bit-Version von AutoHotkey.</em>
code =
(
Sub Beispiel(Var)
    MsgBox Var
    Var = "Ausgabewert!"
End Sub
)
sc := <a href="ComObjCreate.htm">ComObjCreate</a>("ScriptControl"), sc.Language := "VBScript", sc.AddCode(code)


<em>; Beispiel: VARIANT-ByRef an eine COM-Funktion übergeben.</em>
var := ComVar()
var[] := "Eingabewert"  <em>; Mit [] einen Wert zuweisen.</em>
sc.Run("Beispiel", var.ref)  <em>; VT_BYREF ComObject übergeben (.ref).</em>
MsgBox % var[]  <em>; Mit [] einen Wert abrufen.</em>

<em>; Das Gleiche noch einmal, aber direkter:</em>
VarSetCapacity(variant_buf, 24, 0)  <em>; Einen Puffer anlegen, der groß genug für ein VARIANT ist.</em>
var := ComObject(0x400C, &amp;variant_buf)  <em>; Referenz auf ein VARIANT machen.</em>
var[] := "Eingabewert"
sc.Run("Beispiel", var)  <em>; VT_BYREF ComObject selbst übergeben, kein [] oder .ref.</em>
MsgBox % var[]
<em>; Wenn ein VARIANT eine Zeichenkette oder ein Objekt enthält, muss es explizit freigegeben
; werden, indem VariantClear aufgerufen oder ein rein numerischer Wert zugewiesen wird:</em>
var[] := 0


<em>; ComVar: Erstellt ein Objekt, mit dem ein Wert via ByRef übergeben werden kann.
;   ComVar[] bekommt den Wert.
;   ComVar[] := Val setzt den Wert.
;   ComVar.ref bekommt ein ByRef-Objekt, das eine COM-Funktion nutzen kann.</em>
ComVar(Type := 0xC)
{
    static base := { __Get: Func("ComVarGet"), __Set: Func("ComVarSet")
        , __Delete: Func("ComVarDel") } <em>; Näheres zu base finden Sie unter Benutzerdefinierte Objekte.
    
    ; Neues Objekt basierend auf base erstellen.</em>
    cv := {base: base}
    
    <em>; Speicher für ein VARIANT reservieren, damit unser Wert reinpasst. VARIANT wird auch dann
    ; verwendet, wenn Type != VT_VARIANT, damit VariantClear von __delete verwendet werden kann.</em>
    cv.SetCapacity("buf", 24), ptr := cv.GetAddress("buf")
    NumPut(0, NumPut(0, ptr+0, "int64"), "int64")
    
    if (Type != 0xC) { <em>; Kein VT_VARIANT.</em>
        NumPut(Type, ptr+0, "ushort") <em>; Variantentyp für __delete setzen.</em>
        ptr += 8 <em>; Auf den tatsächlichen Wert verweisen.</em>
    }
    
    <em>; Ein Objekt erstellen, mit dem die Variable via ByRef übergeben werden kann.</em>
    cv.ref := ComObject(0x4000|Type, ptr)
    
    return cv
}

ComVarGet(cv, p*) { <em>; Wird aufgerufen, wenn das Skript auf ein unbekanntes Feld zugreift.</em>
    if p.MaxIndex() = "" <em>; Keine Namen/Parameter, also cv[]</em>
        return cv.ref[]
}

ComVarSet(cv, v, p*) { <em>; Wird aufgerufen, wenn das Skript ein unbekanntes Feld setzt.</em>
    if p.MaxIndex() = "" <em>; Keine Namen/Parameter, also cv[]:=v</em>
        return cv.ref[] := v
}

ComVarDel(cv) { <em>; Wird aufgerufen, wenn das Objekt freigegeben wird.
    ; Je nach Typ kann dies erforderlich sein, um den Wert freizugeben, sofern gesetzt.</em>
    DllCall("oleaut32\VariantClear", "ptr", cv.GetAddress("buf"))
}
</pre>
</div>

</body>
</html>
