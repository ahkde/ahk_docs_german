<!DOCTYPE HTML>
<html lang="de">
<head>
<title>Loop (Dateiinhalt lesen) - Syntax &amp; Verwendung | AutoHotkey</title>
<meta name="description" content="Die Loop-Read-Anweisung ruft die Zeilen einer Textdatei einzeln ab." />
<meta name="ahk:equiv-v2" content="lib/LoopRead.htm" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga4.js" type="text/javascript"></script>
</head>
<body>

<h1>Loop (Dateiinhalt lesen)</h1>

<p>Ruft die Zeilen einer Textdatei einzeln ab (leistungsfähiger als <a href="FileReadLine.htm">FileReadLine</a>).</p>

<pre class="Syntax"><span class="func">Loop, Read</span>, EingabeDatei <span class="optional">, AusgabeDatei</span></pre>
<h2 id="Parameters">Parameter</h2>
<dl>

  <dt>Read</dt>
  <dd><p>Dieser Parameter muss das Wort READ sein.</p></dd>

  <dt>EingabeDatei</dt>
  <dd><p>Name der Textdatei, die von der Schleife gelesen werden soll. Wenn kein absoluter Pfad angegeben ist, wird die Datei im <a href="../Variables.htm#WorkingDir">A_WorkingDir</a>-Verzeichnis vermutet. Windows- und Unix-Formate werden unterstützt; das heißt, dass die Zeilen einer Datei entweder mit einem CR-LF-Paar (`r`n) oder LF-Zeichen (`n) enden können.</p></dd>

  <dt>AusgabeDatei</dt>
  <dd><p>(Optional) Name der Datei, die während des Schleifenvorgangs offen bleibt. Wenn kein absoluter Pfad angegeben ist, wird die Datei im <a href="../Variables.htm#WorkingDir">A_WorkingDir</a>-Verzeichnis vermutet.</p>
      <p>Innerhalb der Schleife braucht der <a href="FileAppend.htm">FileAppend</a>-Befehl nur einen Parameter, um den zu schreibenden Text an die spezielle Datei anzufügen. Diese Art von Anfügen ist leistungsfähiger als <a href="FileAppend.htm">FileAppend</a> im 2-Parameter-Modus, weil es verhindert, dass die Datei bei jeder Operation geschlossen und neu geöffnet wird. Achten Sie darauf, ein LF-Zeichen (`n) nach dem Text einzufügen, falls notwendig.</p>
      <p>Die Datei wird nie geöffnet, wenn nichts zu schreiben ist. Zum Beispiel wenn die Schleife nie durchlaufen wird oder nie den <a href="FileAppend.htm">FileAppend</a>-Befehl verwendet.</p>
          <p><strong>End-of-Line-Übersetzung (EOL)</strong>: Um die EOL-Konvertierung zu deaktivieren, setzen Sie ein Sternchen vor dem Dateinamen. Dieser Modus schreibt jedes Zeilenumbruchszeichen (`n) als einzelnes LF-Zeichen (LF) statt wie üblich als CR+LF. Zum Beispiel: <code><strong>*</strong>C:\Meine Unix-Datei.txt</code>. Selbst wenn das Sternchen nicht angegeben ist - die EOL-Übersetzung wird automatisch deaktiviert, wenn das <u>erste</u> in der Schleife vorkommende <a href="FileAppend.htm">FileAppend</a> ein CR-LF-Paar (`r`n) schreibt.</p>
      <p><strong>Standardausgabe (stdout)</strong>: Ein Sternchen (*) im Parameter <em>AusgabeDatei</em> bewirkt, dass ein von <a href="FileAppend.htm">FileAppend</a> geschriebener Text zur Standardausgabe (stdout) gesendet wird. Diese Art von Text kann auf eine Datei umgeleitet, an eine EXE-Datei weitergeleitet oder von <a href="_ErrorStdOut.htm">originellen Texteditoren</a> abgefangen werden. Allerdings wird ein zur Standardausgabe gesendeter Text nicht in der Eingabeaufforderung angezeigt, von wo aus die Zeile gestartet wurde. Dies kann umgangen werden, indem 1) <span class="ver">[v1.1.33+]</span> das Skript mit der <a href="../misc/Ahk2ExeDirectives.htm#ConsoleApp">Ahk2Exe-ConsoleApp-Direktive</a> kompiliert, oder 2) die Ausgabe des Skripts via Piping an einen anderen Befehl oder an ein anderes Programm weitergeleitet wird. Siehe <a href="FileAppend.htm">FileAppend</a> für mehr Details.</p>
      <p><strong>Escapezeichenversehene Kommas</strong>: Im Gegensatz zum letzten Parameter der meisten anderen Befehle müssen Kommas in <em>AusgabeDatei</em> mit einem Escapezeichen versehen werden (`,).</p></dd>

</dl>

<h2 id="Remarks">Bemerkungen</h2>
<p>Eine dateilesende Schleife ist nützlich, wenn Sie alle Zeilen in einer Textdatei einzeln abarbeiten wollen. Diese Schleife ist leistungsfähiger als <a href="FileReadLine.htm">FileReadLine</a>, weil: 1) die Datei bei der Operation die ganze Zeit offen bleiben kann; und 2) die Datei nicht jedes Mal neu eingelesen werden muss, um die gewünschte Zeilennummer zu finden.</p>
<p id="LoopReadLine">Die interne Variable <strong>A_LoopReadLine</strong> ist nur in einer dateilesenden Schleife von Bedeutung. Sie enthält den Inhalt der aktuellen Zeile ohne das CR-LF-Paar (`r`n) am Ende. Wenn eine innere dateilesende Schleife von einer äußeren dateilesenden Schleife umschlossen ist, hat die Dateizeile der innersten Schleife Vorrang.</p>
<p>Es können Zeilen mit einer Länge von bis zu 65534 Zeichen gelesen werden. Wenn eine Zeile diese Länge überschreitet, werden die restlichen Zeichen während des nächsten Schleifendurchlaufs gelesen.</p>
<p>In einer dateilesenden Schleife wird oft <a href="StrSplit.htm">StrSplit()</a>, <a href="StringSplit.htm">StringSplit</a> oder eine <a href="LoopParse.htm">parsende Schleife</a> verwendet, um den Inhalt von jeder Zeile zu parsen, die in <em>EingabeDatei</em> gefunden wurde. Wenn jede Zeile in <em>EingabeDatei</em> beispielsweise aus mehreren tabgetrennten Feldern besteht, können solche Felder wie folgt einzeln abgerufen werden:</p>
<pre>Loop, read, C:\Datenbank-Export.txt
{
    Loop, parse, A_LoopReadLine, %A_Tab%
    {
        MsgBox, Feldnummer %A_Index% ist %A_LoopField%.
    }
}</pre>
<p>Um eine komplette Datei in eine Variable zu laden, verwendet Sie <a href="FileRead.htm">FileRead</a>, weil es deutlich leistungsfähiger als eine Schleife ist (besonders bei großen Dateien).</p>
<p>Um mehrere Dateien simultan zu lesen oder zu schreiben, verwenden Sie <a href="FileOpen.htm">FileOpen()</a>.</p>
<p>Auf der <a href="Loop.htm">Loop</a>-Seite finden Sie Informationen zu <a href="Block.htm">Blöcken</a>, <a href="Break.htm">Break</a>, <a href="Continue.htm">Continue</a> und A_Index (sie können in jeder Schleifenvariante verwendet werden).</p>
<p>Mit <a href="FileEncoding.htm">FileEncoding</a> können Sie kontrollieren, wie eine Datei ohne Byte-Order-Markierung entschlüsselt werden soll.</p>

<h2 id="Related">Siehe auch</h2>
<p><a href="FileEncoding.htm">FileEncoding</a>, <a href="FileOpen.htm">FileOpen()</a>/<a href="File.htm">File-Objekt</a>, <a href="FileRead.htm">FileRead</a>, <a href="FileReadLine.htm">FileReadLine</a>, <a href="FileAppend.htm">FileAppend</a>, <a href="Sort.htm">Sort</a>, <a href="Loop.htm">Loop</a>, <a href="Break.htm">Break</a>, <a href="Continue.htm">Continue</a>, <a href="Block.htm">Blöcke</a>, <a href="FileSetAttrib.htm">FileSetAttrib</a>, <a href="FileSetTime.htm">FileSetTime</a></p>

<h2 id="Examples">Beispiele</h2>
<div class="ex" id="ExFileAppend">
<p><a class="ex_number" href="#ExFileAppend"></a> Zeilen, die in der ersten Datei das Wort FAMILIE enthalten, werden in die zweite Datei geschrieben. Heben Sie die Kommentierung der ersten Zeile auf, um die vorhandene Datei zu überschreiben statt Text anzufügen.</p>
<pre><em>;FileDelete, C:\Dokumente\Familie-Adressen.txt</em>

Loop, read, C:\Dokumente\Adressenliste.txt, C:\Dokumente\Familie-Adressen.txt
{
    if InStr(A_LoopReadLine, "Familie")
        FileAppend, %A_LoopReadLine%`n
}</pre>
</div>

<div class="ex" id="ExLastLine">
<p><a class="ex_number" href="#ExLastLine"></a> Ruft die letzte Zeile einer Textdatei ab.</p>
<pre>Loop, read, C:\Logdatei.txt
    letzteZeile := A_LoopReadLine  <em>; Sobald die Schleife endet, wird diese Variable die letzte Zeile beinhalten.</em></pre>
</div>

<div class="ex" id="ExURL">
<p><a class="ex_number" href="#ExURL"></a> Versucht, alle FTP- und HTTP-URLs aus einer Text- oder HTML-Datei zu extrahieren.</p>
<pre>FileSelectFile, QuelleDatei, 3,, Wählen Sie eine Text- oder HTML-Datei zum Analysieren aus:
if (QuelleDatei = "")
    return  <em>; In diesem Fall beenden.</em>

SplitPath, QuelleDatei,, QuelleDateiPfad,, QuelleDateiOhneEnd
ZielDatei := QuelleDateiPfad "\" QuelleDateiOhneEnd " Extrahierte Links.txt"

if FileExist(ZielDatei)
{
    MsgBox, 4,, Vorhandene Datei überschreiben? Drücken Sie Nein, um die Links nur anzufügen.`n`nDATEI: %ZielDatei%
    IfMsgBox, Yes
        FileDelete, %ZielDatei%
}

LinksAnzahl := 0
Loop, read, %QuelleDatei%, %ZielDatei%
{
    URLSuchZkette := A_LoopReadLine
    Gosub, URLSuche
}
MsgBox %LinksAnzahl% Links wurden gefunden und in "%ZielDatei%" geschrieben.
return


URLSuche:
<em>; Das wird auf diese Weise gemacht, weil einige URLs andere URLs eingebettet haben:</em>
URLStart1 := InStr(URLSuchZkette, "https://")
URLStart2 := InStr(URLSuchZkette, "http://")
URLStart3 := InStr(URLSuchZkette, "ftp://")
URLStart4 := InStr(URLSuchZkette, "www.")

<em>; Findet die Startposition ganz links:</em>
URLStart := URLStart1  <em>; Setzt den Standardwert.</em>
Loop
{
    <em>; Es kommt der Leistung zugute (zumindest in einem Skript mit vielen Variablen), wenn</em>
    <em>; "URLStart%A_Index%" nur einmal aufgelöst wird:</em>
    ArrayElement := URLStart%A_Index%
    if (ArrayElement = "")  <em>; Ende des <a href="../misc/Arrays.htm#pseudo">Pseudo-Arrays</a> erreicht.</em>
        break
    if (ArrayElement = 0)  <em>; Dieses Element ist disqualifiziert.</em>
        continue
    if (URLStart = 0)
        URLStart := ArrayElement
    else <em>; URLStart beinhaltet eine gültige Position, also mit ArrayElement vergleichen.</em>
    {
        if (ArrayElement != 0)
            if (ArrayElement &lt; URLStart)
                URLStart := ArrayElement
    }
}

if (URLStart = 0)  <em>; Keine URLs in der URLSuchZkette.</em>
    return

<em>; Extrahiert ansonsten diese URL:</em>
URL := SubStr(URLSuchZkette, URLStart)  <em>; Entfernt den beginnenden/irrelevanten Teil.</em>
Loop, parse, URL, %A_Tab%%A_Space%&lt;&gt;  <em>; Findet das erste Leer-, Tab- oder Winkelzeichen (falls vorhanden).</em>
{
    URL := A_LoopField
    break  <em>; Führt nur eine Schleifeniteration durch, um das erste "Feld" zu holen.</em>
}
<em>; Wenn die obige Schleife aufgrund eines nicht-vorhandenen Endungszeichen keine Iteration hat,
; bleibt der Inhalt der URL-Variable unberührt.</em>

<em>; Wenn die URL mit einem doppelten Anführungszeichen endet, wird sie entfernt.  Vorerst wird StringReplace verwendet, aber
; beachten Sie, dass doppelte Anführungszeichen in URLs legitim sind, so dass sie dadurch
; beschädigt werden könnten:</em>
StringReplace, SaubereURL, URL, ",, All
FileAppend, %SaubereURL%`n
LinksAnzahl += 1

<em>; Schaut nach, ob noch andere URLs in dieser Zeile vorkommen:</em>
WegzulassendeZeichen := StrLen(URL)
WegzulassendeZeichen += URLStart
URLSuchZkette := SubStr(URLSuchZkette, WegzulassendeZeichen)
Gosub, URLSuche  <em>; Rekursiver Aufruf von sich selbst.</em>
return</pre>
</div>

</body>
</html>
