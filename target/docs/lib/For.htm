<!DOCTYPE HTML>
<html lang="de">
<head>
<title>For Loop - Syntax &amp; Verwendung | AutoHotkey</title>
<meta name="description" content="Die For-Schleifenanweisung führt für jedes Schlüssel-Wert-Paar eines Objekts eine Reihe von Codezeilen wiederholt aus." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>For-Schleife <span class="ver">[AHK_L 59+]</span></h1>

<p>Führt für jedes Schlüssel-Wert-Paar eines Objekts eine Reihe von Befehlen wiederholt aus.</p>

<pre class="Syntax"><span class="func">For</span> Schlüssel <span class="optional">, Wert</span> in Ausdruck</pre>
<h2 id="Parameters">Parameter</h2>
<dl>

  <dt>Key</dt>
  <dd><p>Name der Variable, in der der Schlüssel zu Beginn jeder Iteration (Wiederholung) gespeichert werden soll.</p></dd>

  <dt>Wert</dt>
  <dd><p>Name der Variable, in der der Wert des aktuellen Schlüssels gespeichert werden soll.</p></dd>

  <dt>Ausdruck</dt>
  <dd><p>Ein <a href="../Variables.htm#Expressions">Ausdruck</a>, dessen Ergebnis ein Objekt ist, oder eine Variable, die ein Objekt enthält.</p></dd>

</dl>

<h2 id="Remarks">Bemerkungen</h2>
<p><i>Ausdruck</i> wird nur einmal ausgewertet, bevor die Schleife beginnt. Wenn das Ergebnis des angegebenen Ausdrucks kein Objekt ist, wird der Schleifenkörper übersprungen und die nächste ausführbare Zeile angesteuert; ansonsten wird die <code>NewEnum()</code>-Methode des Objekts aufgerufen, um an dessen <a href="EnumeratorObj.htm"><i>Enumerator</i></a>-Objekt zu gelangen. Zu Beginn jeder Iteration wird die <a href="EnumeratorObj.htm#Next">Next()</a>-Methode des Enumerators aufgerufen, um das nächste Schlüssel-Wert-Paar zu ermitteln. Wenn Next() eine 0 oder eine leere Zeichenkette zurückgibt, wird die Schleife beendet.</p>
<p>Das folgende Beispiel zeigt, wie eine For-Schleife ungefähr abläuft:</p>
<pre>_enum := (<i>Ausdruck</i>)._NewEnum()
if IsObject(_enum)
    while _enum.Next(Schlüssel, Wert)
    {
        ...
    }
</pre>
<p>Bestehende Schlüssel-Wert-Paare können während der Schleife geändert werden. Allerdings kann das Einfügen oder Entfernen von Schlüsseln dazu führen, dass einige Elemente mehrfach übersprungen oder enumeriert werden. Eine Möglichkeit, dies zu umgehen, wäre es, eine Liste mit Schlüsseln zu erstellen, die entfernt werden sollen, und danach eine zweite Schleife zu verwenden, um die Schlüssel nach dem ersten Schleifendurchlauf zu entfernen. Mit <code><a href="Object.htm#Remove">Objekt.Remove</a>(<i>ErsterSchlüssel</i>, <i>LetzterSchlüssel</i>)</code> kann ein bestimmter Bereich von Schlüsseln entfernt werden, ohne dass eine Schleife notwendig ist.</p>
<p>Nach einer For-Schleife erfolgt üblicherweise ein <a href="Block.htm">Block</a> (eine Sammlung von Anweisungen), der den <em>Schleifenkörper</em> definiert. Eine Schleife mit nur einer einzigen Anweisung benötigt keinen Block (ein "if" und das dazugehörige "else" werden hierbei als Einzelanweisung angesehen). Optional kann der "One True Brace Style" (OTB) angewendet werden, um die geschweifte Startklammer auf dieselbe Zeile statt darunter zu setzen. Zum Beispiel: <code>for x, y in z {</code>.</p>
<p>Diese und jede andere Schleife in AutoHotkey kann auf Hilfsmittel wie <a href="Break.htm">Break</a>, <a href="Continue.htm">Continue</a> und <a href="../Variables.htm#Index">A_Index</a> zurückgreifen.</p>

<h2 id="COM_Objects">COM-Objekte</h2>
<p>Da <i>Schlüssel</i> und <i>Wert</i> direkt an die Next()-Methode des Enumerators übergeben werden, hängen die zugewiesenen Werte davon ab, welche Art von Objekt enumeriert wird. Handelt es sich um ein COM-Objekt, enthält <i>Schlüssel</i> den Rückgabewert von <a href="https://msdn.microsoft.com/de-de/library/ms221369.aspx">IEnumVARIANT::Next()</a> und <i>Wert</i> eine Zahl, die seinen <a href="https://msdn.microsoft.com/de-de/library/cc237865.aspx">Variantentyp</a> repräsentiert. Wenn es zum Beispiel mit einem <a href="https://msdn.microsoft.com/de-de/library/x4k5wbx4.aspx">Scripting.Dictionary</a>-Objekt genutzt wird, enthält <i>Schlüssel</i> einen Schlüssel aus dem Dictionary und <i>Wert</i> eine 8 für Zeichenketten und eine 3 für Integer. Eine Auflistung aller Typennummern finden Sie unter <a href="ComObjType.htm">ComObjType()</a>.</p>
<p><span class="ver">[v1.0.96.00+]:</span> Beim Enumerieren eines <a href="ComObjArray.htm">SafeArrays</a> enthält <i>Schlüssel</i> das aktuelle Element und <i>Wert</i> seinen Variantentyp.</p>

<h2 id="Related">Siehe auch</h2>
<p><a href="EnumeratorObj.htm">Enumerator-Objekt</a>, <a href="Object.htm#NewEnum">Objekt._NewEnum()</a>, <a href="While.htm">While-Schleife</a>, <a href="Loop.htm">Loop</a>, <a href="Until.htm">Until</a>, <a href="Break.htm">Break</a>, <a href="Continue.htm">Continue</a>, <a href="Block.htm">Blöcke</a></p>

<h2 id="Examples">Beispiele</h2>
<div class="ex" id="ExBasic">
<p><a class="ex_number" href="#ExBasic"></a> Listet die Schlüssel-Wert-Paare eines Objekts auf.</p>
<pre>Farben := <a href="../Objects.htm#Arrays">Object</a>("Rot", 0xFF0000, "Blau", 0x0000FF, "Grün", 0x00FF00)
<em>; "Farben" könnte direkt mit dem obigen Ausdruck ersetzt werden:</em>
For k, v in Farben
    s .= k "=" v "`n"
MsgBox % s
</pre>
</div>

<div class="ex" id="ExCOM">
<p><a class="ex_number" href="#ExCOM"></a> Listet alle offenen Explorer- und Internet-Explorer-Fenster auf, unter Verwendung des <a href="https://docs.microsoft.com/de-de/windows/win32/shell/shell">Shell</a>-Objekts.</p>
<pre>for window in ComObjCreate("Shell.Application").Windows
    windows .= window.LocationName " :: " window.LocationURL "`n"
MsgBox % windows</pre>
</div>

<div class="ex" id="ExCEnumerator">
<p><a class="ex_number" href="#ExCEnumerator"></a> Klasse: CEnumerator</p>
<p>Stellt ein generisches Enumerator-Objekt bereit, mit dem numerische Schlüssel iteriert werden können. Das Array darf beim Iterieren nicht verändert werden, weil der iterierte Bereich ansonsten ungültig wäre. Es ist möglich, benutzerdefinierte MaxIndex()-Funktionen für die Array-Grenzen zu definieren. Befinden sich fehlende Array-Elemente zwischen 1 und Max-Index, werden sie iteriert, aber einen Wert von "" haben. Das bedeutet, dass dieser Enumerator keine realen lückenhaften Arrays unterstützt. Quelle: <a href="https://www.autohotkey.com/board/topic/2667-suggestions-on-documentation-improvements/?p=531509">Suggestions on documentation improvements</a></p>
<pre><em>/*
Klasse: CEnumerator

Damit ein Objekt diesen Iterator verwenden kann, fügen Sie diese Funktion in die Klassendefinition ein:

    _NewEnum()
    {
    	return new CEnumerator(this)
    }
*/</em>

<em>; Iteriert über den Enumerator</em>
For k, v in Test
    MsgBox %k%=%v%

<em>; Test-Klasse, um die Verwendung zu demonstrieren</em>
class Test
{
    static Data := ["abc", "def", "ghi"]

    _NewEnum()
    {
        return new CEnumerator(this.Data)
    }
}

class CEnumerator
{
    __New(Object)
    {
        this.Object := Object
        this.first := true
        <em>; Für die Geschwindigkeit zwischenspeichern. Nützlich, falls benutzerdefinierte MaxIndex()-Funktionen schlechte Leistung haben.</em>
        <em>; Das bedeutet aber auch, dass keine Schlüssel-Wert-Paare beim Iterieren eingefügt werden können, weil der Bereich ansonsten ungültig wäre.</em>
        this.ObjMaxIndex := Object.MaxIndex()
    }

    Next(ByRef key, ByRef value)
    {
        if (this.first)
        {
            this.Remove("first")
            key := 1
        }
        else
            key ++
        if (key &lt;= this.ObjMaxIndex)
            value := this.Object[key]
        else
            key := ""
        return key != ""
    }
}</pre>
</div>
</body>
</html>