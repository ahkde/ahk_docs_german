<!DOCTYPE HTML>
<html lang="de">
<head>
<title>FileRead - Syntax &amp; Verwendung | AutoHotkey</title>
<meta name="description" content="Der FileRead-Befehl liest den Inhalt einer Datei in eine Variable." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>FileRead</h1>

<p>Liest den Inhalt einer Datei in eine <a href="../Variables.htm">Variable</a>.</p>

<pre class="Syntax"><span class="func">FileRead</span>, AusgabeVar, DateiName</pre>
<h2 id="Parameters">Parameter</h2>
<dl>

  <dt>AusgabeVar</dt>
  <dd><p>Name der <a href="../Variables.htm">Ausgabevariable</a>, in der die ermittelten Daten gespeichert werden sollen. <em>AusgabeVar</em> wird leer gemacht, wenn ein Problem auftritt, z. B. wenn die Datei "in Benutzung" ist oder nicht existiert (in diesem Fall wird <a href="../misc/ErrorLevel.htm">ErrorLevel</a> auf 1 gesetzt). Die Ausgabevariable wird auch leer gemacht, wenn <em>DateiName</em> eine leere Datei ist (in diesem Fall wird ErrorLevel auf 0 gesetzt).</p></dd>

  <dt>DateiName</dt>
  <dd><p>Name der Datei, die gelesen werden soll. Wenn kein absoluter Pfad angegeben ist, wird die Datei im <a href="../Variables.htm#WorkingDir">A_WorkingDir</a>-Verzeichnis vermutet.</p>
      <p><strong>Optionen</strong>: Direkt vor dem Dateinamen können null oder mehr der folgenden Zeichenketten angegeben werden. Die Optionen müssen jeweils mit einem Leer- oder Tabulatorzeichen voneinander getrennt werden. Zum Beispiel: <code>*t *m5000 C:\Log-Dateien\200601.txt</code>.</p>
    <p><strong>*c</strong>: Lädt eine Datei aus <a href="../misc/Clipboard.htm#ClipboardAll">ClipboardAll</a> oder anderen binären Daten. Alle anderen Optionen werden ignoriert, wenn <strong>*c</strong> vorhanden ist.</p>
    <p><strong>*m1024</strong>: Lässt man diese Option weg, wird die komplette Datei geladen, es sei denn, es mangelt an Speicherkapazität, dann wird eine Fehlermeldung angezeigt und der Thread beendet (kann aber mit <a href="Try.htm">Try</a> umgangen werden). Ansonsten können Sie 1024 mit einer dezimalen oder hexadezimalen Anzahl von Bytes ersetzen. Wenn die Datei die angegebene Größe überschreitet, wird nur ihr beginnender Teil geladen.</p>
    <p class="note"><strong>Hinweis</strong>: Dies kann dazu führen, dass die letzte Zeile nur mit einem einzelnen CR-Zeichen (`r) endet, statt mit dem CR-LF-Paar (`r`n).</p>
    <p><strong>*t</strong>: Ersetzt alle CR-LF-Paare (`r`n) mit einem LF-Zeichen (`n). Diese Übersetzung reduziert jedoch die Leistung und ist in der Regel nicht notwendig. Zum Beispiel wäre ein Text, der `r`n enthält, bereits im richtigen Format, um in ein <a href="GuiControls.htm#Edit">Gui-Edit-Steuerelement</a> eingefügt werden zu können. Ebenso stellt <a href="FileAppend.htm">FileAppend</a> automatisch fest, ob ein CR-LF-Paar (`r`n) vorhanden ist, wenn eine neue Datei geöffnet wird; der Befehl weiß, jedes `r`n so zu lassen wie es ist, anstatt es in `r`r`n zu übersetzen. Die folgende <a href="LoopParse.htm">parsende Schleife</a> wird korrekt funktionieren, egal ob eine Zeile mit `r`n oder nur mit `n endet: <code>Loop, Parse, MeineDateiInhalt, `n, `r</code>.</p>
    <p><strong>*Pnnn</strong>: <span class="ver">[AHK_L 42+]:</span> Überschreibt die via <a href="FileEncoding.htm">FileEncoding</a> gesetzte Standardcodierung, wobei <em>nnn</em> ein <a href="https://learn.microsoft.com/windows/desktop/Intl/code-page-identifiers">Zeichensatzidentifikator</a> sein muss.</p></dd>

</dl>

<h2 id="Error_Handling">Fehlerbehandlung</h2>
<p><span class="ver">[v1.1.04+]</span>: Dieser Befehl ist in der Lage, bei Misserfolg eine Ausnahme auszulösen. Weitere Informationen finden Sie unter <a href="Catch.htm#RuntimeErrors">Laufzeitfehler</a>.</p>
<p><a href="../misc/ErrorLevel.htm">ErrorLevel</a> wird auf 0 gesetzt, wenn die Datei erfolgreich geladen wurde. Ansonsten wird ErrorLevel auf 1 gesetzt, wenn ein Problem aufgetreten ist. Probleme sind zum Beispiel: 1) Datei existiert nicht; 2) Datei ist gesperrt oder nicht zugreifbar; 3) Das System hat nicht genügend Arbeitsspeicher, um die Datei zu laden.</p>
<p><a href="../Variables.htm#LastError">A_LastError</a> wird auf das Ergebnis der Systemfunktion GetLastError() gesetzt.</p>

<h2 id="Binary">Lesen von Binärdaten</h2>
<p>Je nach Datei, Parametern und Standardeinstellungen wird FileRead den Inhalt der Datei eventuell als Text interpretieren und ihn in die vom Skript verwendete <a href="../Compat.htm#Format">native Codierung</a> konvertieren. Diese Konvertierung kann zu Problemen führen, wenn die Datei binäre Daten enthält, außer in folgenden Fällen:</p>
<ul>
  <li>Wenn die <span class="Syntax">*C</span>-Option vorhanden ist, werden Zeichensatzkonvertierungen und End-of-Line-Übersetzungen bedingungslos umgangen.</li>
  <li>Wenn die <span class="Syntax">*P<i>nnn</i></span>-Option vorhanden ist und <i>nnn</i> mit der nativen Zeichenkettencodierung übereinstimmt, erfolgen keine Zeichensatzkonvertierungen.</li>
  <li>Wenn die aktuelle <a href="FileEncoding.htm">Dateicodierung</a> mit der nativen Zeichenkettencodierung übereinstimmt, erfolgen keine Zeichensatzkonvertierungen.</li>
</ul>
<p>Beachten Sie, dass nach dem Einlesen der Daten in <em>AusgabeVar</em> nur der Text vor der ersten binären Null (falls vorhanden) von den meisten AutoHotkey-Befehlen und -Funktionen "gesehen" wird. Der gesamte Inhalt ist jedoch weiterhin vorhanden und kann mit erweiterten Methoden wie <a href="NumGet.htm">NumGet()</a> abgerufen werden.</p>
<p>Mit <a href="FileOpen.htm">FileOpen()</a> in Verbindung mit <a href="FileObj.htm#RawRead">File.RawRead()</a> oder <a href="FileObj.htm#ReadNum">File.Read<i>Num</i>()</a> können binäre Daten erfasst werden, ohne die komplette Datei in den Speicher einlesen zu müssen.</p>

<h2 id="Remarks">Bemerkungen</h2>
<p>FileRead ist deutlich performanter als eine <a href="LoopReadFile.htm">dateilesende Schleife</a>, wenn es darum geht, alles oder einen großen Teil einer Datei in den Speicher zu laden.</p>
<p>Eine Datei größer als 1 GB bewirkt, dass <a href="../misc/ErrorLevel.htm">ErrorLevel</a> auf 1 gesetzt und <em>AusgabeVar</em> leer gemacht wird, es sei denn, die <strong>*m</strong>-Option ist vorhanden, dann wird nur der beginnende Teil der Datei geladen.</p>
<p>FileRead ignoriert <a href="_MaxMem.htm">#MaxMem</a>. Wenn Sie Bedenken haben, dass die Datei zu viel Arbeitsspeicher verbraucht, können Sie zunächst ihre Größe mit <a href="FileGetSize.htm">FileGetSize</a> überprüfen.</p>
<p>Die <a href="FileOpen.htm">FileOpen</a>-Funktion bietet eine weitaus fortschrittlichere Funktionalität als FileRead. Sie kann zum Beispiel Daten an einer bestimmten Stelle in der Datei lesen oder schreiben, ohne zuerst die gesamte Datei in den Arbeitsspeicher lesen zu müssen. Eine Liste aller Features finden Sie unter <a href="FileObj.htm">File-Objekt</a>.</p>

<h2 id="Related">Siehe auch</h2>
<p><a href="FileEncoding.htm">FileEncoding</a>, <a href="FileOpen.htm">FileOpen()</a>/<a href="FileObj.htm">File-Objekt</a>, <a href="LoopReadFile.htm">dateilesende Schleife</a>, <a href="FileReadLine.htm">FileReadLine</a>, <a href="FileGetSize.htm">FileGetSize</a>, <a href="FileAppend.htm">FileAppend</a>, <a href="IniRead.htm">IniRead</a>, <a href="Sort.htm">Sort</a>, <a href="URLDownloadToFile.htm">UrlDownloadToFile</a></p>

<h2 id="Examples">Beispiele</h2>
<div class="ex" id="ExBasic">
<p><a class="ex_number" href="#ExBasic"></a> Liest eine Textdatei und speichert ihren kompletten Inhalt in <em>AusgabeVar</em>.</p>
<pre>FileRead, AusgabeVar, C:\Meine Dokumente\Meine Datei.txt</pre>
</div>

<div class="ex" id="ExSort">
<p><a class="ex_number" href="#ExSort"></a> Sortiert schnell den Inhalt einer Datei.</p>
<pre>FileRead, Inhalt, C:\Adressenliste.txt
if not ErrorLevel  <em>; Erfolgreich geladen.</em>
{
    <a href="Sort.htm">Sort</a>, Inhalt
    FileDelete, C:\Adressenliste (alphabetisch).txt
    FileAppend, %Inhalt%, C:\Adressenliste (alphabetisch).txt
    Inhalt := ""  <em>; Gibt den Speicher frei.</em>
}</pre>
</div>

</body>
</html>
