<!DOCTYPE HTML>
<html lang="de">
<head>
<title>StrSplit() - Syntax &amp; Verwendung | AutoHotkey</title>
<meta name="description" content="Die StrSplit-Funktion teilt eine Zeichenkette mittels bestimmter Separatoren in mehrere Teilzeichenketten auf." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga4.js" type="text/javascript"></script>
</head>
<body>

<h1>StrSplit() <span class="ver">[v1.1.13+]</span></h1>
<p>Teilt eine Zeichenkette mittels bestimmter Separatoren in mehrere Teilzeichenketten auf.</p>
<pre class="Syntax">
Array := <span class="func">StrSplit</span>(Zkette <span class="optional">, Separatoren, ZuEntfernendeZeichen, MaxParts</span>)</pre>

<h2 id="Parameters">Parameter</h2>
<dl>

  <dt>Zkette</dt>
  <dd><p>Eine Zeichenkette, die aufgeteilt werden soll.</p></dd>

  <dt>Separatoren</dt>
  <dd>
    <p>Wenn leer oder weggelassen, wird jedes Zeichen in der Eingabezeichenkette als einzelne Teilzeichenkette behandelt.</p>
    <p>Andernfalls geben Sie entweder eine einzelne Zeichenkette oder ein Array von Zeichenketten an (Groß-/Kleinschreibung-sensitiv), die jeweils zur Abgrenzung der Teilzeichenketten verwendet werden. Da die Separatoren nicht als Teil der Teilzeichenketten betrachtet werden, sind sie nie im Rückgabe-Array enthalten. Wenn sich zwischen zwei Separatoren in der Eingabezeichenkette nichts befindet, wird das entsprechende Array-Element leer sein.</p>
    <p>Zum Beispiel: <code>","</code> würde die Zeichenkette an jedem Komma teilen, während <code>[A_Space, A_Tab]</code> ein neues Array-Element an jedem Leer- oder Tabulatorzeichen in der Eingabezeichenkette erstellen würde.</p>
  </dd>

  <dt>ZuEntfernendeZeichen</dt>
  <dd>
    <p>Wenn leer oder weggelassen, werden keine Zeichen entfernt. Andernfalls geben Sie eine Liste von Zeichen an (Groß-/Kleinschreibung-sensitiv), die am Anfang und Ende jedes Array-Elements entfernt werden sollen. Wenn <em>ZuEntfernendeZeichen</em> z.B. <code>" `t"</code> ist, werden Leer- und Tabulatorzeichen am Anfang und Ende (aber nicht in der Mitte) jedes abgerufenen Elements entfernt.</p>
    <p>Wenn <em>Separatoren</em> leer ist, gibt <em>ZuEntfernendeZeichen</em> die Zeichen an, die das Array nicht enthalten soll.</p>
  </dd>

  <dt>MaxParts <span class="ver">[v1.1.28+]</span></dt>
  <dd>Wenn leer oder weggelassen, wird standardmäßig -1 verwendet, d.h. "kein Limit". Andernfalls geben Sie die maximale Anzahl von Teilzeichenketten an, die zurückgegeben werden sollen. Wenn dieser Parameter ungleich 0 ist, wird die Zeichenkette maximal <em>MaxParts</em>-1 Mal geteilt und der Rest der Zeichenkette als letzte Teilzeichenkette zurückgegeben (ohne <em>ZuEntfernendeZeichen</em> am Anfang und Ende).</dd>

</dl>

<h2 id="Return_Value">Rückgabewert</h2>
<p>Diese Funktion gibt ein <a href="../Objects.htm#Usage_Simple_Arrays">Array</a> (Objekt) von Zeichenketten zurück.</p>

<h2 id="Remarks">Bemerkungen</h2>
<p>Leerraumzeichen wie Leer- und Tabulatorzeichen bleiben erhalten, es sei denn, diese Zeichen sind selbst Trennzeichen oder in <em>ZuEntfernendeZeichen</em> angegeben. Um Leer- und Tabulatorzeichen an beiden Enden einer Variable zu entfernen, verwenden Sie die <a href="Trim.htm">Trim</a>-Funktion. Zum Beispiel: <code>MeinArray1 := Trim(MeinArray1)</code>.</p>
<p>Zum Splitten einer Zeichenkette im regulären CSV-Format (Comma Separated Values, dt. kommagetrennte Werte) können Sie eine <a href="LoopParse.htm">parsende Schleife</a> verwenden, da diese nativ mit CSV umgehen kann.</p>
<p>Um die Felder vor dem Splitten anders anzuordnen, verwenden Sie den <a href="Sort.htm">Sort</a>-Befehl.</p>
<p>Wenn die Teilzeichenketten nur temporär benötigt werden, ist es ratsam, eine <a href="LoopParse.htm">parsende Schleife</a> zu verwenden, insbesondere wenn <em>Zkette</em> sehr groß ist, da in diesem Fall viel Arbeitsspeicher gespart werden kann. Zum Beispiel:</p>
<pre>Farben := "rot,grün,blau"
Loop, Parse, Farben, % ","
    MsgBox % "Farbnummer " A_Index " ist " A_LoopField</pre>

<h2 id="Related">Siehe auch</h2>
<p><a href="StringSplit.htm">StringSplit</a>, <a href="LoopParse.htm">parsende Schleife</a>, <a href="../misc/Arrays.htm">Arrays</a>, <a href="Sort.htm">Sort</a>, <a href="SplitPath.htm">SplitPath</a>, <a href="InStr.htm">InStr()</a>, <a href="SubStr.htm">SubStr()</a>, <a href="StrLen.htm">StrLen()</a>, <a href="StringLower.htm">StringLower</a>, <a href="StringLower.htm">StringUpper</a>, <a href="StrReplace.htm">StrReplace()</a></p>

<h2 id="Examples">Beispiele</h2>
<div class="ex" id="ExSpace">
<p><a class="ex_number" href="#ExSpace"></a> Splittet einen Satz in ein Array von Wörtern und meldet das vierte Wort.</p>
<pre>TestZkette := "Das ist ein Test."
wort_array := StrSplit(TestZkette, A_Space, ".") <em>; Entfernt Punkte.</em>
MsgBox % "Das vierte Wort ist " wort_array[4]</pre>
</div>

<div class="ex" id="ExComma">
<p><a class="ex_number" href="#ExComma"></a> Splittet eine kommagetrennte Liste von Farben in ein Array von Teilzeichenketten und geht diese einzeln durch.</p>
<pre>Farben := "rot,grün,blau"
for Index, Farbe in StrSplit(Farben, ",")
    MsgBox % "Farbnummer " Index " ist " Farbe</pre>
</div>

</body>
</html>
