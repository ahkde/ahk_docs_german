<!DOCTYPE HTML>
<html lang="de">
<head>
<title>Exit - Syntax &amp; Verwendung | AutoHotkey</title>
<meta name="description" content="Der Exit-Befehl beendet den aktuellen Thread oder (wenn das Skript nicht persistent ist) das gesamte Skript." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga4.js" type="text/javascript"></script>
</head>
<body>

<h1>Exit</h1>

<p>Beendet den <a href="../misc/Threads.htm">aktuellen Thread</a> oder (wenn das Skript nicht <a href="_Persistent.htm">persistent</a> ist) das gesamte Skript.</p>

<pre class="Syntax"><span class="func">Exit</span> <span class="optional">, ExitCode</span></pre>
<h2 id="Parameters">Parameter</h2>
<dl>

  <dt>ExitCode</dt>
  <dd><p>Ein Integer zwischen -2147483648 und 2147483647 (kann ein <a href="../Variables.htm#Expressions">Ausdruck</a> sein), der beim Beenden des Skripts zurückgegeben werden soll. Dieser Code ist für jedes Programm zugänglich, das den Start des Skripts veranlasst hat, wie z. B. ein anderes Skript (per RunWait) oder eine Batch-Datei (.bat). Lässt man diesen Parameter weg, wird als <em>ExitCode</em> standardmäßig 0 verwendet. Eine 0 wird traditionell verwendet, um Erfolg zu melden.</p></dd>

</dl>

<h2 id="Remarks">Bemerkungen</h2>
<p>Wenn das Skript nicht <a href="_Persistent.htm">persistent</a> ist, versucht Exit, das gesamte Skript zu terminieren, als hätte man <a href="ExitApp.htm">ExitApp</a> aufgerufen.</p>
<p>Wenn das Skript nicht terminiert ist, wird der Exit-Befehl den <a href="../misc/Threads.htm">aktuellen Thread</a> beenden. Mit anderen Worten: Alle Subroutinen, die direkt oder indirekt durch ein <a href="Menu.htm">Menü</a>, <a href="SetTimer.htm">Timer</a> oder <a href="../Hotkeys.htm">Hotkey</a> aufgerufen wurden, werden beendet, als wären sie alle an einem <a href="Return.htm">Return</a> angekommen. Wenn man Exit direkt in so einer Subroutine verwendet (statt in einer von ihr indirekt aufgerufenen Subroutinen), ist Exit das gleiche wie <a href="Return.htm">Return</a>.</p>
<p>Verwenden Sie <a href="ExitApp.htm">ExitApp</a>, um ein <a href="_Persistent.htm">persistentes</a> Skript vollständig zu terminieren.</p>

<h2 id="Related">Siehe auch</h2>
<p><a href="ExitApp.htm">ExitApp</a>, <a href="OnExit.htm#function">OnExit()</a>, <a href="OnExit.htm#command">OnExit</a>, <a href="../Functions.htm">Funktionen</a>, <a href="Gosub.htm">Gosub</a>, <a href="Return.htm">Return</a>, <a href="../misc/Threads.htm">Threads</a>, <a href="_Persistent.htm">#Persistent</a></p>
<h2 id="Examples">Beispiele</h2>
<div class="ex" id="ExBasic">
<p><a class="ex_number" href="#ExBasic"></a> In diesem Beispiel terminiert der Exit-Befehl sowohl die Sub2-Subroutine als auch die aufrufende Subroutine.</p>
<pre>#z::
Gosub, Sub2
MsgBox, Diese MsgBox wird aufgrund von EXIT nie erscheinen.
return

Sub2:
Exit  <em>; Terminiert sowohl diese Subroutine als auch die aufrufende Subroutine.</em></pre>
</div>

</body>
</html>
