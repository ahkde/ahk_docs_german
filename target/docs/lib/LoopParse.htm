<!DOCTYPE HTML>
<html lang="de">
<head>
<title>Loop (Zeichenkette parsen) - Syntax &amp; Verwendung | AutoHotkey</title>
<meta name="description" content="Die Loop-Parse-Anweisung ruft Teile (Felder) einer Zeichenkette einzeln ab." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>Loop (Zeichenkette parsen)</h1>

<p>Ruft Teile (Felder) einer Zeichenkette einzeln ab.</p>

<pre class="Syntax"><span class="func">Loop, Parse</span>, EingabeVar <span class="optional">, Trennzeichen, WegzulassendeZeichen</span></pre>
<h2 id="Parameters">Parameter</h2>
<dl>

  <dt>Parse</dt>
  <dd><p>Dieser Parameter muss das Wort PARSE sein, und darf, im Gegensatz zu den anderen Schleifenvarianten, keine Variablenreferenz enthalten, die in das Wort PARSE aufgelöst wird.</p></dd>

  <dt>EingabeVar</dt>
  <dd>
    <p>Name der Eingabevariable, deren Inhalt geparst werden soll. Umschließen Sie den Namen nicht mit Prozentzeichen, es sei denn, Sie wollen den <em>Inhalt</em> der Variable als Namen verwenden.</p>
    <p><span class="ver">[v1.1.21+]:</span> Dieser Parameter kann ein <code>% <a href="../Variables.htm#Expressions">Ausdruck</a></code> sein, allerdings muss das Prozent-Leerzeichen-Präfix verwendet werden.</p>
  </dd>

  <dt>Trennzeichen</dt>
  <dd><p>Wenn dieser Parameter weggelassen wird oder leer ist, wird jedes Zeichen in <em>EingabeVar</em> als einzelne Teilzeichenkette behandelt.</p>
      <p>Enthält dieser Parameter <strong>CSV</strong>, wird <em>EingabeVar</em> als eine Zeichenkette mit kommagetrennten Werten angesehen (Comma-Separated Values). Das folgende Beispiel ist eine CSV-Zeile, die mit MS-Excel erstellt wurde:</p>
<pre class="no-highlight">"Erstes Feld",ZweitesFeld,"Das Wort ""Spezial"" in direkt geschriebenen Anführungszeichen",,"Letztes Feld, das ein direkt geschriebenes Komma hat"</pre>
      <p>Ansonsten kann <em>Trennzeichen</em> ein oder mehrere Zeichen enthalten (Groß-/Kleinschreibung-sensitiv), um zu bestimmen, wo die Abgrenzungen zwischen den Teilzeichenketten in <em>EingabeVar</em> erfolgen sollen.</p>
      <p>Die Trennzeichen selbst werden nicht als Teil der Teilzeichenkette angesehen. Wenn zwischen zwei Trennzeichen in <em>EingabeVar</em> nichts vorhanden ist, wird die entsprechende Teilzeichenkette leer sein.</p>
      <p>Zum Beispiel: <code>`,</code> (ein escapezeichenversehenes Komma) würde die Zeichenkette jeweils bei einem Komma teilen. Im Vergleich dazu würde %A_Tab%%A_Space% eine neue Teilzeichenkette erstellen, wann immer ein Leer- oder Tabulatorzeichen in <em>EingabeVar</em> gefunden wird.</p>
      <p>Um eine Zeichenkette anstelle eines Zeichens als Trennung zu verwenden, verwenden Sie zunächst <a href="StrReplace.htm">StrReplace()</a> oder <a href="StringReplace.htm">StringReplace</a>, um alle Vorkommen der Zeichenkette mit einem einzelnen Zeichen zu ersetzen, das nie im Text genutzt wird. Zum Beispiel: ¢¤¥¦§©ª«®µ¶. Das folgende Beispiel zeigt, wie die Zeichenkette &lt;br&gt; als Trennung verwendet werden kann:</p>
      <pre>StringReplace, NeueHTML, HTMLZkette, &lt;br&gt;, ¢, All
Loop, parse, NeueHTML, ¢ <em>; Parst die Zeichenkette basierend auf dem Cent-Symbol.</em>
{
...
}</pre></dd>

  <dt>WegzulassendeZeichen</dt>
  <dd><p>Eine optionale Liste mit Zeichen (Groß-/Kleinschreibung-sensitiv), die bei jeder Teilzeichenkette am Anfang und Ende entfernt werden sollen. Wenn <em>WegzulassendeZeichen</em> beispielsweise %A_Space%%A_Tab% wäre, wird bei jeder abgerufenen Teilzeichenkette Leer- oder Tabulatorzeichen am Anfang und Ende (aber nicht in der Mitte) entfernt.</p>
    <p>Wenn <em>Trennzeichen</em> leer ist, gibt <em>WegzulassendeZeichen</em> an, welche Zeichen ignoriert werden sollen (die Schleife wird diese nicht sehen).</p>
    <p>Im Gegensatz zum letzten Parameter der meisten anderen Befehle müssen Kommas in <em>WegzulassendeZeichen</em> mit einem Escapezeichen versehen werden (`,).</p></dd>

</dl>

<h2 id="Remarks">Bemerkungen</h2>
<p>Eine zeichenkettenparsende Schleife ist nützlich, wenn Sie alle Felder in einer Zeichenkette einzeln abarbeiten wollen. Eine parsende Schleife verbraucht weniger Speicher als <a href="StrSplit.htm">StrSplit()</a> oder <a href="StringSplit.htm">StringSplit</a> (da diese ein permanentes <a href="../misc/Arrays.htm#object-based">Array</a> oder <a href="../misc/Arrays.htm#pseudo">Pseudo-Array</a> erzeugen) und ist in den meisten Fällen leichter zu verwenden.</p>
<p id="LoopField">Die interne Variable <strong>A_LoopField</strong> ist nur in einer parsenden Schleife von Bedeutung. Sie enthält den Inhalt der aktuellen Teilzeichenkette (Feld) aus <em>EingabeVar</em>. Wenn eine innere parsende Schleife von einer äußeren parsenden Schleife umschlossen ist, hat das Feld der innersten Schleife Vorrang.</p>
<p>Zwar gibt es nicht die interne Variable "A_LoopDelimiter", allerdings zeigt das Beispiel ganz unten, wie man ermitteln kann, welche Trennung bei jedem Feld verwendet wurde.</p>
<p><em>EingabeVar</em> oder ihre Felder können eine unbegrenzte Größe haben. Wenn sich der Inhalt von <em>EingabeVar</em> während einer Schleife ändert, wird die Schleife die Änderungen nicht berücksichtigen, weil sie eine temporäre Kopie des originalen Inhalts abarbeitet.</p>
<p>Mit dem <a href="Sort.htm">Sort</a>-Befehl können die Felder vor dem Parsen neu angeordnet werden.</p>
<p>Auf der <a href="Loop.htm">Loop</a>-Seite finden Sie Informationen zu <a href="Block.htm">Blöcken</a>, <a href="Break.htm">Break</a>, <a href="Continue.htm">Continue</a> und A_Index (sie können in jeder Schleifenvariante verwendet werden).</p>
<h2 id="Related">Siehe auch</h2>
<p><a href="StrSplit.htm">StrSplit()</a>, <a href="LoopReadFile.htm">dateilesende Schleife</a>, <a href="Loop.htm">Loop</a>, <a href="Break.htm">Break</a>, <a href="Continue.htm">Continue</a>, <a href="Block.htm">Blöcke</a>, <a href="Sort.htm">Sort</a>, <a href="FileSetAttrib.htm">FileSetAttrib</a>, <a href="FileSetTime.htm">FileSetTime</a>, <a href="StringSplit.htm">StringSplit</a></p>
<h2 id="Examples">Beispiele</h2>
<div class="ex" id="ExBasic">
<p><a class="ex_number" href="#ExBasic"></a> Parst eine kommagetrennte Zeichenkette.</p>
<pre>Farben := "rot,grün,blau"
Loop, parse, Farben, `,
{
    MsgBox, Farbnummer %A_Index% ist %A_LoopField%.
}</pre>
</div>

<div class="ex" id="ExFileRead">
<p><a class="ex_number" href="#ExFileRead"></a> Liest den Inhalt einer Variable zeilenweise aus (so ähnlich wie eine <a href="LoopReadFile.htm">dateilesende</a> Schleife). Mit <a href="FileRead.htm">FileRead</a> kann eine Datei in eine Variable geladen werden.</p>
<pre>Loop, parse, DateiInhalt, `n, `r  <em>; Durch die Angabe von `n vor `r können sowohl Windows- als auch Unix-Dateien geparst werden.</em>
{
    MsgBox, 4, , Zeilennummer %A_Index% ist %A_LoopField%.`n`nWeiter?
    IfMsgBox, No, break
}</pre>
</div>

<div class="ex" id="ExClipboard">
<p><a class="ex_number" href="#ExClipboard"></a> Dieses Beispiel ist das gleiche wie oben, außer dass es für die Zwischenablage ist. Es ist nützlich, wann immer die Zwischenablage Dateien enthält, wie z. B. solche, die von einem offenen Explorer-Fenster kopiert wurden (das Programm wandelt solche Dateien automatisch in ihre Dateinamen um).</p>
<pre>Loop, parse, clipboard, `n, `r
{
    MsgBox, 4, , Dateinummer %A_Index% ist %A_LoopField%.`n`nWeiter?
    IfMsgBox, No, break
}</pre>
</div>

<div class="ex" id="ExCSV">
<p><a class="ex_number" href="#ExCSV"></a> Parst eine Datei mit kommagetrennten Werten (CSV).</p>
<pre>Loop, read, C:\Datenbank-Export.csv
{
    ZeileNummer := A_Index
    Loop, parse, A_LoopReadLine, CSV
    {
        MsgBox, 4, , Feld %ZeileNummer%-%A_Index% ist:`n%A_LoopField%`n`nWeiter?
        IfMsgBox, No
            return
    }
}</pre>
</div>

<div class="ex" id="ExDelimiter">
<p><a class="ex_number" href="#ExDelimiter"></a> Ermittelt, welche Trennung verwendet wurde.</p>
<pre><em>; Initialisiert die zu durchsuchenden Zeichenkette.</em>
Farben := "Rot,Grün|Blau;Gelb|Cyan,Magenta"
<em>; Initialisiert einen Zähler, um unsere aktuelle Zeichenkettenposition im Auge zu behalten.</em>
Position := 0

Loop, Parse, Farben, `,|;
{
    <em>; Berechnet die Position der Trennung am Ende dieses Feldes.</em>
    Position += StrLen(A_LoopField) + 1
    <em>; Ermittelt die Trennung, die von der parsenden Schleife gefunden wurde.</em>
    Trennung := SubStr(Farben, Position, 1)

    MsgBox Feld: %A_LoopField%`Trennung: %Trennung%
}</pre>
</div>

</body>
</html>
