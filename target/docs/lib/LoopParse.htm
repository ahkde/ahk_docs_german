<!DOCTYPE HTML>
<html lang="de">
<head>
<title>Loop (Zeichenkette parsen) - Syntax &amp; Verwendung | AutoHotkey</title>
<meta name="description" content="Die Loop-Parse-Anweisung ruft Teile (Felder) einer Zeichenkette nacheinander ab." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga4.js" type="text/javascript"></script>
</head>
<body>

<h1>Loop (Zeichenkette parsen)</h1>

<p>Ruft Teile (Felder) einer Zeichenkette nacheinander ab.</p>

<pre class="Syntax"><span class="func">Loop, Parse</span>, EingabeVar <span class="optional">, Trennzeichen, WegzulassendeZeichen</span></pre>
<h2 id="Parameters">Parameter</h2>
<dl>

  <dt>Parse</dt>
  <dd><p>Das Wort PARSE. Dieser Parameter darf im Gegensatz zu anderen Schleifenvarianten keine Variablenreferenz sein, die in das Wort PARSE aufgelöst wird.</p></dd>

  <dt>EingabeVar</dt>
  <dd>
    <p>Name der Eingabevariable, deren Inhalt geparst werden soll. Umschließen Sie den Namen nicht mit Prozentzeichen, es sei denn, Sie wollen den <em>Inhalt</em> der Variable als Namen verwenden.</p>
    <p><span class="ver">[v1.1.21+]</span>: Dieser Parameter kann ein <a href="../Variables.htm#Expressions">Ausdruck</a> sein, allerdings muss dafür das <a href="../Language.htm#-expression">Prozent-Leerzeichen-Präfix</a> verwendet werden, z.B. <code>% "rot,grün,blau"</code>.</p>
  </dd>

  <dt>Trennzeichen</dt>
  <dd><p>Wenn leer oder weggelassen, wird jedes Zeichen in <em>EingabeVar</em> als einzelne Teilzeichenkette behandelt.</p>
      <p>Wenn dieser Parameter die Zeichenkette <strong>CSV</strong> ist, wird zum Parsen von <em>EingabeVar</em> das Standardformat für kommagetrennte Werte (Comma-Separated Values) verwendet. Das folgende Beispiel ist eine CSV-Zeile, die mit MS Excel erstellt wurde:</p>
<pre class="no-highlight">"Erstes Feld",ZweitesFeld,"Das Wort ""Spezial"" in direkt geschriebenen Anführungszeichen",,"Letztes Feld, mit direkt geschriebenem Komma"</pre>
      <p>Andernfalls geben Sie für <em>Trennzeichen</em> ein oder mehrere Zeichen an (Groß-/Kleinschreibung-sensitiv). Jedes dieser Zeichen wird verwendet, um zu bestimmen, wo die Grenzen zwischen den Teilzeichenketten in <em>EingabeVar</em> liegen.</p>
      <p>Die Trennzeichen selbst werden nicht als Teil der Teilzeichenkette betrachtet. Wenn zwischen zwei Trennzeichen in <em>EingabeVar</em> nichts steht, ist die entsprechende Teilzeichenkette leer.</p>
      <p>Zum Beispiel: <code>`,</code> (ein escapezeichenversehenes Komma) würde die Zeichenkette an jedem Komma teilen, während <code>%A_Tab%%A_Space%</code> an jedem Leer- oder Tabulatorzeichen in <em>EingabeVar</em> eine neue Teilzeichenkette beginnen würde.</p>
      <p>Um eine Zeichenkette anstelle eines Zeichens als Trennung zu verwenden, ersetzen Sie zunächst mit <a href="StrReplace.htm">StrReplace()</a> oder <a href="StringReplace.htm">StringReplace</a> alle Vorkommen der Zeichenkette mit einem einzelnen Zeichen, das im Text nie verwendet wird. Zum Beispiel: ¢¤¥¦§©ª«®µ¶. Das folgende Beispiel zeigt, wie die Zeichenkette &lt;br&gt; als Trennung verwendet werden kann:</p>
      <pre>StringReplace, NeueHTML, HTMLZkette, &lt;br&gt;, ¢, All
Loop, parse, NeueHTML, ¢ <em>; Die Zeichenkette via Cent-Symbol parsen.</em>
{
...
}</pre></dd>

  <dt>WegzulassendeZeichen</dt>
  <dd><p>Eine optionale Liste von Zeichen (Groß-/Kleinschreibung-sensitiv), die bei jeder Teilzeichenkette am Anfang und Ende entfernt werden sollen. Wenn <em>WegzulassendeZeichen</em> z.B. <code>%A_Space%%A_Tab%</code> ist, wird bei jeder abgerufenen Teilzeichenkette Leer- oder Tabulatorzeichen am Anfang und Ende (aber nicht in der Mitte) entfernt.</p>
    <p>Wenn <em>Trennzeichen</em> leer ist, gibt <em>WegzulassendeZeichen</em> an, welche Zeichen ignoriert werden (die Schleife wird diese nicht sehen).</p>
    <p>Im Gegensatz zum letzten Parameter der meisten anderen Befehle müssen Kommas in <em>WegzulassendeZeichen</em> mit einem Escapezeichen versehen werden (<code>`,</code>).</p></dd>

</dl>

<h2 id="Remarks">Bemerkungen</h2>
<p>Eine parsende Schleife ist nützlich, wenn alle Felder in einer Zeichenkette nacheinander abgearbeitet werden sollen. Eine parsende Schleife verbraucht weniger Speicher als <a href="StrSplit.htm">StrSplit()</a> oder <a href="StringSplit.htm">StringSplit</a> (da diese ein permanentes <a href="../misc/Arrays.htm#object-based">Array</a> oder <a href="../misc/Arrays.htm#pseudo">Pseudo-Array</a> erzeugen) und ist in den meisten Fällen einfacher zu benutzen.</p>
<p id="LoopField">Die interne Variable <strong>A_LoopField</strong> ist nur in einer parsenden Schleife von Bedeutung. Sie enthält den Inhalt der aktuellen Teilzeichenkette (Feld) aus <em>EingabeVar</em>. Wenn eine innere parsende Schleife von einer äußeren parsenden Schleife umschlossen ist, hat das Feld der innersten Schleife Vorrang.</p>
<p>Es gibt keine interne Variable namens A_LoopDelimiter, allerdings zeigt das Beispiel ganz unten, wie man herausfindet, welche Trennung für jedes Feld verwendet wurde.</p>
<p><em>EingabeVar</em> oder ihre Felder können unbegrenzt groß sein. Wenn sich der Inhalt von <em>EingabeVar</em> während der Schleifenausführung ändert, wird die Schleife die Änderungen nicht "sehen", da sie eine temporäre Kopie des Originalinhalts abarbeitet.</p>
<p>Mit dem <a href="Sort.htm">Sort</a>-Befehl können die Felder vor dem Parsen neu sortiert werden.</p>
<p>Auf der <a href="Loop.htm">Loop</a>-Seite finden Sie Informationen zu <a href="Block.htm">Blöcken</a>, <a href="Break.htm">Break</a>, <a href="Continue.htm">Continue</a> und A_Index (die in jeder Schleifenvariante verwendet werden kann).</p>
<h2 id="Related">Siehe auch</h2>
<p><a href="StrSplit.htm">StrSplit()</a>, <a href="LoopReadFile.htm">dateilesende Schleife</a>, <a href="Loop.htm">Loop</a>, <a href="Break.htm">Break</a>, <a href="Continue.htm">Continue</a>, <a href="Block.htm">Blöcke</a>, <a href="Sort.htm">Sort</a>, <a href="FileSetAttrib.htm">FileSetAttrib</a>, <a href="FileSetTime.htm">FileSetTime</a>, <a href="StringSplit.htm">StringSplit</a></p>
<h2 id="Examples">Beispiele</h2>
<div class="ex" id="ExBasic">
<p><a class="ex_number" href="#ExBasic"></a> Parst eine kommagetrennte Zeichenkette.</p>
<pre>Farben := "rot,grün,blau"
Loop, parse, Farben, `,
{
    MsgBox, Farbnummer %A_Index% ist %A_LoopField%.
}</pre>
</div>

<div class="ex" id="ExFileRead">
<p><a class="ex_number" href="#ExFileRead"></a> Liest den Inhalt einer Variable zeilenweise aus (ähnlich einer <a href="LoopReadFile.htm">dateilesenden Schleife</a>). Mit <a href="FileRead.htm">FileRead</a> kann eine Datei in eine Variable geladen werden.</p>
<pre>Loop, parse, DateiInhalt, `n, `r  <em>; Durch Angabe von `n vor `r können sowohl Windows- als auch Unix-Dateien geparst werden.</em>
{
    MsgBox, 4, , Zeilennummer %A_Index% ist %A_LoopField%.`n`nWeiter?
    IfMsgBox, No, break
}</pre>
</div>

<div class="ex" id="ExClipboard">
<p><a class="ex_number" href="#ExClipboard"></a> Dies ist dasselbe wie das Beispiel oben, aber für die <a href="../misc/Clipboard.htm">Zwischenablage</a>. Es ist nützlich, wenn sich in der Zwischenablage Dateien befinden, die z.B. aus einem geöffneten Explorer-Fenster kopiert wurden (das Programm wandelt solche Dateien automatisch in ihre Dateinamen um).</p>
<pre>Loop, parse, clipboard, `n, `r
{
    MsgBox, 4, , Dateinummer %A_Index% ist %A_LoopField%.`n`nWeiter?
    IfMsgBox, No, break
}</pre>
</div>

<div class="ex" id="ExCSV">
<p><a class="ex_number" href="#ExCSV"></a> Parst eine Datei, die kommagetrennte Werte enthält (CSV).</p>
<pre>Loop, read, C:\Datenbank-Export.csv
{
    ZeileNummer := A_Index
    Loop, parse, A_LoopReadLine, CSV
    {
        MsgBox, 4, , Feld %ZeileNummer%-%A_Index% ist:`n%A_LoopField%`n`nWeiter?
        IfMsgBox, No
            return
    }
}</pre>
</div>

<div class="ex" id="ExDelimiter">
<p><a class="ex_number" href="#ExDelimiter"></a> Ermittelt, welche Trennung verwendet wurde.</p>
<pre><em>; Zeichenkette zum Durchsuchen initialisieren.</em>
Farben := "Rot,Grün|Blau;Gelb|Cyan,Magenta"
<em>; Zähler für aktuelle Zeichenkettenposition initialisieren.</em>
Position := 0

Loop, Parse, Farben, `,|;
{
    <em>; Position der Trennung am Ende dieses Feldes berechnen.</em>
    Position += StrLen(A_LoopField) + 1
    <em>; Trennung abrufen, die von der parsenden Schleife gefunden wurde.</em>
    Trennung := SubStr(Farben, Position, 1)

    MsgBox Feld: %A_LoopField%`Trennung: %Trennung%
}</pre>
</div>

</body>
</html>
