<!DOCTYPE HTML>
<html lang="de">
<head>
<title>Reguläres Objekt - Methoden &amp; Eigenschaften | AutoHotkey</title>
<meta name="description" content="Das reguläre Objekt bietet eine Schnittstelle für Aktionen wie z.B. Schlüssel einfügen oder entfernen, Anzahl der Schlüssel abrufen, Objekt klonen, etc." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga4.js" type="text/javascript"></script>
</head>
<body>

<h1>Objekt</h1>
<p>In AutoHotkey ist der reguläre Objektdatentyp ein assoziatives Array, dessen Verhalten <a href="../Objects.htm#Custom_Objects">individuell angepasst werden kann</a>. Standardmäßig unterstützen alle Objekte, die mit <code>{}</code>, <code>[]</code>, <code>Object()</code> und <code>Array()</code> erstellt wurden, die folgenden Methoden, Eigenschaften und Funktionen.</p>

<h2 id="toc">Inhaltsverzeichnis</h2>
<ul class="indent">
  <li><a href="#Methods">Methoden</a>:
    <ul>
      <li><a href="#InsertAt">InsertAt</a>: Fügt einen oder mehrere Werte an einer Position innerhalb eines linearen Arrays ein.</li>
      <li><a href="#RemoveAt">RemoveAt</a>: Entfernt Elemente an einer Position innerhalb eines linearen Arrays.</li>
      <li><a href="#Push">Push</a>: Fügt Werte am Ende eines Arrays an.</li>
      <li><a href="#Pop">Pop</a>: Entfernt das letzte Array-Element und gibt es zurück.</li>
      <li><a href="#Delete">Delete</a>: Entfernt Schlüssel-Wert-Paare aus einem Objekt.</li>
      <li><a href="#MinMaxIndex">MinIndex / MaxIndex</a>: Gibt den niedrigsten/höchsten Integer-Schlüssel zurück, falls vorhanden.</li>
      <li><a href="#Length">Length</a>: Gibt die Länge eines linearen Arrays zurück.</li>
      <li><a href="#Count">Count</a>: Gibt die Anzahl der Schlüssel-Wert-Paare in einem Objekt zurück.</li>
      <li><a href="#SetCapacity">SetCapacity</a>: Passt die Kapazität eines Objekts oder eines seiner Felder an.</li>
      <li><a href="#GetCapacity">GetCapacity</a>: Gibt die Kapazität eines Objekts oder eines seiner Felder zurück.</li>
      <li><a href="#GetAddress">GetAddress</a>: Gibt die aktuelle Adresse des Zeichenkettenpuffers eines Feldes zurück.</li>
      <li><a href="#NewEnum">_NewEnum</a>: Gibt einen neuen Enumerator zum Enumerieren von Schlüssel-Wert-Paaren zurück.</li>
      <li><a href="#HasKey">HasKey</a>: Gibt 1 (true) zurück, wenn einem Schlüssel ein Wert in einem Objekt zugeordnet ist.</li>
      <li><a href="#Clone">Clone</a>: Gibt eine flache Kopie eines Objekts zurück.</li>
      <li><a class="deprecated" href="#Insert" title="Veraltet. Verwenden Sie stattdessen InsertAt, Push, ObjRawSet oder eine einfache Zuweisung.">Insert</a> (veraltet): Fügt Schlüssel-Wert-Paare in ein Objekt ein.</li>
      <li><a class="deprecated" href="#Remove" title="Veraltet. Verwenden Sie stattdessen RemoveAt, Delete oder Pop.">Remove</a> (veraltet): Entfernt Schlüssel-Wert-Paare aus einem Objekt.</li>
    </ul>
  </li>
  <li><a href="#Properties">Eigenschaften</a>:
    <ul>
      <li><a href="#Base">Base</a>: Ermittelt oder setzt das Basisobjekt eines Objekts.</li>
    </ul>
  </li>
  <li><a href="#Functions">Funktionen</a>:
    <ul>
      <li><a href="#RawGet">ObjRawGet</a>: Ruft den Wert ab, der einem Schlüssel in einem Objekt zugeordnet ist.</li>
      <li><a href="#RawSet">ObjRawSet</a>: Speichert oder überschreibt ein Schlüssel-Wert-Paar in einem Objekt.</li>
      <li><a href="#GetBase">ObjGetBase</a>: Gibt das Basisobjekt eines Objekts zurück.</li>
      <li><a href="#SetBase">ObjSetBase</a>: Setzt das Basisobjekt eines Objekts.</li>
    </ul>
  </li>
  <li><a href="#Remarks">Bemerkungen</a></li>
</ul>

<h2 id="Methods">Methoden</h2>
<div class="methodShort" id="InsertAt"><h3>InsertAt <span class="ver">[v1.1.21+]</span></h3>
<p>Fügt einen oder mehrere Werte an einer Position innerhalb eines linearen Arrays ein.</p>
<pre class="Syntax">Objekt.<span class="func">InsertAt</span>(Pos, Wert1 <span class="optional">, Wert2, ... Wert<i>N</i></span>)</pre>
<dl>
  <dt>Pos</dt>
  <dd><p>Die Position, an der <em>Wert1</em> eingefügt werden soll. Nachfolgende Werte werden an Pos+1, Pos+2 usw. eingefügt.</p></dd>
  <dt>Wert1 ...</dt>
  <dd><p>Ein oder mehrere Werte, die eingefügt werden sollen. Um ein Array von Werten einzufügen, übergeben Sie <code><a href="../Functions.htm#VariadicCall">dasArray*</a></code> als letzten Parameter.</p></dd>
</dl>
<p>InsertAt ist das Gegenstück zu <a href="#RemoveAt">RemoveAt</a>.</p>
<p>Da Objekte assoziative Arrays sind, ist <em>Pos</em> außerdem der Integer-Schlüssel, der <em>Wert1</em> zugeordnet wird. Alle Elemente, die sich an oder rechts von <em>Pos</em> befinden, werden um genau die Anzahl der Wertparameter nach rechts verschoben, selbst wenn einige Werte fehlen (d.h. wenn das Objekt ein lückenhaftes Array ist). Zum Beispiel:</p>
<pre>x := []
x.InsertAt(1, "A", "B") <em>; =&gt;  ["A", "B"]</em>
x.InsertAt(2, "C")      <em>; =&gt;  ["A", "C", "B"]</em>

<em>; Lückenhafte/leere Elemente bleiben erhalten:</em>
x := ["A", , "C"]
x.InsertAt(2, "B")      <em>; =&gt;  ["A", "B",    , "C"]</em>

x := ["C"]
x.InsertAt(1, , "B")    <em>; =&gt;  [   , "B", "C"]</em></pre>
<p>InsertAt sollte nur verwendet werden, wenn die Integer-Schlüssel des Objekts Positionen in einem linearen Array repräsentieren. Wenn das Objekt willkürliche Integer-Schlüssel wie IDs oder Handles enthält, wird InsertAt wahrscheinlich unerwünschte Nebeneffekte haben. Zum Beispiel:</p>
<pre>x := [], handleX := 0x4321, handleY := 0x1234
x.InsertAt(handleX, "A")
MsgBox % x[handleX]  <em>; A - Okay</em>
x.InsertAt(handleY, "B")
MsgBox % x[handleX]  <em>; Leer</em>
MsgBox % x[handleX+1]  <em>; Dies ist die neue "Position" von "A"</em></pre>
<p>InsertAt hat keinen Effekt auf Zeichenketten- oder Objektschlüssel und kann daher problemlos für Objekte mit unterschiedlichen Schlüsseltypen verwendet werden.</p>
</div>

<div class="methodShort" id="RemoveAt"><h3>RemoveAt <span class="ver">[v1.1.21+]</span></h3>
<p>Entfernt Elemente an einer Position innerhalb eines linearen Arrays.</p>
<pre class="Syntax">Objekt.<span class="func">RemoveAt</span>(Pos <span class="optional">, Länge</span>)</pre>
<dl>
  <dt>Pos</dt>
  <dd><p>Die Position eines oder mehrerer Werte, die entfernt werden sollen.</p></dd>
  
  <dt>Länge</dt>
  <dd><p>Die Länge des Wertebereichs, der entfernt werden soll. Es werden die Elemente von <code>Pos</code> bis <code>Pos+Länge-1</code> entfernt. Lässt man diesen Parameter weg, wird nur ein Element entfernt.</p></dd>
</dl>
<p>Lässt man <em>Länge</em> weg, wird der an <em>Pos</em> entfernte Wert zurückgegeben (leer, wenn es keinen gibt). Andernfalls ist der Rückgabewert die Anzahl der entfernten Elemente, die Werte enthielten. Die Anzahl kann bei einem lückenhaften Array von <em>Länge</em> abweichen, liegt aber immer im Bereich von 0 bis <em>Länge</em>.</p>
<p>RemoveAt ist das Gegenstück zu <a href="#InsertAt">InsertAt</a>.</p>
<p>Die restlichen Elemente rechts von <em>Pos</em> werden um den via <em>Länge</em> definierten Wert (oder standardmäßig um 1) nach links verschoben, selbst wenn einige Elemente im entfernten Bereich keine Werte haben. Zum Beispiel:</p>
<pre>x := ["A", "B"]
MsgBox % x.RemoveAt(1)  <em>; A</em>
MsgBox % x[1]           <em>; B</em>

x := ["A", , "C"]
MsgBox % x.RemoveAt(1, 2)  <em>; 1</em>
MsgBox % x[1]              <em>; C</em></pre>
<p>RemoveAt sollte nur verwendet werden, wenn die Integer-Schlüssel des Objekts Positionen in einem linearen Array repräsentieren. Wenn das Objekt willkürliche Integer-Schlüssel wie IDs oder Handles enthält, wird RemoveAt wahrscheinlich unerwünschte Nebeneffekte haben. Zum Beispiel:</p>
<pre>x := {0x4321: "A", 0x1234: "B"}
MsgBox % x.RemoveAt(0x1234) <em>; B</em>
MsgBox % x[0x4321]          <em>; Leer</em>
MsgBox % x[0x4321-1]        <em>; A</em></pre>
<p>RemoveAt hat keinen Effekt auf Zeichenketten- oder Objektschlüssel und kann daher problemlos für Objekte mit unterschiedlichen Schlüsseltypen verwendet werden.</p>
</div>

<div class="methodShort" id="Push"><h3>Push <span class="ver">[v1.1.21+]</span></h3>
<p>Fügt Werte am Ende eines Arrays an.</p>
<pre class="Syntax">Objekt.<span class="func">Push</span>(<span class="optional"> Wert, Wert2, ..., Wert<i>N</i> </span>)</pre>
<dl>
  <dt>Wert ...</dt>
  <dd><p>Ein oder mehrere Werte, die eingefügt werden sollen. Um ein Array von Werten einzufügen, übergeben Sie <code><a href="../Functions.htm#VariadicCall">dasArray*</a></code> als letzten Parameter.</p></dd>
</dl>
<p>Der Rückgabewert ist die Position des zuletzt eingefügten Wertes. Kann negativ sein, wenn das Array nur Elemente mit negativem Index enthält.</p>
<p>Der erste Wert wird an Position 1 eingefügt, wenn das Array leer ist oder nur Zeichenketten- oder Objektschlüssel enthält.</p>
<p>Andernfalls wird der erste Wert an <code>Objekt.MaxIndex() + 1</code> eingefügt, selbst wenn diese Position negativ oder Null ist. Wenn dies nicht erwünscht ist und das Objekt negative Schlüssel enthält, kann stattdessen <code>Objekt.InsertAt(Objekt.Length() + 1, ...)</code> verwendet werden.</p>
</div>

<div class="methodShort" id="Pop"><h3>Pop <span class="ver">[v1.1.21+]</span></h3>
<p>Entfernt das letzte Array-Element und gibt es zurück.</p>
<pre class="Syntax">Wert := Objekt.<span class="func">Pop</span>()</pre>
<p>Wenn es keine Array-Elemente gibt, ist der Rückgabewert eine leere Zeichenkette. Andernfalls ist es äquivalent zu:</p>
<pre>Wert := Objekt.RemoveAt(Objekt.Length())</pre>
</div>

<div class="methodShort" id="Delete"><h3>Delete <span class="ver">[v1.1.21+]</span></h3>
<p>Entfernt Schlüssel-Wert-Paare aus einem Objekt.</p>
<pre class="Syntax">
Objekt.<span class="func">Delete</span>(Schlüssel)
Objekt.<span class="func">Delete</span>(ErsterSchlüssel, LetzterSchlüssel)
</pre>
<dl>
  <dt>Schlüssel</dt>
  <dd><p>Ein beliebiger Schlüssel.</p></dd>
  <dt>ErsterSchlüssel, LetzterSchlüssel</dt>
  <dd><p>Ein gültiger Bereich von Integer- oder Zeichenkettenschlüsseln, wobei <em>ErsterSchlüssel</em> &lt;= <em>LetzterSchlüssel</em> ist. Beide Schlüssel müssen vom selben Typ sein.</p></dd>
</dl>
<p>Bei nur einem Parameter wird der entfernte Wert zurückgegeben (leer, wenn es keinen gibt). Andernfalls ist der Rückgabewert die Anzahl der gefundenen und entfernten Schlüssel.</p>
<p>Im Gegensatz zu <a href="#RemoveAt">RemoveAt</a> hat Delete keinen Effekt auf Schlüssel-Wert-Paare, die es nicht entfernt. Zum Beispiel:</p>
<pre>x := ["A", "B"]
MsgBox % x.RemoveAt(1)  <em>; A</em>
MsgBox % x[1]           <em>; B</em>

x := ["A", "B"]
MsgBox % x.Delete(1)    <em>; A</em>
MsgBox % x[1]           <em>; Leer</em></pre>
</div>

<div class="methodShort" id="MinMaxIndex"><h3>MinIndex / MaxIndex <span class="ver">[AHK_L 31+]</span></h3>
<p>Gibt den niedrigsten/höchsten Integer-Schlüssel zurück, falls vorhanden.</p>
<pre class="Syntax">
MinIndex := Objekt.<span class="func">MinIndex</span>()
MaxIndex := Objekt.<span class="func">MaxIndex</span>()
</pre>
<p>Wenn keine Schlüssel vorhanden sind, wird eine leere Zeichenkette zurückgegeben.</p></div>

<div class="methodShort" id="Length"><h3>Length <span class="ver">[v1.1.21+]</span></h3>
<p>Gibt die Länge eines linearen Arrays zurück.</p>
<pre class="Syntax">Länge := Objekt.<span class="func">Length</span>()</pre>
<p>Diese Methode gibt die Länge eines linearen Arrays zurück, beginnend bei Position 1, d.h. entweder den höchsten positiven Integer-Schlüssel im Objekt, oder 0, wenn es keinen gibt.</p>
<pre>
MsgBox % ["A", "B", "C"].Length()  <em>;  3</em>
MsgBox % ["A",    , "C"].Length()  <em>;  3</em>
MsgBox % {-10: 0, 10: 0}.Length()  <em>; 10</em>
MsgBox % {-10: 0, -1: 0}.Length()  <em>;  0</em>
</pre></div>

<div class="methodShort" id="Count"><h3>Count <span class="ver">[v1.1.29+]</span></h3>
<p>Gibt die Anzahl der Schlüssel-Wert-Paare in einem Objekt zurück.</p>
<pre class="Syntax">Anzahl := Objekt.<span class="func">Count</span>()</pre>
<p>Beispiele:</p>
<pre>
MsgBox % {A: 1, Z: 26}.Count()    <em>;  2</em>
MsgBox % ["A", "B", "C"].Count()  <em>;  3</em>
MsgBox % ["A",    , "C"].Count()  <em>;  2</em>
</pre>
</div>

<div class="methodShort" id="SetCapacity"><h3>SetCapacity <span class="ver">[AHK_L 31+]</span></h3>
<p>Passt die Kapazität eines Objekts oder eines seiner Felder an.</p>
<pre class="Syntax">
Objekt.<span class="func">SetCapacity</span>(MaxElemente)
Objekt.<span class="func">SetCapacity</span>(Schlüssel, ByteGröße)
</pre>
<dl>
	<dt>MaxElemente</dt>
	<dd><p>Die maximale Anzahl von Schlüssel-Wert-Paaren, die das Objekt enthalten kann, bevor es automatisch erweitert werden muss. Wenn diese Anzahl kleiner als die aktuelle Anzahl von Schlüssel-Wert-Paaren ist, wird stattdessen dieser Wert verwendet und ungenutzter Speicher freigegeben.</p></dd>
	<dt>Schlüssel</dt>
	<dd><p>Ein gültiger Schlüssel.</p></dd>
	<dt>ByteGröße</dt>
	<dd><p>Die neue Größe in Bytes für den Zeichenkettenpuffer des Feldes, ohne den Null-Terminator. Wenn das Feld nicht existiert, wird es erstellt. Wenn <i>ByteGröße</i> 0 ist, wird der Pufferspeicher freigegeben, aber das leere Feld nicht entfernt. Wenn <i>ByteGröße</i> kleiner als die aktuelle Größe ist, werden überschüssige Daten abgeschnitten; andernfalls werden alle vorhandenen Daten beibehalten.</p></dd>
</dl>
<p>Der Rückgabewert ist bei Erfolg die neue Kapazität, andernfalls eine leere Zeichenkette.</p>
</div>

<div class="methodShort" id="GetCapacity"><h3>GetCapacity <span class="ver">[AHK_L 31+]</span></h3>
<p>Gibt die Kapazität eines Objekts oder eines seiner Felder zurück.</p>
<pre class="Syntax">
MaxElemente := Objekt.<span class="func">GetCapacity</span>()
ByteGröße := Objekt.<span class="func">GetCapacity</span>(Schlüssel)
</pre>
<p>Wenn das Feld nicht existiert oder keine Zeichenkette enthält, wird eine leere Zeichenkette zurückgegeben.</p></div>

<div class="methodShort" id="GetAddress"><h3>GetAddress <span class="ver">[AHK_L 31+]</span></h3>
<p>Gibt die aktuelle Adresse des Zeichenkettenpuffers eines Feldes zurück.</p>
<pre class="Syntax">Ptr := Objekt.<span class="func">GetAddress</span>(Schlüssel)</pre></div>

<div class="methodShort" id="NewEnum"><h3>_NewEnum <span class="ver">[AHK_L 49+]</span></h3>
<p>Gibt einen neuen <a href="Enumerator.htm">Enumerator</a> zum Enumerieren von Schlüssel-Wert-Paaren eines Objekts zurück.</p>
<pre class="Syntax">Enum := Objekt.<span class="func">_NewEnum</span>()</pre>
<p>Diese Methode wird normalerweise nicht direkt aufgerufen, sondern über die <a href="For.htm">For-Schleife</a>.</p></div>

<div class="methodShort" id="HasKey"><h3>HasKey <span class="ver">[AHK_L 53+]</span></h3>
<p>Gibt 1 (true) zurück, wenn einem Schlüssel ein Wert (auch "") innerhalb eines Objekts zugeordnet ist, andernfalls 0 (false).</p>
<pre class="Syntax">Objekt.<span class="func">HasKey</span>(Schlüssel)</pre></div>

<div class="methodShort" id="Clone"><h3>Clone <span class="ver">[AHK_L 60+]</span></h3>
<p>Gibt eine flache Kopie eines Objekts zurück.</p>
<pre class="Syntax">Klon := Objekt.<span class="func">Clone</span>()</pre></div>

<div class="methodShort" id="Insert"><h3>Insert <span class="ver">[AHK_L 31+]</span></h3>
<div class="warning"><strong>Veraltet:</strong> Insert ist nicht für neue Skripte empfohlen. Verwenden Sie stattdessen <a href="#InsertAt">InsertAt</a>, <a href="#Push">Push</a>, <a href="#RawSet">ObjRawSet</a> oder eine einfache Zuweisung.</div>
<p>Fügt Schlüssel-Wert-Paare in das Objekt ein, und passt existierende Schlüssel automatisch an, wenn ein Integer-Schlüssel angegeben ist.</p>
<pre class="Syntax">
Objekt.<span class="func">Insert</span>(Pos, Wert1 <span class="optional">, Wert2, ... Wert<i>N</i> </span>)
Objekt.<span class="func">Insert</span>(Wert)
Objekt.<span class="func">Insert</span>(ZketteOderObjektSchlüssel, Wert)
</pre>
<p>Das Verhalten von Insert hängt von der Anzahl und dem Typ seiner Parameter ab:</p>
<ul>
  <li>Wenn mehrere Parameter angegeben sind und der erste Parameter ein Integer ist, verhält sich Insert wie <a href="#InsertAt">InsertAt</a>.</li>
  <li>Wenn mehrere Parameter angegeben sind und der erste Parameter kein Integer ist, verhält sich Insert wie <a href="#RawSet">ObjRawSet</a>.</li>
  <li>Wenn nur ein Parameter angegeben ist, verhält sich Insert wie <a href="#Push">Push</a>.</li>
</ul>
<p>Insert gibt 1 (true) zurück. In <span class="ver">[v1.1.21+]</span> wird eine Ausnahme ausgelöst, wenn eine Speicherreservierung fehlschlägt. Ältere Versionen gaben in diesem Fall eine leere Zeichenkette zurück.</p>
</div>

<div class="methodShort" id="Remove"><h3>Remove <span class="ver">[AHK_L 31+]</span></h3>
<div class="warning"><strong>Veraltet:</strong> Remove ist nicht für neue Skripte empfohlen. Verwenden Sie stattdessen <a href="#RemoveAt">RemoveAt</a>, <a href="#Delete">Delete</a> oder <a href="#Pop">Pop</a>.</div>
<p>Entfernt Schlüssel-Wert-Paare aus einem Objekt.</p>
<pre class="Syntax">Objekt.<span class="func">Remove</span>(ErsterSchlüssel, LetzterSchlüssel)</pre>
<p>Das Verhalten von Remove hängt von der Anzahl und dem Typ seiner Parameter ab:</p>
<ul>
  <li><code>Objekt.Remove(Integer)</code> verhält sich wie <code>Objekt.<a href="#RemoveAt">RemoveAt</a>(Integer)</code>.</li>
  <li><code>Objekt.Remove(Integer, "")</code> verhält sich wie <code>Objekt.<a href="#Delete">Delete</a>(Integer)</code>.</li>
  <li><code>Objekt.Remove(Integer1, Integer2)</code> verhält sich wie <code>Objekt.<a href="#RemoveAt">RemoveAt</a>(Integer1, Integer2 - Integer1 + 1)</code>.</li>
  <li><code>Objekt.Remove()</code> verhält sich wie <code>Objekt.<a href="#Pop">Pop</a>()</code>.</li>
  <li>Jede andere gültige Parameterkombination verhält sich wie <a href="#Delete">Delete</a>.</li>
</ul>
</div>

<h2 id="Properties">Eigenschaften</h2>
<div class="methodShort" id="Base"><h3>Base</h3>
<p>Ermittelt oder setzt das <a href="../Objects.htm#Custom_Objects">Basisobjekt</a> eines Objekts.</p>
<pre class="Syntax">Basisobjekt := Objekt.Base</pre>
<pre class="Syntax">Objekt.Base := Basisobjekt</pre>
<p><em>Basisobjekt</em> muss ein Objekt oder eine leere Zeichenkette sein.</p>
<p>Eigenschaften und Methoden, die via Basisobjekt definiert werden, sind nur während der Nutzung dieses Basisobjekts zugänglich. Eine Änderung der Basis von <em>Objekt</em> verändert daher auch die verfügbaren Eigenschaften und Methoden.</p>
<p>Siehe auch: <a href="#GetBase">ObjGetBase()</a>, <a href="#SetBase">ObjSetBase()</a></p>
</div>

<h2 id="Functions">Funktionen</h2>
<h3 id="RawGet">ObjRawGet <span class="ver">[v1.1.29+]</span></h3>
<p>Ruft den Wert ab, der einem Schlüssel in einem Objekt zugeordnet ist.</p>
<pre class="Syntax">Wert := <span class="func">ObjRawGet</span>(Objekt, Schlüssel)</pre>
<p>Wenn <em>Objekt</em> den <em>Schlüssel</em> nicht enthält, ist der Rückgabewert eine leere Zeichenkette. Es werden keine <a href="../Objects.htm#Meta_Functions">Metafunktionen</a> oder <a href="../Objects.htm#Custom_Classes_property">Eigenschaftsfunktionen</a> aufgerufen. Der Inhalt der Basisobjekte von <em>Objekt</em> wird nicht berücksichtigt, und da <a href="#Base">base</a> selbst <a href="../Objects.htm#base-key">standardmäßig</a> eine Eigenschaft ist (kein Schlüssel-Wert-Paar), wird es typischerweise nicht zurückgegeben.</p>
<p>Es wird eine Ausnahme ausgelöst, wenn <em>Objekt</em> vom falschen Typ ist.</p>

<h3 id="RawSet">ObjRawSet <span class="ver">[v1.1.21+]</span></h3>
<p>Speichert oder überschreibt ein Schlüssel-Wert-Paar in einem Objekt.</p>
<pre class="Syntax"><span class="func">ObjRawSet</span>(Objekt, Schlüssel, Wert)</pre>
<p>Mit dieser Funktion können Skripte die __Set-<a href="../Objects.htm#Meta_Functions">Metafunktion</a> und <a href="../Objects.htm#Custom_Classes_property">Eigenschaften</a> umgehen. Wenn dies nicht erforderlich ist, verwenden Sie stattdessen eine normale Zuweisung. Zum Beispiel: <code>Objekt[Schlüssel] := Wert</code></p>
<p>Da der Zweck darin besteht, Metafunktionen zu umgehen, handelt es sich hierbei nur um eine Funktion, nicht um eine Methode. Der Aufruf einer internen Methode bewirkt in der Regel, dass die __Call-Metafunktion aufgerufen wird.</p>
<p>Es wird eine Ausnahme ausgelöst, wenn <em>Objekt</em> vom falschen Typ ist.</p>

<h3 id="GetBase">ObjGetBase <span class="ver">[v1.1.29+]</span></h3>
<p>Gibt das <a href="../Objects.htm#Custom_Objects">Basisobjekt</a> eines Objekts zurück.</p>
<pre class="Syntax">Basisobjekt := <span class="func">ObjGetBase</span>(Objekt)</pre>
<p>Es werden keine <a href="../Objects.htm#Meta_Functions">Metafunktionen</a> aufgerufen. Die Basis des Objekts wird sogar zurückgegeben, wenn der Schlüssel "base" im Objekt gespeichert wurde (z.B. mit <a href="#RawSet">ObjRawSet</a> oder <a href="#SetCapacity">SetCapacity</a>). Es wird eine leere Zeichenkette zurückgegeben, wenn das Objekt keine Basis hat.</p>
<p>Es wird eine Ausnahme ausgelöst, wenn <em>Objekt</em> vom falschen Typ ist.</p>
<p>Siehe auch: <a href="#Base">Base-Eigenschaft</a></p>

<h3 id="SetBase">ObjSetBase <span class="ver">[v1.1.29+]</span></h3>
<p>Setzt das <a href="../Objects.htm#Custom_Objects">Basisobjekt</a> eines Objekts.</p>
<pre class="Syntax"><span class="func">ObjSetBase</span>(Objekt, Basisobjekt)</pre>
<p>Es werden keine <a href="../Objects.htm#Meta_Functions">Metafunktionen</a> aufgerufen. Die Basis des Objekts wird sogar gesetzt, wenn der Schlüssel "base" im Objekt gespeichert wurde (z.B. mit <a href="#RawSet">ObjRawSet</a> oder <a href="#SetCapacity">SetCapacity</a>). Es wird eine leere Zeichenkette zurückgegeben, wenn das Objekt keine Basis hat.</p>
<p>Es wird eine Ausnahme ausgelöst, wenn <em>Objekt</em> vom falschen Typ ist oder wenn <em>Basisobjekt</em> kein Objekt oder eine leere Zeichenkette ist.</p>
<p>Siehe auch: <a href="#Base">Base-Eigenschaft</a></p>

<h2 id="Remarks">Bemerkungen</h2>
<p>Jede Methode hat außerdem eine äquivalente Funktion, mit der ein vom Objekt implementiertes <a href="../Objects.htm#Custom_Objects">benutzerdefiniertes Verhalten</a> umgangen werden kann. Diese Funktionen sollten nur für diesen Zweck verwendet werden. Um eine solche Funktion aufzurufen, stellen Sie dem Methodennamen "Obj" voran und übergeben Sie das Zielobjekt als ersten Parameter. Zum Beispiel:</p>
<pre>array := [1, 2, 3]
MsgBox % ObjMaxIndex(array) " = " array.MaxIndex()</pre>
<p>Wenn eine solche Funktion mit einem Objekt oder Wert vom falschen Typ aufgerufen wird, gibt sie eine leere Zeichenkette zurück. Unabhängige Funktionen wie ObjRawSet lösen eine Ausnahme aus.</p>

</body>
</html>
