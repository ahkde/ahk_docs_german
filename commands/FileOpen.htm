<!DOCTYPE HTML>
<html>
<head>
<title>FileOpen() - Syntax &amp; Verwendung | AutoHotkey</title>
<meta name="description" content="Die FileOpen-Funktion öffnet eine Datei, um bestimmte Inhalte aus ihr zu lesen und/oder in diese zu schreiben." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
<script src="../static/ga4.js" type="text/javascript"></script>
<style type="text/css">
.sized {
  width: 3em;
}
</style>
</head>
<body>

<h1>FileOpen() <span class="ver">[AHK_L 42+]</span></h1>

<p>Öffnet eine Datei, um bestimmte Inhalte aus ihr zu lesen und/oder in diese zu schreiben.</p>
<pre class="Syntax">File := <span class="func">FileOpen</span>(Dateiname, Flags <span class="optional">, Codierung</span>)</pre>

<h2 id="Parameters">Parameter</h2>
<dl>

  <dt>Dateiname</dt>
  <dd>
    <p>Name der Datei, die geöffnet werden soll. Wenn kein absoluter Pfad angegeben ist, wird die Datei im <a href="../Variables.htm#WorkingDir">A_WorkingDir</a>-Verzeichnis vermutet.</p>
    <p><span class="ver">[v1.1.17+]:</span> Geben Sie ein Sternchen (oder zwei) wie unten gezeigt an, um die Standardeingabe, Standardausgabe oder Standardfehlerausgabe zu öffnen:</p>
    <pre>
FileOpen("*", "r")   <em>; für stdin</em>
FileOpen("*", "w")   <em>; für stdout</em>
FileOpen("**", "w")  <em>; für stderr</em></pre>
  </dd>

  <dt>Flags</dt>
  <dd><p>Seit <span class="ver">[AHK_L 54]</span> entweder eine Zeichenkette mit Zeichen für den gewünschten Zugriffsmodus, gefolgt von anderen Optionen (optional getrennt durch Leerzeichen und Tabulatoren); oder in <span class="ver">[AHK_L 42+]</span> eine Kombination (Summe) von numerischen Flags. Unterstützte Werte werden in den folgenden Tabellen beschrieben.</p></dd>

  <dt>Codierung</dt>
  <dd><p>Der Zeichensatz, der zur Textverarbeitung verwendet werden soll, falls die Datei keine UTF-8- oder UTF-16-<a href="https://de.wikipedia.org/wiki/Byte_Order_Mark">Byte-Order-Markierung</a> enthält, oder wenn das <code>h</code> (Handle) benutzt wird. Lässt man diesen Parameter weg, wird der aktuelle Wert von <a href="../Variables.htm#FileEncoding">A_FileEncoding</a> verwendet.</p></dd>

</dl>

<h2 id="Flags">Flags</h2>

<h3 id="Access_modes">Zugriffsmodi (schließen sich gegenseitig aus)</h3>
<table class="info">
  <tr>
    <th class="sized center">Flag</th>
    <th class="sized right">Dez</th>
    <th class="sized right">Hex</th>
    <th abbr="Beschr">Beschreibung</th>
  </tr>
  <tr>
    <td class="center">r</td>
    <td class="right">0</td>
    <td class="right">0x0</td>
    <td><i>Read</i> (Lesen): Schlägt fehl, wenn die Datei nicht existiert.</td>
  </tr>
  <tr>
    <td class="center">w</td>
    <td class="right">1</td>
    <td class="right">0x1</td>
    <td><i>Write</i> (Schreiben): Erstellt eine neue Datei, wenn sie nicht existiert, <b style="color:red">ansonsten wird die Datei überschrieben</b>.</td>
  </tr>
  <tr>
    <td class="center">a</td>
    <td class="right">2</td>
    <td class="right">0x2</td>
    <td><i>Append</i> (Anfügen): Erstellt eine neue Datei, wenn sie nicht existiert, ansonsten wird der Dateizeiger an das Ende der Datei verschoben.</td>
  </tr>
  <tr>
    <td class="center">rw</td>
    <td class="right">3</td>
    <td class="right">0x3</td>
    <td><i>Read/Write</i> (Lesen/Schreiben): Erstellt eine neue Datei, wenn sie nicht existiert.</td>
  </tr>
  <tr>
    <td class="center">h</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>Kennzeichnet, dass <i>Dateiname</i> ein Datei-Handle ist, das in ein Objekt gewrappt werden soll. Ignoriert Freigabemodus-Flags und verhindert, dass in der Datei oder im Stream des Handles eine Byte-Order-Markierung (BOM) gesucht wird. Das Datei-Handle wird <b>nicht</b> automatisch geschlossen, wenn das File-Objekt zerstört wird. Der Aufruf von <a href="../objects/File.htm#Close">Close</a> hat keinen Effekt. Beachten Sie, dass <a href="../objects/File.htm#Seek">Seek</a>, <a href="../objects/File.htm#Tell">Tell</a> und <a href="../objects/File.htm#Length">Length</a> nicht verwendet werden sollten, wenn <i>Dateiname</i> ein Handle ist, das auf ein nicht-suchendes Device (z. B. ein Pipe oder ein Kommunikations-Device) verweist.</td>
  </tr>
</table>

<h3 id="Sharing_mode_flags">Freigabemodi</h3>
<table class="info">
  <tr>
    <th class="sized center">Flag</th>
    <th class="sized right">Dez</th>
    <th class="sized right">Hex</th>
    <th abbr="Beschr">Beschreibung</th>
  </tr>
  <tr>
    <td class="center">-rwd</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>Sperrt die Datei für Lese-, Schreib- und/oder Löschzugriffe. Es sind beliebige Kombinationen von <code>r</code>, <code>w</code> und <code>d</code> möglich. Die Angabe von <code>-</code> ist das gleiche wie, als würde man <code>-rwd</code> angeben. Wenn alles weggelassen wird, werden standardmäßig alle Zugriffe freigegeben.</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td class="right">0</td>
    <td class="right">0x0</td>
    <td>Wenn <i>Flags</i> numerisch ist und keine Freigabemodus-Flags angegeben sind, wird die Datei gesperrt.</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td class="right">256</td>
    <td class="right">0x100</td>
    <td>Gibt <i>Lesezugriff</i> frei.</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td class="right">512</td>
    <td class="right">0x200</td>
    <td>Gibt <i>Schreibzugriff</i> frei.</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td class="right">1024</td>
    <td class="right">0x400</td>
    <td>Gibt <i>Löschzugriff</i> frei.</td>
  </tr>
</table>

<h3 id="EOL_options">End-of-Line-Optionen (EOL)</h3>
<table class="info">
  <tr>
    <th class="sized center">Flag</th>
    <th class="sized right">Dez</th>
    <th class="sized right">Hex</th>
    <th abbr="Beschr">Beschreibung</th>
  </tr>
  <tr>
    <td class="center">`n</td>
    <td class="right">4</td>
    <td class="right">0x4</td>
    <td>Ersetzt beim Schreiben <code>`r`n</code> mit <code>`n</code> und beim Lesen <code>`n</code> mit <code>`r`n</code>.</td>
  </tr>
  <tr>
    <td class="center">`r</td>
    <td class="right">8</td>
    <td class="right">0x8</td>
    <td>Ersetzt beim Schreiben das alleinstehende <code>`r</code> mit <code>`n</code>.</td>
  </tr>
</table>

<h2 id="Return_Value">Rückgabewert</h2>
<p>Wenn die Datei erfolgreich geöffnet wurde, wird ein <a href="../objects/File.htm">File-Objekt</a> zurückgegeben.</p>
<p>Wenn die Funktion fehlschlägt, wird eine 0 zurückgegeben und <span class="ver">[in AHK_L 54+]</span> <a href="../Variables.htm#LastError">A_LastError</a> auf einen Fehlercode gesetzt.</p>
<p>Mit <code>if File</code> oder <code>IsObject(File)</code> kann man überprüfen, ob die Funktion erfolgreich war.</p>

<h2 id="Remarks">Bemerkungen</h2>
<p>Beim Erstellen einer UTF-8- oder UTF-16-Datei wird eine Byte-Order-Markierung (BOM) in die Datei geschrieben, <b>es sei denn</b>, <i>Codierung</i> (oder <a href="FileEncoding.htm">A_FileEncoding</a>, falls <i>Codierung</i> weggelassen wird) enthält <code>UTF-8-RAW</code> oder <code>UTF-16-RAW</code>.</p>
<p>Wenn eine Datei mit einer UTF-8- oder UTF-16-Byte-Order-Markierung (BOM) via Lesezugriff geöffnet wird, wird der Dateizeiger hinter der BOM positioniert, damit sie bei der Ausgabe nicht enthalten ist. Folglich wird <code>File.Position</code> unmittelbar nach Öffnen der Datei eventuell 3 oder 2 melden.</p>

<h2 id="Related">Siehe auch</h2>
<p><a href="FileEncoding.htm">FileEncoding</a>, <a href="../objects/File.htm">File-Objekt</a>, <a href="FileRead.htm">FileRead</a></p>

<h2 id="Examples">Beispiele</h2>

<div class="ex" id="writeread">
<p><a class="ex_number" href="#writeread"></a> Schreibt etwas Text in eine Datei und liest ihn zurück in den Speicher (stellt die gleiche Funktionalität wie <a href="DllCall.htm#file">dieses DllCall-Beispiel</a> bereit).</p>
<pre>FileSelectFile, DateiName, S16,, Neue Datei erstellen:
if (DateiName = "")
    return
File := FileOpen(DateiName, "w")
if !IsObject(File)
{
    MsgBox Kann "%DateiName%" nicht zum Schreiben öffnen.
    return
}
TestZkette := "Das ist eine Zeichenkette.`r`n"  <em>; Wenn eine Datei auf diese Weise geschrieben wird, sollte `r`n anstelle von `n verwendet werden, um eine neue Zeile zu beginnen.</em>
File.Write(TestZkette)
File.Close()

<em>; Liest den Inhalt der Datei, nachdem sie geschrieben wurde, zurück in den Speicher.</em>
File := FileOpen(DateiName, "r-d") <em>; Liest die Datei ("r"), gibt alle Zugriffe außer Löschen ("-d") frei</em>
if !IsObject(File)
{
    MsgBox Kann "%DateiName%" nicht zum Lesen öffnen.
    return
}
ZuLesendeZeichen := StrLen(TestZkette)
TestZkette := File.Read(ZuLesendeZeichen)
File.Close()
MsgBox Die folgende Zeichenkette wurde aus der Datei gelesen: %TestZkette%</pre>
</div>

<div class="ex" id="ExReadLine">
<p><a class="ex_number" href="#ExReadLine"></a> Öffnet das Skript im Schreibschutzmodus und liest dessen erste Zeile.</p>
<pre>File := FileOpen(A_ScriptFullPath, "r")
MsgBox % File.ReadLine()</pre>
</div>

<div class="ex" id="ExStreams">
<p><a class="ex_number" href="#ExStreams"></a> Demonstriert die Verwendung der Standard-Eingabe/Ausgabe-Datenströme.</p>
<pre><em>; Öffnet ein Konsolenfenster für diese Demonstration:</em>
DllCall("AllocConsole")
<em>; Öffnet die stdin/stdout-Ströme der Anwendung mit der Option "`n".</em>
stdin  := FileOpen("*", "r `n")  <em>; Benötigt <span class="ver">[v1.1.17+]</span></em>
stdout := FileOpen("*", "w `n")
<em>; Bei älteren Versionen:
;   stdin  := FileOpen(DllCall("GetStdHandle", "int", -10, "ptr"), "h `n")
;   stdout := FileOpen(DllCall("GetStdHandle", "int", -11, "ptr"), "h `n")</em>
stdout.Write("Bitte Anfrage eingeben.`n\&gt; ")
stdout.Read(0) <em>; Schreibpuffer leeren.</em>
query := RTrim(stdin.ReadLine(), "`n")
stdout.WriteLine("Die Anfrage war '" query "'. Einen schönen Tag noch.")
stdout.Read(0) <em>; Schreibpuffer leeren.</em>
Sleep 5000
</pre>
</div>
</body>
</html>
