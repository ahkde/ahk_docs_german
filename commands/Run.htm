<!DOCTYPE HTML>
<html lang="de">
<head>
<title>Run / RunWait - Syntax &amp; Verwendung | AutoHotkey</title>
<meta name="description" content="Die Befehle Run und RunWait starten ein externes Programm. RunWait wartet, bis das Programm endet, bevor es fortfährt." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
<style type="text/css">
.style3 {color: #FF0000; font-weight: bold; }
</style>
</head>
<body>

<h1>Run / RunWait</h1>

<p>Startet ein externes Programm. RunWait wartet, bis das Programm endet, bevor es fortfährt.</p>

<pre class="Syntax">
<span class="func">Run</span>, Ziel <span class="optional">, ArbeitVerz, Optionen, AusgabeVarPID</span>
<span class="func">RunWait</span>, Ziel <span class="optional">, ArbeitVerz, Optionen, AusgabeVarPID</span>
</pre>
<h2 id="Parameters">Parameter</h2>
<dl>

  <dt>Ziel</dt>
  <dd><p>Ein Dokument, eine URL, eine ausführbare Datei (.exe, .com, .bat und so weiter), eine Verknüpfung (.lnk) oder ein <a href="#verbs">Systemverb</a> (siehe Bemerkungen). Wenn das <em>Ziel</em> eine lokale Datei ist, ohne dass ein Pfad angegeben wurde, wird <a href="../Variables.htm#WorkingDir">A_WorkingDir</a> zuerst durchsucht. Wenn eine Datei dort nicht gefunden wurde, wird das System nach dieser Datei suchen und sie gegebenenfalls starten, sofern sie integriert ("bekannt") ist, wie z. B. in einem der PATH-Ordner.</p>
      <p>Damit Parameter übergeben werden können, müssen sie unmittelbar nach dem Programm- oder Dokumentnamen erfolgen. Wenn ein Parameter Leerzeichen enthält, sollte man ihn sicherheitshalber in Anführungszeichen setzen (auch wenn es in einigen Fällen ohne sie funktionieren würde).</p></dd>

  <dt>ArbeitVerz</dt>
  <dd><p>Das Arbeitsverzeichnis, in dem das Ziel gestartet werden soll. Umschließen Sie den Namen nicht mit Anführungszeichen, selbst wenn er Leerzeichen enthält. Lässt man diesen Parameter weg, wird das Arbeitsverzeichnis des Skripts verwendet (<a href="../Variables.htm#WorkingDir">A_WorkingDir</a>).</p></dd>

  <dt>Optionen</dt>
  <dd><p>Lässt man diesen Parameter weg, wird der Befehl das <em>Ziel</em> normal starten und ein Warndialogfenster anzeigen, wenn <em>Ziel</em> nicht gestartet werden konnte. Um dieses Verhalten zu ändern, geben Sie einen oder mehrere der folgenden Wörter an:</p>
      <p><strong>Max</strong>: maximiert starten</p>
      <p><strong>Min</strong>: minimiert starten</p>
      <p><strong>Hide</strong>: versteckt starten (kann nicht in Kombination mit den oben genannten Wörtern verwendet werden)</p>
      <p class="note"><strong>Hinweis</strong>: Einige Anwendungen (z. B. Calc.exe) ignorieren den angeforderten Anfangsstatus, wodurch Max/Min/Hide nicht funktionieren werden.</p>
      <p id="UseErrorLevel"><strong>UseErrorLevel</strong>: UseErrorLevel kann einzeln oder in Kombination mit einem der oben genannten Wörtern verwendet werden (die Wörter müssen jeweils mit einem Leerzeichen getrennt werden). Wenn das Starten fehlschlägt, wird diese Option das Warndialogfenster überspringen, <a href="../misc/ErrorLevel.htm">ErrorLevel</a> auf ERROR setzen und den <a href="../misc/Threads.htm">aktuellen Thread</a> fortsetzen lassen. Wenn das Starten erfolgreich war, wird <a href="../misc/ErrorLevel.htm">ErrorLevel</a> auf 0 gesetzt, und von RunWait auf den Exitcode des Programms.</p>
      <p id="LastError">Wenn UseErrorLevel angegeben wurde, wird <strong>A_LastError</strong> auf den Rückgabewert der system-internen GetLastError()-Funktion gesetzt. A_LastError ist eine Nummer zwischen 0 und 4294967295 (immer in dezimaler Form, nicht hexadezimal). Null (0) bedeutet Erfolg; jede andere Nummer bedeutet, dass das Starten fehlgeschlagen ist. Jede Nummer entspricht einem bestimmten Fehlerzustand (Sie erhalten eine Liste, wenn Sie auf <a href="https://www.microsoft.com">www.microsoft.com</a> nach "system error codes" suchen). A_LastError ist wie <a href="../misc/ErrorLevel.htm">ErrorLevel</a> eine Pro-Thread-Einstellung; das sind Einstellungen, die nicht von anderen <a href="../misc/Threads.htm">Threads</a> geändert werden können. Allerdings wird A_LastError auch von <a href="DllCall.htm#LastError">DllCall()</a> gesetzt.</p></dd>

  <dt>AusgabeVarPID</dt>
  <dd><p>Name der Variable, in der die eindeutige <a href="Process.htm">Prozess-ID (PID)</a> des neu gestarteten Programms gespeichert werden soll. Die Variable wird leer gemacht, wenn die PID nicht ermittelt werden konnte - dies passiert üblicherweise nur, wenn nicht eine ausführbare Datei, sondern ein Systemverb, ein Dokument oder eine Verknüpfung gestartet wird. RunWait unterstützt diesen Parameter auch, allerdings muss seine <em>AusgabeVarPID</em> in einem <a href="../misc/Threads.htm">anderen Thread</a> überprüft werden (ansonsten wäre die PID ungültig, weil der Prozess nach RunWait nicht mehr existiert).</p>
      <p>Nachdem der Run-Befehl eine PID ermittelt hat, kann es sein, dass Fenster, die vom Prozess erstellt werden, noch nicht verfügbar sind. Verwenden Sie <code><a href="WinWait.htm">WinWait</a> ahk_pid %AusgabeVarPID%</code>, um wenigstens auf eines dieser Fenster zu warten.</p></dd>

</dl>
<h2 id="Error_Handling">Fehlerbehandlung</h2>
<p><span class="ver">[v1.1.04+]</span>: Dieser Befehl ist in der Lage, bei Misserfolg eine Ausnahme auszulösen. Weitere Informationen finden Sie unter <a href="Catch.htm#RuntimeErrors">Laufzeitfehler</a>.</p>
<p>Run: Setzt kein <a href="../misc/ErrorLevel.htm">ErrorLevel</a>, es sei denn, UseErrorLevel (oben) ist wirksam, dann wird ErrorLevel bei Misserfolg auf ERROR und bei Erfolg auf 0 gesetzt.</p>
<p>RunWait: Setzt ErrorLevel auf den Exitcode des Programms (ein vorzeichenfähiger 32-Bit-Integer). Wenn das Starten fehlschlägt, während UseErrorLevel aktiv ist, wird das Wort ERROR gespeichert.</p>
<h2 id="Remarks">Bemerkungen</h2>
<p>RunWait wird, im Gegensatz zu Run, warten, bis das <em>Ziel</em> geschlossen oder beendet wird, und setzt dann <a href="../misc/ErrorLevel.htm">ErrorLevel</a> auf den Exitcode des Programms (ein vorzeichenfähiger 32-Bit-Integer). Einige Programme geben sofort einen Exitcode zurück, obwohl sie noch laufen; solche Programme erzeugen einen weiteren Prozess.</p>
<p>Wenn das <em>Ziel</em> Kommas enthält, müssen sie mit einem <a href="../misc/EscapeChar.htm">Escapezeichen</a> versehen werden, wie es in dem folgenden Beispiel dreimal gemacht wird:</p>
<pre>Run rundll32.exe shell32.dll<span class="style3">`,</span>Control_RunDLL desk.cpl<span class="style3">`,`,</span> 3  <em>; Öffnet Systemsteuerung &gt; Anzeige &gt; Einstellungen</em></pre>
<p>Startet man ein Programm via <a href="../Variables.htm#ComSpec">ComSpec</a> (cmd.exe) - z. B. um die Ein- oder Ausgabe des Programms umzuleiten - sollte, sofern Leerzeichen im Pfad oder Namen enthalten sind, die komplette Zeichenkette mit äußeren Anführungszeichen umschlossen werden. Im folgenden Beispiel werden die äußeren Anführungszeichen in rot und alle inneren Anführungszeichen in schwarz dargestellt:</p>
<pre>Run %ComSpec% /c <span class="style3">"</span>"C:\Mein Tool.exe" "param 1" "zweiter param" &gt;"C:\Meine Datei.txt"<span class="style3">"</span></pre>
<p>Wenn <em>Ziel</em> nicht gestartet werden kann, wird eine Fehlermeldung angezeigt und der aktuelle Thread beendet, es sei denn, man verwendet <strong>UseErrorLevel</strong> im dritten Parameter oder der Fehler wird via <a href="Try.htm">Try</a>/<a href="Catch.htm">Catch</a>-Anweisung abgefangen.</p>
<p>Die Leistung kann etwas verbessert werden, wenn <em>Ziel</em> ein genauer Pfad ist, wie z. B. <code>Run, C:\Windows\Notepad.exe "C:\Meine Dokumente\Test.txt"</code> anstelle von <code>Run, C:\Meine Dokumente\Test.txt</code>.</p>
<p>Spezielle <a href="../misc/CLSID-List.htm">CLSID-Ordner</a> können via Run geöffnet werden. Zum Beispiel:</p>
<pre>Run ::{20d04fe0-3aea-1069-a2d8-08002b30309d}  <em>; Öffnet den Arbeitsplatz/Computer.</em>
Run ::{645ff040-5081-101b-9f08-00aa002f954e}  <em>; Öffnet den Papierkorb.</em></pre>
<p id="verbs">Systemverben beziehen sich auf Aktionen, die im Rechtsklickmenü einer Datei innerhalb des Explorers verfügbar sind. Startet man eine Datei ohne Verb, wird das Standardverb (üblicherweise "open") für diesen bestimmten Dateityp verwendet. Ansonsten sollte nach dem Verb der Name der Zieldatei erfolgen. Zurzeit werden folgende Verben unterstützt:</p>
<table class="info">
  <tr>
    <th style="width:8%">Verb</th>
    <th abbr="Beschr">Beschreibung</th>
  </tr>
  <tr>
    <td>*<i>verb</i></td>
    <td><span class="ver">[AHK_L 57+]:</span> Beliebiges systemdefiniertes oder benutzerdefiniertes Verb. Zum Beispiel: <code>Run *Compile %A_ScriptFullPath%</code>. In Windows Vista und höher kann das Verb <a href="#RunAs">*RunAs</a> als Ersatz für den Kontextmenüpunkt <i>Als Administrator ausführen</i> benutzt werden.</td>
  </tr>
  <tr>
    <td>properties</td>
    <td>
      <p>Öffnet das Explorer-Eigenschaftsfenster für die angegebene Datei. Zum Beispiel: <code>Run, properties "C:\Meine Datei.txt"</code>.</p>
      <p class="note"><strong>Hinweis</strong>: Das Eigenschaftsfenster wird automatisch geschlossen, sobald das Skript terminiert wird. Um das zu verhindern, verwenden Sie <a href="WinWait.htm">WinWait</a>, um auf das Erscheinen des Fensters zu warten, und danach <a href="WinWaitClose.htm">WinWaitClose</a>, um auf das Schließen des Fensters zu warten.</p>
    </td>
  </tr>
  <tr>
    <td>find</td>
    <td>Öffnet eine Instanz vom Such-Assistenten oder Suchergebnisfenster des Explorers im angegebenen Ordner. Zum Beispiel: <code>Run, find D:\</code></td>
  </tr>
  <tr>
    <td>explore</td>
    <td>Öffnet eine Instanz des Explorers im angegebenen Ordner. Zum Beispiel: <code>Run, explore %A_ProgramFiles%</code>.</td>
  </tr>
  <tr>
    <td>edit</td>
    <td>Öffnet die angegebene Datei zum Editieren. Dieser Vorgang kann fehlschlagen, wenn der Dateityp der angegebenen Datei keine Edit-Aktion hat. Zum Beispiel: <code>Run, edit "C:\Meine Datei.txt"</code>.</td>
  </tr>
  <tr>
    <td>open</td>
    <td>Öffnet die angegebene Datei (normalerweise nicht notwendig, weil es die Standardaktion für die meisten Dateitypen ist). Zum Beispiel: <code>Run, open "Meine Datei.txt"</code>.</td>
  </tr>
  <tr>
    <td>print</td>
    <td>Druckt die angegebene Datei mit der zugehörigen Anwendung, falls vorhanden. Zum Beispiel: <code>Run, print "Meine Datei.txt"</code>.</td>
  </tr>
</table>
<p>Während RunWait im Wartezustand ist, können neue <a href="../misc/Threads.htm">Threads</a> via <a href="../Hotkeys.htm">Hotkeys</a>, <a href="Menu.htm">benutzerdefinierte Menüpunkte</a> oder <a href="SetTimer.htm">Timer</a> gestartet werden.</p>

<h2 id="RunAs">Als Administrator ausführen <span class="ver">[AHK_L 57+]:</span></h2>
<p>Bei einer ausführbaren Datei ist das Verb <em>*RunAs</em> das gleiche wie, als würde man <em>Als Administrator ausführen</em> im Rechtsklickmenü der Datei auswählen. Zum Beispiel würde der folgende Code versuchen, das aktuelle Skript mit Administratorrechten neuzustarten:</p>
<pre>full_command_line := DllCall("GetCommandLine", "str")

if not (A_IsAdmin or RegExMatch(full_command_line, " /restart(?!\S)"))
{
    try
    {
        if A_IsCompiled
            Run *RunAs "%A_ScriptFullPath%" /restart
        else
            Run *RunAs "%A_AhkPath%" /restart "%A_ScriptFullPath%"
    }
    ExitApp
}

MsgBox A_IsAdmin: %A_IsAdmin%`nCommand line: %full_command_line%</pre>
<p>Wenn der Benutzer im UAC-Dialogfenster auf Abbrechen drückt oder wenn Run aus einem anderen Grund fehlschlägt, wird das Skript einfach beendet.</p>
<p>Das <a href="../Scripts.htm#SlashR">/restart</a> stellt sicher, dass keine <a href="_SingleInstance.htm">Einzelinstanz</a>-Nachfrage erscheint, wenn eine neue Instanz des Skripts startet, bevor ExitApp aufgerufen wird.</p>
<p>Wenn UAC deaktiviert ist, wird <em>*RunAs</em> den Prozess ohne Erhöhung seiner Rechte starten. Es wird überprüft, ob <code>/restart</code> in der Befehlszeile vorkommt, um sicherzustellen, dass das Skript nicht in eine ausweglose Schleife hineingerät. Beachten Sie, dass <code>/restart</code> ein interner Parameter ist, und daher nicht im <a href="../Scripts.htm#cmd_args">Befehlszeilenparameter-Array</a> zu finden ist.</p>
<p>Das Beispiel kann jederzeit nach Belieben angepasst werden:</p>
<ul>
  <li>Wenn das Skript immer Adminrechte benötigt, sollte man A_IsAdmin ein zweites Mal überprüfen lassen, falls <em>*RunAs</em> die Rechte des Skripts nicht erhöhen konnte (weil z. B. UAC deaktiviert ist).</li>
  <li>Um das Skript nach Abbrechen der UAC-Nachfrage weiterlaufen zu lassen, verschieben Sie ExitApp in den Try-Block.</li>
  <li>Um das Skript nach fehlgeschlagenem Neustart weiterlaufen zu lassen (weil die Skriptdatei z. B. geändert oder gelöscht wurde), entfernen Sie ExitApp und ersetzen Sie Run mit RunWait. Bei Erfolg lässt <code>/restart</code> die neue Instanz die alte Instanz terminieren. Bei Misserfolg wird die neue Instanz beendet und RunWait abgeschlossen.</li>
</ul>
<p><span class="ver">[v1.0.92.01+]:</span> Wenn UAC aktiviert ist, wird der AutoHotkey-Installer das Verb <em>RunAs</em> bei <em>.ahk</em>-Dateien registrieren, wodurch <code>Run *RunAs skript.ahk</code> ein Skript als Administrator starten kann - mit der vordefinierten ausführbaren Datei.</p>

<h2 id="Related">Siehe auch</h2>
<p><a href="RunAs.htm">RunAs</a>, <a href="Process.htm">Process</a>, <a href="Exit.htm">Exit</a>, <a href="../misc/CLSID-List.htm">CLSID-Liste</a>, <a href="DllCall.htm">DllCall()</a></p>

<h2 id="Examples">Beispiele</h2>
<div class="ex" id="ExBasic">
<p><a class="ex_number" href="#ExBasic"></a> Run kann Windows-Systemprogramme aus einem beliebigen Verzeichnis heraus starten. Beachten Sie, dass Endungen von ausführbaren Dateien wie .exe weggelassen werden können.</p>
<pre>Run, notepad</pre>
</div>

<div class="ex" id="ExURL">
<p><a class="ex_number" href="#ExURL"></a> Run kann URLs starten:</p>
<p>Das folgende Beispiel öffnet eine Internetadresse im Standard-Webbrowser des Benutzers.</p>
<pre>Run, https://www.google.com</pre>
<p>Das folgende Beispiel öffnet die Standard-E-Mail-Anwendung mit ausgefülltem Empfänger.</p>
<pre>Run, mailto:someone@somedomain.com</pre>
<p>Das folgende Beispiel macht das Gleiche wie oben, plus den Betreff und den Haupttext.</p>
<pre>Run, mailto:someone@somedomain.com?subject=Das ist die Betreffzeile.&amp;body=Das ist der Haupttext der Nachricht.</pre>
</div>

<div class="ex" id="ExErrorLevel">
<p><a class="ex_number" href="#ExErrorLevel"></a> Öffnet ein Dokument in einer maximierten Anwendung und zeigt bei einem Fehler eine benutzerdefinierte Fehlermeldung an.</p>
<pre>Run, ReadMe.doc, , Max UseErrorLevel
if (ErrorLevel = "ERROR")
    MsgBox Das Dokument konnte nicht geöffnet werden.</pre>
</div>

<div class="ex" id="ExVerb">
<p><a class="ex_number" href="#ExVerb"></a> Führt den dir-Befehl im minimierten Zustand aus und speichert die Ausgabe in eine Textdatei. Danach wird die Textdatei und ihr Eigenschaftsfenster geöffnet.</p>
<pre>#Persistent
RunWait, %ComSpec% /c dir C:\ &gt;&gt;C:\DirTest.txt, , Min
Run, C:\DirTest.txt
Run, properties C:\DirTest.txt</pre>
</div>

<div class="ex" id="ExCLSID">
<p><a class="ex_number" href="#ExCLSID"></a> Run kann <a href="../misc/CLSID-List.htm">CLSIDs</a> starten:</p>
<p>Das folgende Beispiel öffnet den Papierkorb.</p>
<pre>Run, ::{645ff040-5081-101b-9f08-00aa002f954e}</pre>
<p>Das folgende Beispiel öffnet das "Dieser PC"-Verzeichnis.</p>
<pre>Run, ::{20d04fe0-3aea-1069-a2d8-08002b30309d}</pre>
</div>

<div class="ex" id="ExMultipleCmds">
<p><a class="ex_number" href="#ExMultipleCmds"></a> Mit "&amp;&amp;" können mehrere Befehle hintereinander ausgeführt werden.</p>
<pre>Run, %ComSpec% /c dir /b &gt; C:\Liste.txt &amp;&amp; type C:\Liste.txt &amp;&amp; pause</pre>
</div>

<div class="ex" id="StdOut">
<p><a class="ex_number" href="#StdOut"></a> Die folgenden Funktionen können verwendet werden, um einen einzelnen Befehl auszuführen und dessen Ausgabe abzurufen oder um mehrere Befehle in einem Rutsch auszuführen und deren Ausgabe abzurufen.</p>
<pre>MsgBox % RunWaitEin("dir " A_ScriptDir)

MsgBox % RunWaitViele("
(
echo Fügen Sie hier Ihre Befehle ein,
echo die ausgeführt werden sollen,
echo um danach ihre Ausgaben zu erhalten.
)")

RunWaitEin(Befehl) {
    <em>; WshShell-Objekt: <a href="https://msdn.microsoft.com/de-de/library/aew9yb99">http://msdn.microsoft.com/de-de/library/aew9yb99</a></em>
    shell := ComObjCreate("WScript.Shell")
    <em>; Führt einen einzelnen Befehl via cmd.exe aus</em>
    exec := shell.Exec(ComSpec " /C " Befehl)
    <em>; Liest die Ausgaben aller Befehle und gibt sie zurück</em>
    return exec.StdOut.ReadAll()
}

RunWaitViele(Befehle) {
    shell := ComObjCreate("WScript.Shell")
    <em>; Öffnet cmd.exe mit deaktivierter Textanzeige</em>
    exec := shell.Exec(ComSpec " /Q /K echo off")
    <em>; Sendet die Befehle, die ausgeführt werden sollen, getrennt durch Newline</em>
    exec.StdIn.WriteLine(Befehle "`nexit")  <em>; Immer ein Exit am Ende!</em>
    <em>; Liest die Ausgaben aller Befehle und gibt sie zurück</em>
    return exec.StdOut.ReadAll()
}
</pre>
</div>

<div class="ex" id="ExecScript">
<p><a class="ex_number" href="#ExecScript"></a> Startet den angegeben Code als neuen AutoHotkey-Prozess.</p>
<pre>ExecScript(Script, Warten:=true)
{
    shell := ComObjCreate("WScript.Shell")
    exec := shell.Exec("AutoHotkey.exe /ErrorStdOut *")
    exec.StdIn.Write(script)
    exec.StdIn.Close()
    if Warten
        return exec.StdOut.ReadAll()
}

<em>; Beispiel:</em>
InputBox expr,, Tragen Sie einen Ausdruck ein`, der in einem neuen Skript ausgewertet werden soll.,,,,,,,, Asc("*")
Ergebnis := ExecScript("FileAppend % (" expr "), *")
MsgBox % "Ergebnis: " Ergebnis
</pre>
</div>

</body>
</html>
