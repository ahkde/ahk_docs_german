<!DOCTYPE HTML>
<html lang="de">
<head>
<title>OnExit() / OnExit - Syntax &amp; Verwendung | AutoHotkey</title>
<meta name="description" content="Die OnExit-Funktion oder der OnExit-Befehl bestimmt eine Callback-Funktion bzw. Subroutine, die automatisch ausgeführt werden soll, wenn das Skript beendet wird." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
<script src="../static/ga4.js" type="text/javascript"></script>
</head>
<body>

<h1>OnExit() / OnExit</h1>
<p>Bestimmt eine <a href="../Functions.htm">Callback-Funktion</a> oder <a href="Gosub.htm">Subroutine</a>, die automatisch ausgeführt werden soll, wenn das Skript beendet wird.</p>

<h2 id="function">OnExit() <span class="ver">[v1.1.20+]</span></h2>
<pre class="Syntax"><span class="func">OnExit</span>(Func <span class="optional">, HinzufügenEntfernen</span>)</pre>

<h3 id="Function_Parameters">Parameter</h3>
<dl>

  <dt>Func</dt>
  <dd><p>Ein Funktionsname oder <a href="../objects/Functor.htm">Funktionsobjekt</a>, die aufgerufen werden sollen, wenn das Skript beendet wird. Optional kann die Funktion Parameter definieren, wie unten gezeigt. Wenn eine OnExit-Funktion einen Integer ungleich Null zurückgibt, wird das Skript nicht beendet (mit einigen <a href="#close">seltenen Ausnahmen</a>) und es werden keine weiteren Funktionen aufgerufen. Ansonsten wird das Skript beendet, nachdem alle registrierten Funktionen aufgerufen wurden.</p>
  <pre class="Syntax"><span class="func">ExitFunk</span>(<a href="#ExitReason">ExitGrund</a>, <a href="ExitApp.htm">ExitCode</a>)</pre></dd>
  
  <dt>HinzufügenEntfernen</dt>
  <dd><p>Wenn dieser Parameter weggelassen wird oder leer ist, wird standardmäßig 1 (die Funktion nach anderen zuvor registrierten Funktionen aufrufen) verwendet. Ansonsten können Sie eine der folgenden Zahlen angeben:</p>
    <ul>
      <li>1 = Die Funktion nach anderen zuvor registrierten Funktionen aufrufen.</li>
      <li>-1 = Die Funktion vor anderen zuvor registrierten Funktionen aufrufen.</li>
      <li>0 = Die Funktion nicht aufrufen.</li>
    </ul>
  <p>Wenn ein Label (Subroutine) registriert wurde, wird das immer zuerst aufgerufen.</p>
  </dd>

</dl>

<h3 id="Function_Remarks">Bemerkungen</h3>
<p>Neue Skripte sollten eine Funktion anstelle einer Subroutine verwenden, um so das Risiko zu verringern, ein Skript zu erstellen, das nicht beendet werden kann, und um sicherstellen zu können, dass der übergebene Exitcode an Exit oder ExitApp beibehalten wird.</p>
<p>Es können beliebig viele OnExit-Funktionen registriert werden. Wenn zusätzlich noch ein Label (Subroutine) registriert wurde, werden die Funktionen aufgerufen, nachdem die Subroutine <a href="ExitApp.htm">ExitApp</a> aufgerufen hat. Eine OnExit-Funktion sollte in der Regel nicht ExitApp aufrufen; wäre dies der Fall, würde das Skript sofort terminiert werden.</p>

<h2 id="command">OnExit</h2>
<p class="warning"><strong>Veraltet:</strong> Dieser Befehl ist nicht für neue Skripte empfohlen. Verwenden Sie stattdessen die <a href="#function">OnExit</a>-Funktion.</p>
<pre class="Syntax"><span class="func">OnExit</span> <span class="optional">, Label</span></pre>

<h3 id="Command_Parameters">Parameter</h3>
<dl>

  <dt>Label</dt>
  <dd><p>Lässt man diesen Parameter weg, wird jedes zuvor registrierte Label deregistriert. Ansonsten kann der Name eines <a href="../misc/Labels.htm">Label</a>s angegeben werden, dessen Inhalt ausgeführt werden soll (als neuer <a href="../misc/Threads.htm">Thread</a>), wenn das Skript auf beliebige Weise beendet wird.</p></dd>
  
</dl>

<h3 id="Command_Remarks">Bemerkungen</h3>
<p><strong>WICHTIG</strong>: Anstatt das Skript zu terminieren, wird die angegebene Subroutine aufgerufen - das heißt, dass der <a href="ExitApp.htm">ExitApp</a>-Befehl in dieser Subroutine verwendet werden muss, wenn man das Skript terminieren will.</p>
<p>Die interne Variable <strong>A_ExitReason</strong> enthält nur einen Wert, wenn die OnExit-Subroutine entweder gerade läuft oder mindestens einmal aufgrund eines vorherigen Exitversuchs aufgerufen wurde. Wenn dies der Fall ist, enthält die Variable eines der Wörter aus der <a href="#ExitReason">unteren Tabelle</a>.</p>

<h2 id="Remarks">Bemerkungen</h2>
<p>Die Callback-Funktion oder Subroutine von OnExit wird aufgerufen, wenn das Skript in irgendeiner Form beendet wird (nur nicht, wenn das Beenden von so etwas wie "Task beenden" erzwungen wird). Sie wird auch aufgerufen, wann immer <a href="_SingleInstance.htm">#SingleInstance</a> und <a href="Reload.htm">Reload</a> eine ältere Instanz zum Terminieren auffordert.</p>
<p>Mit <code>OnMessage(0x0011, "WM_QUERYENDSESSION")</code> kann das Herunterfahren oder Abmelden des Betriebssystems erkannt und optional abgebrochen werden (siehe <a href="OnMessage.htm#shutdown">OnMessage-Beispiel #2</a> für ein funktionsfähiges Beispiel).</p>
<p>Der OnExit-<a href="../misc/Threads.htm">Thread</a> nimmt keine Rücksicht auf <a href="_MaxThreads.htm">#MaxThreads</a> (er wird bei Bedarf immer gestartet). Darüber hinaus kann dieser Thread, während er läuft, nicht von anderen <a href="../misc/Threads.htm">Threads</a> unterbrochen werden, einschließlich <a href="../Hotkeys.htm">Hotkeys</a>, <a href="Menu.htm">benutzerdefinierte Menüpunkte</a> und <a href="SetTimer.htm">zeitgesteuerte Subroutinen</a>. Allerdings wird er unterbrochen (und das Skript terminiert), wenn der Benutzer den Menüpunkt Exit im Tray-Menü oder Hauptmenü auswählt, oder das Skript aufgrund von <a href="Reload.htm">Reload</a> oder <a href="_SingleInstance.htm">#SingleInstance</a> zum Terminieren aufgefordert wird. Aus diesem Grund sollte die Callback-Funktion oder Subroutine von OnExit so gestaltet werden, dass sie schnell zum Ende kommen kann, sofern der Benutzer das nicht will.</p>
<p>Wenn der OnExit-<a href="../misc/Threads.htm">Thread</a> auf einen fehlerhaften Zustand wie z. B. Laufzeitfehler stößt, wird das Skript terminiert. Dadurch wird verhindert, dass das Skript aufgrund einer fehlerhaften Callback-Funktion oder Subroutine von OnExit nicht mehr terminiert werden kann.</p>
<p>Wenn der OnExit-<a href="../misc/Threads.htm">Thread</a> via <a href="Exit.htm">Exit</a> oder <a href="ExitApp.htm">ExitApp</a> inklusive Exitcode gestartet wurde, wird in <span class="ver">[v1.1.19]</span> und niedriger dieser Code ignoriert und verworfen. In <span class="ver">[v1.1.20+]</span> wird der initiale Exitcode verwendet, es sei denn, der Exitcode wurde durch Aufrufen von <a href="ExitApp.htm">ExitApp</a> mit einem neuen überschrieben.</p>
<p>Jede via Exitversuch gestartete Callback-Funktion oder Subroutine verwendet vorerst die Standardwerte von Einstellungen wie <a href="SendMode.htm">SendMode</a>. Diese Standardwerte können im <a href="../Scripts.htm#auto">automatischen Ausführungsbereich</a> geändert werden.</p>

<h2 id="ExitReason">Exit-Gründe</h2>
<table class="info">
  <tr>
    <th>Grund</th>
    <th abbr="Beschr">Beschreibung</th>
  </tr>
  <tr id="logoff">
    <td>Logoff</td>
    <td>Der Benutzer meldet sich ab.</td>
  </tr>
  <tr>
    <td>Shutdown</td>
    <td>Das System wird heruntergefahren oder neu gestartet (z. B. mit dem <a href="Shutdown.htm">Shutdown</a>-Befehl).</td>
  </tr>
  <tr id="close">
    <td>Close</td>
    <td>
      <p>Das Skript hat eine WM_CLOSE- oder WM_QUIT-Meldung empfangen, hatte einen kritischen Fehler, oder wurde auf andere Weise geschlossen. Obwohl all diese Ursachen ungewöhnlich sind, wird WM_CLOSE eventuell ausgelöst, wenn man <a href="WinClose.htm">WinClose</a> auf das Hauptfenster des Skripts anwendet. Um das Fenster zu schließen (zu verstecken), ohne das Skript zu terminieren, verwenden Sie <a href="WinHide.htm">WinHide</a>.</p>
      <p>Wenn das Skript wegen eines kritischen Fehlers oder der Zerstörung des <a href="../Program.htm#main-window">Hauptfensters</a> beendet wird, wird es nach Abschluss des OnExit-Threads bedingungslos terminiert.</p>
      <p>Wenn das Hauptfenster zerstört wird, ist es möglicherweise noch vorhanden, kann aber nicht angezeigt werden. Dieser Zustand kann durch Überwachung der WM_DESTROY-Meldung mittels <a href="OnMessage.htm">OnMessage()</a> erkannt werden.</p>
    </td>
  </tr>
  <tr>
    <td>Error</td>
    <td>Ein Laufzeitfehler ist in einem Skript aufgetreten, das weder Hotkeys hat noch <a href="_Persistent.htm">persistent</a> ist. Ein Laufzeitfehler ist beispielsweise ein <a href="Run.htm">Run/RunWait</a>, der das angegebene Programm oder Dokument nicht öffnen kann.</td>
  </tr>
  <tr>
    <td>Menu</td>
    <td>Der Benutzer hat Exit im Hauptfenster-Menü oder voreingestellten Tray-Menü ausgewählt.</td>
  </tr>
  <tr>
    <td>Exit</td>
    <td>Es wurden der <a href="Exit.htm">Exit</a>- oder <a href="ExitApp.htm">ExitApp</a>-Befehl verwendet (einschließlich <a href="Menu.htm">benutzerdefinierte Menüpunkte</a>).</td>
  </tr>
  <tr>
    <td>Reload</td>
    <td>Das Skript wird via <a href="Reload.htm">Reload</a>-Befehl oder -Menüpunkt neu geladen.</td>
  </tr>
  <tr>
    <td>Single</td>
    <td>Das Skript wird aufgrund von <a href="_SingleInstance.htm">#SingleInstance</a> mit einer neuen Instanz von sich selbst ersetzt.</td>
  </tr>
</table>

<h2 id="Related">Siehe auch</h2>
<p><a href="OnError.htm">OnError()</a>, <a href="OnMessage.htm">OnMessage()</a>, <a href="RegisterCallback.htm">RegisterCallback()</a>, <a href="OnClipboardChange.htm#function">OnClipboardChange()</a>, <a href="OnClipboardChange.htm#label">OnClipboardChange-Label</a>, <a href="ExitApp.htm">ExitApp</a>, <a href="Shutdown.htm">Shutdown</a>, <a href="_Persistent.htm">#Persistent</a>, <a href="../misc/Threads.htm">Threads</a>, <a href="Gosub.htm">Gosub</a>, <a href="Return.htm">Return</a>, <a href="Menu.htm">Menu</a></p>

<h2 id="Examples">Beispiele</h2>
<div class="ex" id="ExFnVsCmd">
<p><a class="ex_number" href="#ExFnVsCmd"></a> Funktion vs. Befehl.</p>
<p>Trotz der unterschiedlichen Herangehensweise haben beide Beispiele den gleichen Effekt: Sie fragen den Benutzer vor dem Beenden des Skripts. Um diese zu testen, klicken Sie mit der rechten Maustaste auf das Tray-Symbol und dann auf Exit.</p>
<pre class="NoIndent"><a href="_Persistent.htm">#Persistent</a>  <em>; Verhindert, dass sich das Skript automatisch beendet.</em>
OnExit("ExitFunk")

ExitFunk(ExitGrund, ExitCode)
{
    if ExitGrund not in Logoff,Shutdown
    {
        MsgBox, 4, , Wollen Sie das Skript wirklich beenden?
        IfMsgBox, No
            return 1  <em>; OnExit-Funktionen müssen ungleich null zurückgeben, um ein Exit zu verhindern.</em>
    }
    <em>; Rufen Sie ExitApp nicht auf -- dies würde verhindern, dass andere OnExit-Funktionen aufgerufen werden können.</em>
}</pre>
<pre><a href="_Persistent.htm">#Persistent</a>  <em>; Verhindert, dass sich das Skript automatisch beendet.</em>
OnExit, ExitSub  
return

ExitSub:
if A_ExitReason not in Logoff,Shutdown  <em>; Vermeiden Sie in dieser Zeile Leerzeichen neben dem Komma.</em>
{
    MsgBox, 4, , Wollen Sie das Skript wirklich beenden?
    IfMsgBox, No
        return
}
ExitApp  <em>; Ein Skript mit einer OnExit-Subroutine wird nicht terminiert, solange die Subroutine kein ExitApp verwendet.</em></pre>
</div>

<div class="ex" id="ExFnObj">
<p><a class="ex_number" href="#ExFnObj"></a> Registriert ein Objekt, das bei Exit aufgerufen werden soll.</p>
<pre><a href="_Persistent.htm">#Persistent</a>  <em>; Verhindert, dass sich das Skript automatisch beendet.</em>
OnExit(<a href="ObjBindMethod.htm">ObjBindMethod</a>(MeinObjekt, "Beenden"))

class MeinObjekt
{
    Beenden()
    {
        MsgBox, MeinObjekt räumt vor dem Beenden auf...
        <em>/*
        this.SageAufWiedersehen()
        this.SchließeNetzwerkVerbindungen()
        */</em>
    }
}</pre>
</div>

</body>
</html>
