<!DOCTYPE HTML>
<html lang="de">
<head>
<title>Gui - Syntax &amp; Verwendung | AutoHotkey</title>
<meta name="description" content="Der Gui-Befehl erstellt und verwaltet Fenster und Steuerelemente. Solche Fenster können zur Dateneingabe oder als individuelle Benutzerschnittstellen verwendet werden." />
<meta name="ahk:equiv-v2" content="objects/Gui.htm" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
</head>
<body>

<h1>GUI</h1>

<p>Erstellt und verwaltet Fenster und Steuerelemente. Solche Fenster können zur Dateneingabe oder als individuelle Benutzerschnittstellen verwendet werden.</p>
<pre class="Syntax"><span class="func">Gui</span>, <a href="#SubCommands">Unterbefehl</a> <span class="optional">, Wert1, Wert2, Wert3</span></pre>
<p>Die Parameter <em>Unterbefehl</em>, <em>Wert1</em>, <em>Wert2</em> und <em>Wert3</em> sind voneinander abhängig und können wie folgt genutzt werden.</p>

<h2 id="toc">Inhaltsverzeichnis</h2>
<ul>
    <li><a href="#SubCommands">Unterbefehle</a></li>
    <li><a href="#ControlOptions">Optionen für ein Steuerelement (Gui Add)</a><ul>
      <li><a href="#PosSize">Position und Größe von Steuerelementen ändern</a></li>
      <li><a href="#Events">Benutzereingaben speichern und verarbeiten</a></li>
      <li><a href="#OtherOptions">Steuerelemente: Häufig verwendete Styles und Optionen</a></li>
    </ul></li>
    <li><a href="#Labels">Fensterereignisse</a>: <a href="#GuiClose">GuiClose</a> | <a href="#GuiEscape">GuiEscape</a> | <a href="#GuiSize">GuiSize</a> | <a href="#GuiContextMenu">GuiContextMenu</a> | <a href="#GuiDropFiles">GuiDropFiles</a></li>
    <li><a href="#MultiWin">Mehrere GUI-Fenster erstellen</a></li>
    <li><a href="#DefaultWin">GUI-Ereignisse, -Threads und -Subroutinen</a></li>
    <li><a href="#Navigate">Navigation mit der Tastatur</a></li>
    <li><a href="#Appear">Fensterdarstellung</a></li>
    <li><a href="#GenRemarks">Allgemeine Bemerkungen</a></li>
    <li><a href="#Examples">Beispiele</a></li>
</ul>

<h2 id="SubCommands">Unterbefehle</h2>
<p>Geben Sie für <em>Unterbefehl</em> Folgendes an:</p>
<ul>
    <li><a href="#New">New</a> <span class="ver">[v1.1.04+]</span>: Erstellt ein neues Fenster.</li>
    <li><a href="#Add">Add</a>: Erstellt ein Steuerelement wie z. B. Text, Button oder CheckBox.</li>
    <li><a href="#Show">Show</a>: Macht das Fenster sichtbar. Kann ein Fenster auch minimieren, maximieren oder verschieben.</li>
    <li><a href="#Submit">Submit</a>: Speichert die Benutzereingaben und versteckt optional das Fenster.</li>
    <li><a href="#Cancel">Cancel</a> / <a href="#Hide">Hide</a>: Versteckt das Fenster.</li>
    <li><a href="#Destroy">Destroy</a>: Entfernt das Fenster.</li>
    <li><a href="#Font">Font</a>: Bestimmt Schriftart, Schriftgröße, Schriftstil und Schriftfarbe für danach erstellte Steuerelemente.</li>
    <li><a href="#Color">Color</a>: Bestimmt die Hintergrundfarbe des Fensters und/oder aller darin enthaltenen Steuerelemente.</li>
    <li><a href="#Margin">Margin</a>: Bestimmt den Abstand bzw. Freiraum, der bei Steuerelementen ohne expliziter Positionsangabe verwendet wird.</li>
    <li><a href="#Options">Fensterspezifische Optionen und Styles</a>: Bestimmen das Aussehen und Verhalten des Fensters.</li>
    <li><a href="#Menu">Menu</a>: Fügt eine Menüleiste hinzu oder entfernt sie.</li>
    <li><a href="#Minimize">Minimize</a> / <a href="#Maximize">Maximize</a> / <a href="#Restore">Restore</a>: Minimiert, Maximiert oder stellt ein Fenster wieder her.</li>
    <li><a href="#Flash">Flash</a>: Lässt das Fenster und seine Taskleistenschaltfläche einmal aufblinken.</li>
    <li><a href="#Default">Default</a>: Ändert den Standard-GUI-Fensternamen des aktuellen Threads.</li>
</ul>

<h3 id="New">New <span class="ver">[v1.1.04+]</span></h3>
<p>Erstellt ein neues Fenster und macht es zum <a href="#Default">Standardfenster</a> für den aktuellen Thread.</p>
<pre class="Syntax"><span class="func">Gui</span>, New <span class="optional">, Optionen, Titel</span>
<span class="func">Gui</span>, GuiName:New <span class="optional">, Optionen, Titel</span></pre>
<p>Wenn <em>GuiName</em> angegeben ist, wird eine neue GUI erstellt und dabei alle existierenden GUIs mit diesem Namen zerstört. Ansonsten wird eine neue GUI erstellt, die weder benannt noch nummeriert ist.</p>
<p><em>Optionen</em> kann vom Haupt-GUI-Befehl unterstützte <a href="#Options">Optionen</a> enthalten.</p>
<p>Lässt man <em>Titel</em> weg, wird der Dateiname des Skripts verwendet.</p>
<p>Nachteile und Vorbehalte:</p>
<ul>
    <li>In der Regel ist <code>Gui New</code> nicht notwendig, weil in den meisten Fällen das Fenster bei Bedarf automatisch erstellt wird.</li>
    <li>Das neue Fenster wird nur als <a href="#Default">Standardfenster</a> für den <em>aktuellen</em> Thread bestimmt - alle anderen Nicht-GUI-Threads verwenden weiterhin eine <a href="#DefaultWin">Standard-GUI-Nummer</a> von 1.</li>
    <li>Wenn die GUI keinen Namen hat und nicht als <a href="#Default">Standard-GUI</a> definiert ist, muss sie anhand ihrer HWND-Nummer (eindeutigen ID) identifiziert werden. Verwenden Sie die Option <a href="#GuiHwndOutputVar">+Hwnd<i>GuiHwnd</i></a>, um die HWND-Nummer des neuen Fensters in <em>GuiHwnd</em> zu speichern. Verwenden Sie dann <code>Gui, %<i>GuiHwnd</i>%:Default</code>, um dieses Fenster als Standardfenster für nachfolgende Gui-Befehle zu machen.</li>
</ul>
<p>Vorteile:</p>
<ul>
    <li>Der Aufruf von <code>Gui New</code> stellt sicher, dass eine neue GUI erstellt wird und keine bereits vorhandene GUIs modifiziert werden. Eventuell erhöht dieser Unterbefehl zudem die Chance, dass andere Personen (oder später der Verfasser selbst) den Zweck des Skripts besser verstehen.</li>
    <li><code>Gui New</code> verhindert, dass GUIs mit eindeutigen Namen oder Nummern versehen werden müssen. Dieser Unterbefehl ist besonders nützlich, wenn das Skript mehr als eine GUI erstellen muss oder in andere Skripte eingebunden werden soll.</li>
    <li>Manchmal ist es intuitiver, den Titel der GUI bereits bei ihrer Erstellung festzulegen, und nicht erst, wenn sie <a href="#Show">sichtbar gemacht</a> wird.</li>
</ul>
<p>Wenn kein Name angegeben ist, gilt folgendes:</p>
<ul>
    <li>Spezielle <a href="#Labels">Label</a> wie <a href="#GuiClose">GuiClose</a> haben standardmäßig das Präfix "Gui", sofern nicht via <a href="#PlusLabel">+Label<em>Präfix</em></a> überschrieben.</li>
    <li>Immer wenn die GUI einen neuen Thread startet, enthält <a href="../Variables.htm#Gui">A_Gui</a> eine HWND-Nummer anstelle eines Namens.</li>
</ul>
<p class="note"><strong>Hinweis</strong>: Früher vor <span class="ver">[v1.1.08]</span> setzte dieser Unterbefehl kein Standard-GUI-Fenster, wenn ein Name angegeben war.</p>

<h3 id="Add">Add</h3>
<p>Fügt ein Steuerelement in das GUI-Fenster ein (und erstellt vorher das GUI-Fenster, falls notwendig).</p>
<pre class="Syntax"><span class="func">Gui</span>, Add, Steuerelement <span class="optional">, Optionen, Text</span></pre>
<p><em>Steuerelement</em> kann folgendes sein:</p>
<ul>
    <li><a href="GuiControls.htm#Text">Text</a>, <a href="GuiControls.htm#Edit">Edit</a>, <a href="GuiControls.htm#UpDown">UpDown</a>, <a href="GuiControls.htm#Picture">Picture</a></li>
    <li><a href="GuiControls.htm#Button">Button</a>, <a href="GuiControls.htm#Checkbox">Checkbox</a>, <a href="GuiControls.htm#Radio">Radio</a></li>
    <li><a href="GuiControls.htm#DropDownList">DropDownList</a>, <a href="GuiControls.htm#ComboBox">ComboBox</a></li>
    <li><a href="GuiControls.htm#ListBox">ListBox</a>, <a href="ListView.htm">ListView</a>, <a href="TreeView.htm">TreeView</a></li>
    <li><a href="GuiControls.htm#Link">Link</a>, <a href="GuiControls.htm#Hotkey">Hotkey</a>, <a href="GuiControls.htm#DateTime">DateTime</a>, <a href="GuiControls.htm#MonthCal">MonthCal</a></li>
    <li><a href="GuiControls.htm#Slider">Slider</a>, <a href="GuiControls.htm#Progress">Progress</a></li>
    <li><a href="GuiControls.htm#GroupBox">GroupBox</a>, <a href="GuiControls.htm#Tab">Tab</a>, <a href="GuiControls.htm#StatusBar">StatusBar</a></li>
    <li><a href="GuiControls.htm#ActiveX">ActiveX</a> (z. B. Internet Explorer Control)</li>
    <li><a href="GuiControls.htm#Custom">Custom</a></li>
</ul>
<p><em>Optionen</em> ist eine Zeichenkette von null oder mehr Optionen, wie in den folgenden Abschnitten beschrieben:</p>
<ul>
  <li><a href="#PosSize">Position und Größe von Steuerelementen ändern</a></li>
  <li><a href="#Events">Benutzereingaben speichern und verarbeiten</a></li>
  <li><a href="#OtherOptions">Steuerelemente: Häufig verwendete Styles und Optionen</a></li>
</ul>
<p>Zum Beispiel:</p>
<pre>Gui, Add, Text,, Bitte tragen Sie Ihren Namen ein:
Gui, Add, Edit, vName
Gui, Show</pre>

<h3 id="Show">Show</h3>
<p>Sofern in <em>Optionen</em> nicht anders angegeben, wird dieser Unterbefehl das Fenster sichtbar machen, entminimieren (falls notwendig), <a href="WinActivate.htm">aktivieren</a> und den Fenstertitel setzen.</p>
<pre class="Syntax"><span class="func">Gui</span>, Show <span class="optional">, Optionen, Titel</span></pre>
<p>Lässt man <em>Titel</em> weg, wird der zuvor gesetzte Titel verwendet (wenn es keinen gibt, wird der Dateiname des Skripts verwendet).</p>
<p>Die unteren Optionen X, Y, W und H können weggelassen werden, um die zuvor gesetzte Größe und Position des Fensters zu verwenden. Wenn es keine zuvor gesetzte Position gibt, wird das Fenster automatisch auf dem Bildschirm zentriert, je nachdem, ob die unten erwähnten Optionen X und Y fehlen. Wenn es keine zuvor gesetzte Größe gibt, wird die Größe des Fensters automatisch an die Größe und Position aller darin enthaltenen Steuerelemente angepasst.</p>
<p>Folgende Zeichenketten können in <em>Optionen</em> angegeben werden (jede Zahl muss im dezimalen Format sein):</p>
<p><strong>Wn</strong>: Geben Sie für <strong>n</strong> die Breite (in Pixel) des Clientbereichs an (das ist der Fensterbereich ohne Rahmen, Titelleiste und <a href="#Menu">Menüleiste</a>).</p>
<p><strong>Hn</strong>: Geben Sie für <strong>n</strong> die Höhe des Clientbereichs an (in Pixel).</p>
<p><strong>Xn</strong>: Geben Sie für <strong>n</strong> die X-Position des Fensters auf dem Bildschirm an (in Pixel). Position 0 ist die erste linke sichtbare Pixelspalte auf dem Bildschirm.</p>
<p><strong>Yn</strong>: Geben Sie für <strong>n</strong> die Y-Position des Fensters auf dem Bildschirm an (in Pixel). Position 0 ist die erste obere sichtbare Pixelzeile auf dem Bildschirm.</p>
<p><strong>Center</strong>: Zentriert das Fenster horizontal und vertikal auf dem Bildschirm.</p>
<p><strong>xCenter</strong>: Zentriert das Fenster horizontal auf dem Bildschirm. Zum Beispiel: <code>Gui, Show, xCenter y0</code>.</p>
<p><strong>yCenter</strong>: Zentriert das Fenster vertikal auf dem Bildschirm.</p>
<p id="AutoSize"><strong>AutoSize</strong>: Passt die Größe des Fensters automatisch an die Größe und Position aller darin enthaltenen sichtbaren Steuerelemente an. Diese Option ist besonders hilfreich, wenn neue Steuerelemente hinzugefügt werden, oder wenn bereits vorhandene Steuerelemente größer, kleiner, sichtbar oder unsichtbar gemacht werden. Zum Beispiel: <code>Gui, Show, AutoSize Center</code>.</p>
<p><strong>Minimize</strong>: Minimiert das Fenster und aktiviert das darunterliegende Fenster.</p>
<p><strong>Maximize</strong>: Maximiert und aktiviert das Fenster.</p>
<p><strong>Restore</strong>: Entminimiert oder entmaximiert das Fenster, falls nötig. Das Fenster wird zudem sichtbar gemacht und aktiviert, falls nötig.</p>
<p><strong>NoActivate</strong>: Entminimiert oder entmaximiert das Fenster, falls nötig. Das Fenster wird zudem sichtbar gemacht, ohne es zu aktivieren.</p>
<p><strong>NA</strong>: Macht das Fenster sichtbar, ohne es zu aktivieren. Wenn das Fenster minimiert ist, bleibt es minimiert, aber wird eventuell in der Z-Rangordnung nach oben steigen (die aktuelle Rangordnung kann via Alt-Tab-Fenster überprüft werden). Wenn das Fenster zuvor versteckt war, bewirkt diese Option, dass es über dem aktiven Fenster erscheint, obwohl das aktive Fenster nicht deaktiviert ist.</p>
<p><strong>Hide</strong>: Versteckt das Fenster und aktiviert das darunterliegende Fenster. Funktionsgemäß ist das identisch mit <a href="#Cancel">Gui Cancel</a>. Diese Option hat aber den Vorteil, dass es ein verstecktes Fenster verschieben, größer/kleiner machen oder neu betiteln kann, ohne es sichtbar zu machen. Zum Beispiel: <code>Gui, Show, Hide x55 y66 w300 h200, Neuer Titel</code>.</p>

<h3 id="Submit">Submit</h3>
<p>Speichert den Inhalt der Steuerelemente in ihre <a href="#var">zugeordneten Variablen</a> (falls vorhanden) und versteckt das Fenster (mit NoHide kann das Verstecken verhindert werden).</p>
<pre class="Syntax"><span class="func">Gui</span>, Submit <span class="optional">, NoHide</span></pre>
<p>Steuerelemente, die mehrere Ausgabefelder erzeugen, z. B. eine <a href="GuiControls.htm#ListBoxMulti">Mehrfachauswahl-ListBox</a>, verwenden das <a href="#Delimiter">aktuelle Trennzeichen</a> des Fensters, um diese voneinander zu trennen. Wenn das Fenster nicht existiert (z. B. weil es via <a href="#Destroy">Gui Destroy</a> zerstört wurde), ist dieser Unterbefehl wirkungslos.</p>

<div id="Cancel"><h3 id="Hide">Cancel / Hide</h3></div>
<p>Versteckt das Fenster, ohne den Inhalt der Steuerelemente in ihre <a href="#var">zugeordneten Variablen</a> zu speichern.</p>
<pre class="Syntax"><span class="func">Gui</span>, Cancel
<span class="func">Gui</span>, Hide</pre>
<p>Wenn das Fenster nicht existiert (z. B. weil es via <a href="#Destroy">Gui Destroy</a> zerstört wurde), ist dieser Unterbefehl wirkungslos.</p>

<h3 id="Destroy">Destroy</h3>
<p>Entfernt das Fenster (falls vorhanden) und alle darin enthaltenen Steuerelemente, um die entsprechenden Speicher- und Systemressourcen freizugeben.</p>
<pre class="Syntax"><span class="func">Gui</span>, Destroy</pre>
<p>Falls das Fenster später neu erstellt wird, beginnen alle Fenstereigenschaften wie Farbe und Schrift wieder mit ihren Standardwerten (als hätte das Fenster nie existiert). Alle GUI-Fenster werden automatisch zerstört, sobald das Skript beendet wird.</p>

<h3 id="Font">Font</h3>
<p>Bestimmt Schriftart, Schriftgröße, Schriftstil und/oder Schriftfarbe für danach erstellte Steuerelemente.</p>
<pre class="Syntax"><span class="func">Gui</span>, Font <span class="optional">, Optionen, SchriftName</span></pre>
<p>Zum Beispiel:</p>
<pre>Gui, Font, s10, Verdana  <em>; Schriftart Verdana mit Größe 10.</em></pre>
<p>Die letzten beiden Parameter können weggelassen werden, um die Standard-GUI-Schriftart des Systems, inklusive Größe und Farbe, wiederherzustellen.</p>
<p><em>SchriftName</em> ist der Name einer beliebigen Schrift, z. B. eine aus der <a href="../misc/FontsStandard.htm">Schriftentabelle</a>. Wenn <em>SchriftName</em> weggelassen wird oder im System nicht vorhanden ist, wird die zuvor gesetzte Schriftart verwendet (wenn es keine gibt, wird die Standard-GUI-Schriftart des Systems verwendet). Dieses Verhalten ist nützlich, um ein GUI-Fenster, das für mehrere Systeme gedacht ist, eine ähnliche Schrift verwenden zu lassen, selbst wenn in einigen dieser Systeme die bevorzugte Schrift fehlt. Das folgende Beispiel bewirkt, dass Verdana gegenüber Arial bevorzugt wird, welches wiederum gegenüber MS Sans Serif bevorzugt wird:</p>
<pre>Gui, Font,, MS Sans Serif
Gui, Font,, Arial
Gui, Font,, Verdana  <em>; Bevorzugte Schrift.</em></pre>
<p>Wenn der <em>Optionen</em>-Parameter leer ist, werden die Attribute der zuvor gesetzten Schrift verwendet. Ansonsten können Sie ersatzweise einen oder mehrere der folgenden Optionsbuchstaben angeben:</p>
<p><strong>C</strong>: Der Name einer Farbe (siehe <a href="Progress.htm#colors">Farbentabelle</a>) oder ein RGB-Wert, oder das Wort Default, um die Standardfarbe des Systems zu setzen (üblicherweise schwarz). Beispielwerte: <code>cRed</code>, <code>cFFFFAA</code>, <code>cDefault</code>. Hinweis: <a href="GuiControls.htm#Button">Button-Steuerelemente</a> können nicht mit einer benutzerdefinierten Farbe versehen werden. Alternativ kann man auch die C-Option nutzen, um die Schriftfarbe für einzelne Steuerelemente bei ihrer Erstellung zu bestimmen. Zum Beispiel: <code>Gui, Add, Text, cRed, Mein Text</code>.</p>
<p><strong>S</strong>: Größe (in Punkten). Zum Beispiel: <code>s12</code> (muss dezimal sein).</p>
<p><strong>W</strong>: Breite (Dicke). Eine Zahl im Bereich von 1 bis 1000 (400 ist normal und 700 ist fett). Zum Beispiel: <code>w600</code> (muss dezimal sein).</p>
<p>Die folgenden Wörter werden auch unterstützt: <strong>bold</strong>, <em>italic</em>, <s>strike</s>, <u>underline</u> und norm (übersetzt: fett, kursiv, durchgestrichen, unterstrichen und normal). <em>Norm</em> stellt die normale Breite/Dicke der Schrift wieder her und schaltet italic, strike und underline aus (Farbe und Größe bleiben unberührt). Man kann norm zum Beispiel nutzen, um alle Attribute auszuschalten und danach bestimmte Attribute wieder einzuschalten. <code>norm italic</code> beispielsweise würde die Schrift normalisieren und danach kursiv machen.</p>
<p>Mehrere Optionen müssen mit einem Leerzeichen voneinander getrennt werden. Zum Beispiel: <code>cBlue s12 bold</code>.</p>
<p>Bei <a href="#MultiWin">mehreren GUI-Fenstern</a> sollte man beachten, dass jedes Fenster seine eigenen gespeicherten Schrifteinstellungen abruft, wenn neue Steuerelemente erstellt werden.</p>
<p>Pro forma ist noch zu erwähnen, dass das Betriebssystem vorgefertigte Dialogfenster anbietet, die der Benutzer zum Auswählen einer Farbe, einer Schrift oder eines Symbols verwenden kann. Solche Dialogfenster können via <a href="DllCall.htm">DllCall()</a> angezeigt werden, wie auf <a href="https://github.com/majkinetor/mm-autohotkey/tree/master/Dlg">GitHub</a> gezeigt.</p>
<p id="fontq"><strong>Q</strong>: <span class="ver">[AHK_L 19+]:</span> Textdarstellungsqualität. Zum Beispiel: <code>q3</code>. Nach Q muss eine Nummer aus der folgenden Tabelle erfolgen:</p>
<table class="info">
    <tr>
        <th>Nummer</th>
        <th abbr="Konstante">Windows-Konstante</th>
        <th abbr="Beschr">Beschreibung</th>
    </tr>
    <tr>
        <td>0</td>
        <td>DEFAULT_QUALITY</td>
        <td>Die Darstellung der Schrift spielt keine Rolle.</td>
    </tr>
    <tr>
        <td>1</td>
        <td>DRAFT_QUALITY</td>
        <td>Die exakte Übereinstimmung mit logischen Schriftattributen (fett, kursiv und so weiter) ist wichtiger als die Zeichenqualität der Schrift.</td>
    </tr>
    <tr>
        <td>2</td>
        <td>PROOF_QUALITY</td>
        <td>Die Zeichenqualität der Schrift ist wichtiger als die exakte Übereinstimmung mit logischen Schriftattributen (fett, kursiv und so weiter).</td>
    </tr>
    <tr>
        <td>3</td>
        <td>NONANTIALIASED_QUALITY</td>
        <td>Die Schrift wird nie antialiasiert; das heißt, dass die eckigen Kanten einer Schrift nicht geglättet werden.</td>
    </tr>
    <tr>
        <td>4</td>
        <td>ANTIALIASED_QUALITY</td>
        <td>Die Schrift wird antialiasiert bzw. geglättet, wenn die Schrift dies unterstützt und nicht zu klein oder zu groß ist.</td>
    </tr>
    <tr>
        <td>5</td>
        <td>CLEARTYPE_QUALITY</td>
        <td>Windows XP und höher: Die Schrift wird (wenn möglich) mit der ClearType-Antialiasing-Methode gerendert.</td>
    </tr>
</table>
<p>Weitere Informationen darüber, was diese Werte bedeuten, finden Sie unter <a href="https://msdn.microsoft.com/de-de/library/dd183499.aspx">MSDN: CreateFont</a>.</p>
<p>Standardmäßig gilt die höchste Qualitätseinstellung. Deshalb wird dieses Feature eher dazu verwendet, Kantenglättung zu deaktivieren, um den Text bei bestimmten Fällen besser lesbar zu machen.</p>

<h3 id="Color">Color</h3>
<p>Bestimmt die Hintergrundfarbe des Fensters und/oder aller darin enthaltenen Steuerelemente.</p>
<pre class="Syntax"><span class="func">Gui</span>, Color <span class="optional">, Fensterfarbe, Steuerelementfarbe</span></pre>
<p><em>Fensterfarbe</em> definiert die Hintergrundfarbe des GUI-Fensters selbst. <em>Steuerelementfarbe</em> wird auf alle gegenwärtigen und zukünftigen Steuerelemente im Fenster angewendet (sofern dieses Steuerelement benutzerdefinierte Farben unterstützt). <em>Steuerelementfarbe</em> hat nur eine einmalige Auswirkung auf <a href="ListView.htm">ListView</a>- und <a href="TreeView.htm">TreeView</a>-Steuerelemente; nachfolgende Änderungen der <em>Steuerelementfarbe</em> sind bei diesen Steuerelementen wirkungslos. In solchen Fällen nutzt man <code>GuiControl +BackgroundFF9977, MeineListView</code>, um die Farbe explizit zu ändern.</p>
<p>Beide Parameter können leer gelassen werden, um die entsprechende Farbe beizubehalten. Ansonsten kann eine der 16 <a href="Progress.htm#colors">HTML-Hauptfarben</a> oder ein 6-stelliger RGB-Wert (0x-Präfix ist optional) angegeben werden, oder das Wort "Default", um die Standardfarbe wiederherzustellen. Beispielwerte: <code>Silver</code>, <code>FFFFAA</code>, <code>0xFFFFAA</code>, <code>Default</code>.</p>
<p>Ein Fenster benutzt als Hintergrundfarbe standardmäßig die Standardschaltflächenfarbe des Systems, während ein Steuerelement als Hintergrundfarbe standardmäßig die Standardfensterfarbe des Systems benutzt (üblicherweise weiß).</p>
<p>Die Farbe der <a href="#Menu">Menüleiste</a> und aller darin enthaltenen Untermenüs können wie folgt geändert werden: <code><a href="Menu.htm">Menu</a>, MeineMenüleiste, Color, White</code>.</p>
<p>Mit <a href="WinSet.htm#TransColor">WinSet TransColor</a> kann der Hintergrund transparent gemacht werden. Wenn Sie dies jedoch tun, ohne zuvor eine benutzerdefinierte Fensterfarbe via <a href="#Color">Gui Color</a> zugewiesen zu haben, werden Button-Steuerelemente ebenfalls transparent. Um das zu verhindern, weisen Sie zunächst eine benutzerdefinierte Farbe zu und machen Sie diese dann transparent. Zum Beispiel:</p>
<pre>Gui, Color, EEAA99
Gui +LastFound  <em>; Macht das GUI-Fenster zum <a href="../misc/WinTitle.htm#LastFoundWindow">zuletzt gefundenen Fenster</a> für die Zeile darunter.</em>
WinSet, TransColor, EEAA99</pre>
<p>Die folgenden Zeilen können hinzugefügt werden, um den Rahmen und die Titelleiste eines Fensters zu entfernen, das <strong>bereits</strong> transparent gemacht wurde:</p>
<pre>Gui -Caption  <em>; Oder <i>Gui, GuiName:-Caption</i>, falls es nicht das <a href="#DefaultWin">Standardfenster</a> ist.</em></pre>
<p>Weiter unten finden Sie das Beispiel einer Bildschirmanzeige (OSD), die zeigt, wie diese Methode praktisch eingesetzt werden kann.</p>

<h3 id="Margin">Margin</h3>
<p>Bestimmt die Anzahl der Pixel, die auf der linken/rechten und oberen/unteren Seite des Fensters freigelassen werden sollen, wenn Steuerelemente aufgrund fehlender <a href="#XY">X- oder Y-Koordinate</a> automatisch positioniert werden.</p>
<pre class="Syntax"><span class="func">Gui</span>, Margin <span class="optional">, X, Y</span></pre>
<p>Diese Abstände werden auch genutzt, um den vertikalen und horizontalen Abstand zwischen automatisch positionierten Steuerelementen zu bestimmen. Außerdem werden diese Abstände zur Berechnung der Fenstergröße herangezogen, wenn <a href="#Show">Gui Show</a> das erste Mal verwendet wird (wenn keine explizite Größe angegeben ist).</p>
<p><code>Gui, Margin</code> beeinflusst nur das <a href="#Default">Standardfenster</a>, während <code>Gui, Name:Margin</code> nur Einfluss auf das <a href="#MultiWin">benannte Fenster</a> hat. Wenn dieser Unterbefehl nicht verwendet wird, werden die Ränder des Fensters beim Hinzufügen des ersten Steuerelements standardmäßig mit Abständen versehen, die proportional zur Größe der aktuell ausgewählten <a href="#Font">Schrift</a> sind (0.75 mal Schrifthöhe für Unten &amp; Oben, 1.25 mal Schriftbreite für Links &amp; Rechts).</p>
<p>Man kann die Abstände ändern, während Steuerelemente hinzugefügt werden. Allerdings gelten solche Änderungen nur für Steuerelemente, die nachträglich hinzugefügt werden, nicht für Steuerelemente, die bereits vorhanden sind. Wenn man X oder Y weglässt, bleibt der entsprechende Abstand unverändert.</p>

<h3 id="Options">Optionen und Styles für ein Fenster</h3>
<p>Nach dem GUI-Befehl können eine oder mehrere Optionen angegeben werden.</p>
<pre class="Syntax"><span class="func">Gui</span>, +/-Option1 +/-Option2 ...</pre>
<p>Aus Leistungsgründen ist es besser, alle Optionen auf einer Zeile zu setzen, bevor das Fenster erstellt wird (das heißt, bevor andere Unterbefehle wie <a href="#Add">Gui Add</a> verwendet werden).</p>
<p>Der Effekt des Befehls ist kumulativ (summierend); das heißt, dass dieser Befehl nur die explizit angegebenen Optionen ändert, alle anderen bleiben unverändert.</p>
<p>Geben Sie ein Pluszeichen an, um die Option hinzuzufügen, oder ein Minuszeichen, um sie zu entfernen. Zum Beispiel:</p>
<pre>Gui +Resize -MaximizeBox  <em>; Ändert die Einstellungen des <a href="#DefaultWin">Standard</a>-GUI-Fensters.</em>
Gui <strong>MeineGui:</strong>+Resize -MaximizeBox  <em>; Ändert die Einstellungen der GUI namens <i>MeineGui</i>.</em></pre>
<p><strong>AlwaysOnTop</strong>: Gibt dem Fenster die Eigenschaft, immer im Vordergrund bzw. immer vor allen anderen Fenstern sichtbar zu sein, was den gleichen Effekt hat wie <a href="WinSet.htm#AlwaysOnTop">WinSet AlwaysOnTop</a>.</p>
<p><strong>Border</strong>: Stattet das Fenster mit einem dünnen Rahmen aus. Diese Option benutzt man eher selten.</p>
<p><strong>Caption</strong> (standardmäßig vorhanden): Stattet das Fenster mit einer Titelleiste und einem dicken Rahmen aus. Beachten Sie, dass die Titelleiste eines Fensters erst entfernt werden sollte, nachdem man bestimmte Farben des Fensters via <a href="WinSet.htm#TransColor">WinSet TransColor</a> transparent gemacht hat.</p>
<p id="Delimiter"><strong>Delimiter</strong>: Bewirkt, dass das Fenster nicht den Vertikalstrich (|), sondern ein beliebig anderes Zeichen als Trennzeichen verwendet, wenn die Inhalte der Steuerelemente via <a href="#Add">Gui Add</a> hinzugefügt, via <a href="GuiControl.htm">GuiControl</a> modifiziert, oder via <a href="#Submit">Gui Submit</a> oder <a href="GuiControlGet.htm">GuiControlGet</a> abgerufen werden. Geben Sie das gewünschte Trennzeichen direkt nach dem Wort Delimiter an. Zum Beispiel kann man mit <code>Gui +Delimiter`n</code> ein Zeilenumbruchszeichen als Trennzeichen definieren, das besonders gut für <a href="../Scripts.htm#continuation">Fortsetzungsbereiche</a> geeignet ist. Mit <code>Gui +Delimiter|</code> kann man wiederum das Standardtrennzeichen wiederherstellen. Wenn ein Leer- oder Tabulatorzeichen notwendig ist, kann man <code>Gui +DelimiterSpace</code> oder <code>Gui +DelimiterTab</code> angeben. Das Ändern des Trennzeichens wirkt sich auf alle vorhandenen und nachfolgenden <a href="../misc/Threads.htm">Threads</a> aus, die sich auf dieses bestimmte Fenster beziehen.</p>
<p><strong>Disabled</strong>: Deaktiviert das Fenster, um den Benutzer daran zu hindern, mit den darin enthaltenen Steuerelementen zu interagieren. Diese Option wird oft bei Fenstern benutzt, die untergeordnete Fenster haben (siehe <a href="#Owner">Owner</a>).</p>
<p id="DPIScale"><strong>DPIScale</strong> <span class="ver">[v1.1.11+]</span>: Verwenden Sie <code>Gui -DPIScale</code>, um die üblicherweise aktive DPI-Skalierung zu deaktivieren. Wenn die DPI-Skalierung auf einem System mit benutzerdefinierter DPI-Einstellung aktiviert ist, passen die Gui-Unterbefehle automatisch ihre Koordinaten und Größen an, um Steuerelemente in etwa gleich groß aussehen zu lassen (aber in höherer Auflösung). Bei einem DPI-Wert von beispielsweise 144 (150%) würde <code>Gui Show, w100</code> die GUI 150 Pixel breit machen (<a href="../Variables.htm#GuiWidth">A_GuiWidth</a> enthält aber weiterhin 100). <a href="../Variables.htm#ScreenDPI">A_ScreenDPI</a> enthält die aktuelle DPI des Systems.</p>
<p>Die DPI-Skalierung betrifft nur Gui-Unterbefehle; das heißt, dass Koordinaten aus anderen Quellen wie ControlGetPos oder WinGetPos nicht funktionieren werden. Es gibt eine Reihe von Möglichkeiten, damit umzugehen:</p>
<ul>
    <li>Vermeiden Sie hartcodierte Koordinaten, wenn möglich. Zum Beispiel können Sie zum Positionieren von Steuerelementen die Optionen <a href="#xp">xp</a>, <a href="#xs">xs</a>, <a href="#xm">xm</a> und <a href="#PosPlusMargin">x+m</a> nutzen und die Höhe in <a href="#R">Textzeilen</a> statt Pixel angeben.</li>
    <li>Sie können die Skalierung jederzeit aktivieren (<code>Gui +DPIScale</code>) und deaktivieren (<code>Gui -DPIScale</code>). Die Änderung der Einstellung hat keinen Einfluss auf bereits gesetzte Positionen oder Größen.</li>
    <li>Passen Sie die Koordinaten manuell an. <code>x*(A_ScreenDPI/96)</code> beispielsweise wandelt logische Koordinaten bzw. Gui-Koordinaten (in diesem Fall x) in physische Koordinaten bzw. Nicht-Gui-Koordinaten um.</li>
</ul>
<p id="GuiHwndOutputVar"><strong>Hwnd</strong><em>AusgabeVar</em> <span class="ver">[v1.1.04+]:</span> Diese Option speichert die HWND-Nummer (eindeutige ID) der GUI in <em>AusgabeVar</em>. Zum Beispiel: <code>Gui +HwndMeineGuiHwnd</code>. Wenn man diese Option innerhalb einer Funktion verwendet, wird <em>AusgabeVar</em> als <a href="../Functions.htm#DynVar">dynamische Variable</a> behandelt. Die HWND-Nummer (eindeutige ID) einer GUI wird oft in Verbindung mit <a href="PostMessage.htm">PostMessage</a>, <a href="PostMessage.htm">SendMessage</a> und <a href="DllCall.htm">DllCall()</a> genutzt. Außerdem kann diese Nummer direkt als <a href="../misc/WinTitle.htm#ahk_id">ahk_id-FensterTitel</a> oder anstelle eines GUI-Namens verwendet werden; zum Beispiel <code>Gui %MeineGuiHwnd%:Destroy</code>.</p>
<p id="PlusLabel"><strong>Label</strong> <span class="ver">[v1.0.44.09+]:</span> Bestimmt benutzerdefinierte Namen für die <a href="#Labels">speziellen Label</a> des Fensters. <code>Gui MeineGui:+LabelMeineGui_On</code> beispielsweise bewirkt, dass das Fenster nicht MeineGuiGuiClose und MeineGuiGuiSize, sondern MeineGui_OnClose und MeineGui_OnSize als Label (sofern vorhanden) verwendet. Das heißt, dass "MeineGuiGui" in allen <a href="#Labels">speziellen Labelnamen</a> mit "MeineGui_On" ersetzt wird. Diese Option kann auch genutzt werden, um mehrere Fenster die gleiche Gruppe von Labels verwenden zu lassen (in diesem Fall kann das Skript <a href="../Variables.htm#Gui">A_Gui</a> abrufen, um festzustellen, welches Fenster die Subroutine gestartet hat).</p>
<p id="LastFound"><strong>LastFound</strong>: Definiert das Fenster als das <a href="../misc/WinTitle.htm#LastFoundWindow">zuletzt gefundene Fenster</a> (obwohl das in einem <a href="#DefaultWin">GUI-Thread</a> nicht notwendig ist, weil dies automatisch geschieht), damit Befehle wie <a href="WinSet.htm">WinSet</a> mit diesem Fenster interagieren können, sogar wenn es versteckt ist (das heißt, dass <a href="DetectHiddenWindows.htm">DetectHiddenWindows</a> nicht notwendig ist). Diese Option ist besonders nützlich, um die Eigenschaften des Fensters zu ändern, bevor es angezeigt wird. Zum Beispiel:</p>
<pre>Gui +LastFound
WinSet, TransColor, %UnsichtbareFarbe% 150
Gui Show</pre>
<p id="LastFoundExist"><strong>LastFoundExist</strong> <span class="ver">[v1.0.43.09+]:</span> Im Gegensatz zu anderen Optionen wird LastFoundExist nur erkannt, wenn keine anderen Optionen auf der gleichen Zeile vorhanden sind. <em>+LastFoundExist</em> ist das gleiche wie <em>+LastFound</em> - der einzige Unterschied ist, dass das Fenster nicht erstellt wird, wenn es noch nicht existiert. Der Hauptnutzen dieser Option ist es, zu erkennen, ob ein bestimmtes GUI-Fenster existiert. Zum Beispiel:</p>
<pre>Gui MeineGui:+LastFoundExist
if WinExist()
    MsgBox GUI "MeineGui" existiert bereits.</pre>
<p><strong>MaximizeBox</strong>: Aktiviert die Titelleistenschaltfläche zum Maximieren des Fensters. Diese Option ist auch Bestandteil von <em>Resize</em> (siehe unten).</p>
<p><strong>MinimizeBox</strong> (standardmäßig vorhanden): Aktiviert die Titelleistenschaltfläche zum Minimieren des Fensters.</p>
<p id="MinSize"><strong>MinSize</strong> und <strong>MaxSize</strong> <span class="ver">[v1.0.44.13+]:</span> Legt die minimale und/oder maximale Größe des Fensters fest, z. B. wenn der Benutzer die Kanten des Fensters zieht, um es kleiner oder größer zu machen. Geben Sie das Wort <em>MinSize</em> und/oder <em>MaxSize</em> ohne Suffix an, um die aktuelle Größe des Fensters als Grenzwert zu nutzen (wenn das Fenster keine aktuelle Größe hat, wird die gesetzte Größe des ersten <a href="#Show">Gui Show</a> verwendet). Alternativ können Sie auch die Breite, ein X und dann die Höhe anfügen; zum Beispiel: <code>Gui +Resize +MinSize640x480</code>. Diese Dimensionen (in Pixel) spezifizieren die Größe des Clientbereichs des Fensters (das ist der Bereich ohne Rahmen, Titelleiste und <a href="#Menu">Menüleiste</a>). Jede Zahl muss im dezimalen Format sein.</p>
<p>Die Breite oder Höhe kann weggelassen werden, um sie unverändert zu lassen (z. B. <code>+MinSize640x</code> oder <code>+MinSizex480</code>). Darüber hinaus kann Min/MaxSize mehrfach angegeben werden, um eine Dimension mit der aktuellen Größe des Fensters und die andere mit einer expliziten Größe zu versehen. <code>+MinSize +MinSize640x</code> beispielsweise verwendet die aktuelle Größe des Fensters für die Höhe und 640 Pixel für die Breite.</p>
<p>Wenn <em>MinSize</em> und <em>MaxSize</em> nie genutzt werden, gelten die Standardwerte des Betriebssystems (ähnlich wie <code>Gui -MinSize -MaxSize</code>, was auch die Standardwerte wiederherstellt).</p>
<p class="note"><strong>Hinweis</strong>: Das Fenster muss <a href="#Resize">+Resize</a> haben, damit der Benutzer es kleiner oder größer machen kann.</p>
<p id="OwnDialogs"><strong>OwnDialogs</strong>: <code>Gui +OwnDialogs</code> bewirkt, dass alle nachfolgenden <a href="MsgBox.htm">MsgBox</a>-, <a href="InputBox.htm">InputBox</a>-, <a href="FileSelectFile.htm">FileSelectFile</a>- oder <a href="FileSelectFolder.htm">FileSelectFolder</a>-Dialogfenster im aktuellen <a href="../misc/Threads.htm">Thread</a> (z. B. ButtonOK-Subroutine) dem aktuellen Fenster untergeordnet werden. Solche Dialogfenster werden dabei modal; das heißt, dass der Benutzer das Dialogfenster schließen muss, bevor er weiter mit dem GUI-Fenster interagieren kann. <a href="ToolTip.htm">ToolTip</a>-, <a href="Progress.htm">Progress</a>- und <a href="Progress.htm">SplashImage</a>-Fenster können hingegen nicht modal gemacht werden, selbst wenn sie einem Fenster untergeordnet werden; diese befinden sich immer über dem Hauptfenster. Untergeordnete Dialogfenster werden automatisch zerstört, sobald das Hauptfenster <a href="#Destroy">zerstört</a> wird.</p>
<p>Normalerweise ist es nicht notwendig, diese Einstellung wieder zu deaktivieren, weil sie keine Auswirkung auf andere <a href="../misc/Threads.htm">Threads</a> hat. Verwenden Sie je nach Bedarf <code>Gui -OwnDialogs</code>, um ein Thread sowohl untergeordnete als auch nicht-untergeordnete Dialogfenster anzeigen zu lassen.</p>
<p>Wenn kein Fensternamepräfix angegeben ist -- beispielsweise <code>Gui +OwnDialogs</code> anstelle von <code>Gui MeineGui:+OwnDialogs</code> -- werden die Dialogfenster dem <a href="#DefaultWin">Standardfenster des Threads</a> untergeordnet.</p>
<p id="Owner"><strong>Owner</strong>: Mit <em>+Owner</em> kann das Fenster einem anderen Fenster untergeordnet werden. Ein untergeordnetes Fenster hat standardmäßig keine eigene Taskleistenschaltfläche und befindet sich, sofern sichtbar, immer über dem Hauptfenster. Es wird automatisch zerstört, sobald das Hauptfenster zerstört wird. <em>+Owner</em> funktioniert nur, <u>nachdem</u> das Hauptfenster erstellt wurde. In <span class="ver">[v1.1.05+]</span> kann diese Option vor oder nach Erstellen des Hauptfensters verwendet werden. Es gibt zwei Möglichkeiten, wie man <em>+Owner</em> nutzen kann:</p>
<pre>Gui, MeineGui:+OwnerAndereGui  <em>; Definiert <i>MeineGui</i> als Unterfenster von <i>AndereGui</i>.</em>
Gui, MeineGui:+Owner  <em>; Definiert <i>MeineGui</i> als Unterfenster vom <a href="Menu.htm#MainWindow">Hauptfenster des Skripts</a>, um dessen Taskleistenschaltfläche zu verstecken.</em></pre>
<p><span class="ver">[v1.1.03+]:</span> Verwenden Sie <code>+Owner</code> und direkt danach den <a href="#Name">Namen</a> oder die Nummer einer bereits vorhandenen GUI oder die <a href="WinGet.htm#ID">HWND-Nummer (eindeutige ID)</a> eines beliebigen nicht-untergeordneten Fensters.</p>
<p class="note"><strong>Hinweis zur Kompatibilität</strong>: In <span class="ver">[v1.1.03+]</span> entfernt <code>+Owner</code> den WS_CHILD-Style und setzt den WS_POPUP-Style. Um einer GUI ein Fenster überzuordnen, müssen Skripte entweder auf die <code>+Parent</code>-Option zurückgreifen, oder die entsprechenden Styles <em>nach</em> der <code>+Owner</code>-Option überschreiben.</p>
<p>Um dem Benutzer die Interaktion mit dem Hauptfenster zu verbieten, während ein untergeordnetes Fenster angezeigt wird, nutzen Sie <code>Gui +Disabled</code>. Später kann man die Interaktion mit dem Hauptfenster, nachdem das untergeordnete Fenster geschlossen oder entfernt wurde, wieder mit <code>Gui -Disabled</code> erlauben. Dies sollte aber erfolgen, bevor das untergeordnete Fenster geschlossen bzw. zerstört wird, damit das übergeordnete Fenster automatisch reaktiviert werden kann.</p>
<p id="Parent"><strong>Parent</strong> <span class="ver">[v1.1.03+]</span>: Verwenden Sie <code>+Parent</code> und direkt danach den <a href="#Name">Namen</a> oder die Nummer einer bereits vorhandenen GUI oder die <a href="WinGet.htm#ID">HWND-Nummer (eindeutige ID)</a> eines beliebigen Fensters oder Steuerelements, um der GUI eines dieser Genannten überzuordnen. Mit <code>-Parent</code> kann die GUI wieder in ein nicht-untergeordnetes Fenster umgewandelt werden. Diese Option funktioniert auch, nachdem das Fenster erstellt wurde.</p>
<p id="Resize"><strong>Resize</strong>: Aktiviert die Größenänderung des Fensters und die Titelleistenschaltfläche zum Maximieren des Fensters. Mit <code>+Resize -MaximizeBox</code> kann die Aktivierung der Schaltfläche zum Maximieren des Fensters verhindert werden.</p>
<p><strong>SysMenu</strong> (standardmäßig vorhanden): Geben Sie <code>-SysMenu</code> (minus SysMenu) an, um das Systemmenü und Symbol in der oberen linken Ecke des Fensters zu entfernen. Die Titelleistenschaltflächen zum Minimieren, Maximieren und Schließen des Fensters werden auch entfernt.</p>
<p id="Theme"><strong>Theme</strong>: Geben Sie <code>-Theme</code> an, um alle nachfolgende Steuerelemente im klassischen Design darzustellen (nur ab Windows XP). Mit <code>+Theme</code> kann das neue Design wieder für nachfolgende Steuerelemente eingeschaltet werden.</p>
<p class="note"><strong>Hinweis</strong>: Die Theme-Option funktioniert nicht, wenn das Betriebssystem älter als Windows XP ist oder wenn Windows XP selbst das klassische Design aktiv hat.</p>
<p>Um diese Option nur für ein bestimmtes Steuerelement zu ändern, fügen Sie <code>+Theme</code> oder <code>-Theme</code> in dessen Optionen ein, während es erstellt wird.</p>
<p><strong>ToolWindow</strong>: Stattet das Fenster mit einer kleineren Titelleiste aus und versteckt dessen Taskleistenschaltfläche. Dies versteckt immer die Schaltflächen zum Maximieren und Minimieren des Fensters, egal ob die Styles <a href="../misc/Styles.htm#WS_MAXIMIZEBOX">WS_MAXIMIZEBOX</a> und <a href="../misc/Styles.htm#WS_MINIMIZEBOX">WS_MINIMIZEBOX</a> vorhanden sind.</p>
<p><strong>(Namenloser Style)</strong>: Geben Sie ein Plus- oder Minuszeichen und direkt danach eine dezimale oder hexadezimale Nummer an, um einen <a href="../misc/Styles.htm">Style</a> hinzuzufügen oder zu entfernen.</p>
<p><strong>(Namenloser erweiterter Style)</strong>: Geben Sie ein Plus- oder Minuszeichen und direkt danach ein E und eine dezimale oder hexadezimale Nummer an, um einen erweiterten Style hinzuzufügen oder zu entfernen. <code>+E0x40000</code> beispielsweise würde den WS_EX_APPWINDOW-Style hinzufügen, um eine Taskleistenschaltfläche für ein Fenster bereitzustellen, das aktuell keine hat. Andere erweiterte Styles, die nur selten verwendet werden und aufgrund dessen hier nicht aufgelistet sind, finden Sie unter <a href="https://docs.microsoft.com/de-de/windows/win32/winmsg/extended-window-styles">Extended Window Styles | Microsoft Docs</a>.</p>

<h3 id="Menu">Menu</h3>
<p>Stattet das Fenster mit einer Menüleiste aus.</p>
<pre class="Syntax"><span class="func">Gui</span>, Menu <span class="optional">, MenüName</span></pre>
<p>Verwenden Sie hierfür den <a href="Menu.htm">Menu</a>-Befehl, um ein gewöhnliches Menü zu erstellen. Zum Beispiel:</p>
<pre>Menu, Dateimenü, Add, Ö&amp;ffnen<a href="../misc/EscapeChar.htm">`t</a>Ctrl+F, MenüDateiÖffnen  <em>; Siehe untere Bemerkungen zu Ctrl+F.</em>
Menu, Dateimenü, Add, &amp;Beenden, MenuHandler
Menu, Hilfsmenü, Add, Inf&amp;o, MenuHandler
Menu, MeineMenüleiste, Add, &amp;Datei, :Dateimenü  <em>; Fügt die oben erstellten Untermenüs hinzu.</em>
Menu, MeineMenüleiste, Add, &amp;?, :Hilfsmenü
Gui, Menu, MeineMenüleiste</pre>
<p>In der ersten Zeile oben ist zu erkennen, dass nach <code>Ö&amp;ffnen</code> der Tastaturkurzbefehl <code>Ctrl+F</code> erfolgt (mit einem Tabulatorzeichen dazwischen). Wenn der Benutzer diesen Tastaturkurzbefehl drückt, wird die Aktion des Menüpunkts ausgeführt, ohne dass er erst dorthin navigieren muss. <span class="ver">[v1.1.04+]:</span> Tastaturkurzbefehle mit den Standardmodifikatoren Ctrl, Alt und Shift werden automatisch als <em>Keyboard Accelerator</em> für die GUI registriert. Keyboard Accelerators ohne Modifikatoren sind Groß-/Kleinschreibung-sensitiv und können nur durch ungewöhnliche Mittel wie IME oder <kbd>Alt</kbd>+NNNN ausgelöst werden.</p>
<p>Wenn eine bestimmte Tastenkombination nicht automatisch funktioniert, muss eventuell ein <a href="_IfWinActive.htm">kontextabhängiger Hotkey</a> verwendet werden. Beachten Sie aber, dass solche Hotkeys üblicherweise nicht durch <a href="Send.htm">Send</a> ausgelöst werden können und dass sie, im Gegensatz zu einem typischen Keyboard Accelerator, andere Skripte stören können.</p>
<p>Verwenden Sie <code>Gui Menu</code> (bzw. lassen Sie den letzten Parameter weg), um die aktuelle Menüleiste des Fensters zu entfernen.</p>
<p>Ein Menü, das bereits als Menüleiste fungiert, sollte nicht als Aufklappmenü oder Untermenü genutzt werden. Das liegt daran, dass Menüleisten intern ein anderes Format benötigen (diese Einschränkung gilt jedoch nur für die Menüleiste selbst, nicht für die darin enthaltenen Untermenüs). Um dieses Problem zu umgehen, erstellen Sie zweimal das gleiche Menü und weisen Sie eines davon der Menüleiste zu.</p>
<p>Das Anwenden von destruktiven <a href="Menu.htm">Menu-Unterbefehlen</a> wie Delete und DeleteAll auf eine Menüleiste (und in einigen Fällen auf die darin enthaltenen Untermenüs) ist wirkungslos und bewirkt, dass ein Fehlerdialogfenster angezeigt wird (sofern <a href="Menu.htm">UseErrorLevel</a> nicht aktiv ist). Führen Sie die folgenden Schritte durch, um solche Änderungen vornehmen zu können: 1) entfernen Sie die Menüleiste mit <code>Gui Menu</code> (d. h. <em>MenüName</em> weglassen); 2) führen Sie die gewünschten Änderungen durch; 3) fügen Sie die Menüleiste via <code>Gui, Menu, MeineMenüleiste</code> wieder hinzu.</p>

<div id="Restore"><div id="Maximize"><h3 id="Minimize">Minimize / Maximize / Restore</h3></div></div>
<p>Macht das Fenster sichtbar (falls nötig) und führt die entsprechende Operation durch.</p>
<pre class="Syntax"><span class="func">Gui</span>, Minimize
<span class="func">Gui</span>, Maximize
<span class="func">Gui</span>, Restore</pre>
<p>Wenn das Fenster nicht existiert (z. B. weil es via <a href="#Destroy">Gui Destroy</a> zerstört wurde), ist dieser Unterbefehl wirkungslos.</p>

<h3 id="Flash">Flash</h3>
<p>Lässt die Taskleistenschaltfläche des Fensters einmal aufblinken.</p>
<pre class="Syntax"><span class="func">Gui</span>, Flash <span class="optional">, Off</span></pre>
<p>Dazu wird die Farbe der Titelleiste und/oder der Taskleistenschaltfläche (falls vorhanden) invertiert. Das optionale Wort Off stellt die Originalfarben der Titelleiste und Taskleistenschaltfläche wieder her (die tatsächliche Auswirkung variiert aber je nach Version des Betriebssystems). Das folgende Beispiel lässt das Fenster dreimal aufblinken, weil jedes Paar von "Gui Flash" die Farben des Fensters invertiert und wiederherstellt:</p>
<pre>Loop 6
{
    Gui Flash
    Sleep 500  <em>; Dieser Wert ist ziemlich empfindlich; Änderungen können zu unerwarteten Ergebnissen führen.</em>
}</pre>

<h3 id="Default">Default</h3>
<p>Ändert den Standard-<a href="#MultiWin">GUI-Fensternamen</a> des <a href="../misc/Threads.htm">aktuellen Threads</a>.</p>
<pre class="Syntax"><span class="func">Gui</span>, GuiName:Default</pre>
<p>Dieser Fenstername kommt standardmäßig zum Einsatz, wenn <a href="GuiControl.htm">GuiControl</a>, <a href="GuiControlGet.htm">GuiControlGet</a> und der Gui-Befehl selbst ohne spezifischen Fensternamen verwendet werden. Das folgende Beispiel zeigt, wie man den Standardfensternamen in "MeineGui" ändern kann: <code>Gui MeineGui:Default</code>. Weitere Informationen zum Standardfenster finden Sie unter <a href="#DefaultWin">Standardfenster eines Threads</a>.</p>
<p><span class="ver">[v1.1.03+]:</span> <em>GuiName</em> kann die <a href="#GuiHwndOutputVar">HWND-Nummer (eindeutige ID)</a> eines GUI-Fensters des Skripts sein. Wenn das Fenster einen Namen hat, wird dieser Name zum Standardfensternamen, der auch nach Zerstörung des Fensters erhalten bleibt. Wenn das Fenster keinen Namen hat, wird der Standardfenstername, sobald das Fenster zerstört wird, auf 1 zurückgesetzt.</p>
<p><span class="ver">[v1.1.23+]:</span> Die interne Variable <strong>A_DefaultGui</strong> enthält den Namen oder die Nummer der Standard-GUI.</p>

<h2 id="ControlOptions">Optionen für ein Steuerelement (Gui Add)</h2>
<h3 id="PosSize">Position und Größe von Steuerelementen ändern</h3>
<p class="note"><strong>Hinweis:</strong> Für einfache Layouts reichen in der Regel die nachfolgenden Optionen vollkommen aus. Für komplexere Layouts allerdings könnten Tools wie der SmartGUI Creator von Rajat hilfreicher sein, weil sie es möglich machen, ein GUI-Fenster visuell zu gestalten, gemäß dem Motto "what you see is what you get". Der SmartGUI Creator ist kostenlos und kann unter <a href="https://www.autohotkey.com/docs/SmartGUI/">www.autohotkey.com/docs/SmartGUI/</a> heruntergeladen werden.</p>
<p>Wenn Dimensionen und/oder Koordinaten in <em>Optionen</em> weggelassen werden, wird das Steuerelement relativ zum vorherigen Steuerelement positioniert und/oder je nach Inhalt und Typ automatisch dimensioniert.</p>
<p>Folgende Optionen werden unterstützt:</p>
<p id="R"><strong>R</strong>: Textzeilen (kann eine Floating-Point-Zahl enthalten, z. B. R2.5). <strong>R</strong> ist oft besser als <strong>H</strong> (Höhe). Wenn <strong>R</strong> und <strong>H</strong> gleichzeitig vorhanden sind, wird <strong>R</strong> bevorzugt. Bei einer GroupBox ist das die Anzahl der Steuerelemente, für die Platz in der Box reserviert werden soll. Bei einer <a href="GuiControls.htm#DropDownList">DropDownList</a>, <a href="GuiControls.htm#ComboBox">ComboBox</a> oder <a href="GuiControls.htm#ListBox">ListBox</a> ist das die Anzahl der Listeneinträge, die der Listenbereich des Steuerelements maximal anzeigen soll (in Windows XP oder höher ist es ratsam, eine DropDownList oder ComboBox ohne <strong>R</strong> und <strong>H</strong> zu erstellen, damit die aufklappbare Liste von der verfügbaren Höhe des Desktops profitieren kann). Bei allen anderen Steuerelementen ist <strong>R</strong> die Anzahl der Textzeilen, die maximal angezeigt werden sollen.</p>
<p><strong>W</strong>: Breite in Pixel. Lässt man diese Option weg, wird die Breite von einigen Steuerelementen automatisch anhand ihres Inhalts berechnet; Tab-Steuerelemente verwenden standardmäßig das 30-fache der aktuellen Schriftgröße, plus das 3-fache des <a href="#Margin">horizontalen Abstands</a>; vertikale ProgressBars verwenden standardmäßig das 2-fache der aktuellen Schriftgröße; und horizontale ProgressBars, horizontale Sliders, DropDownLists, ComboBoxes, ListBoxes, GroupBoxes, Edits und Hotkeys verwenden standardmäßig das 15-fache der aktuellen Schriftgröße (außer GroupBoxes, die das 18-fache verwenden, um Platz für Abstände zu schaffen).</p>
<p><strong>H</strong>: Höhe in Pixel. Wenn man sowohl <strong>H</strong> als auch <strong>R</strong> weglässt, ist DropDownList, ComboBox, ListBox und ein leeres mehrzeiliges Edit-Steuerelement standardmäßig 3 Zeilen hoch; GroupBox standardmäßig 2 Zeilen hoch; vertikaler Slider und vertikale ProgressBar standardmäßig 5 Zeilen hoch; horizontaler Slider standardmäßig 30 Pixel hoch (außer wenn eine Dicke angegeben wurde); horizontale ProgressBar standardmäßig das 2-fache der aktuellen Schriftgröße hoch; Hotkey standardmäßig 1 Zeile hoch; und Tab standardmäßig 10 Zeilen hoch. Alle anderen Steuerelemente bekommen automatisch eine Höhe zugewiesen, die auf ihren Inhalt basiert. Beachten Sie bei einer DropDownList und ComboBox, dass sich <strong>H</strong> auf eine Höhe bezieht, die sich zusammensetzt aus der Höhe des sichtbaren Bereichs und der Höhe des Listenbereichs (bei einem zu niedrigen Wert wird immer mindestens ein Listeneintrag angezeigt). Außerdem ist es ratsam, die gewünschte Höhe via <strong>R</strong> statt <strong>H</strong> zu definieren, um die vollständige Sichtbarkeit der Textzeilen zu gewährleisten.</p>
<p><strong>wp+n</strong>, <strong>hp+n</strong>, <strong>wp-n</strong> und <strong>hp-n</strong> können genutzt werden, um die Breite und/oder Höhe eines Steuerelements auf genau die Breite oder Höhe des zuvor hinzugefügten Steuerelements zu setzen, die optional um eine beliebige Zahl (in diesem Fall <strong>n</strong>) erhöht oder verringert werden kann. <code>wp</code> beispielsweise würde die Breite eines Steuerelements auf die des vorherigen Steuerelements setzen, und <code>wp-50</code> auf die Breite des vorherigen Steuerelements, aber um 50 verringert.</p>
<p id="XY"><strong>X</strong>, <strong>Y</strong>: X-Position, Y-Position. <code>x0 y0</code> beispielsweise positioniert das Steuerelement in die obere linke Ecke des Clientbereichs des Fensters (das ist der Bereich ohne Rahmen, Titelleiste und Menüleiste).</p>
<p id="PosPlus"><strong>x+n</strong>, <strong>y+n</strong> (wobei <strong>n</strong> eine beliebige Zahl ist): Es ist möglich, ein optionales Pluszeichen einzufügen, um ein Steuerelement relativ zum rechten bzw. unteren Rand des zuvor hinzugefügten Steuerelements zu positionieren. <code>Y+10</code> beispielsweise positioniert das Steuerelement unterhalb des zuvor hinzugefügten Steuerelements, die genau 10 Pixel voneinander entfernt sind. <code>X+10</code> hingegen positioniert das Steuerelement 10 Pixel entfernt auf die rechte Seite des zuvor hinzugefügten Steuerelements. Da negative Zahlen wie <code>X-10</code> für die absolute Positionierung reserviert sind, müssen negative Offsets mit einem Pluszeichen beginnen. Zum Beispiel: <code>X+-10</code>.</p>
<p id="PosPlusMargin"><span class="ver">[v1.1.16+]:</span> <strong>X+</strong> und <strong>Y+</strong> können den Buchstaben <strong>M</strong> als Ersatz für den aktuellen <a href="#Margin">Abstand (Margin)</a> des Fensters nutzen. <code>x+m</code> beispielsweise verwendet den rechten Rand des zuvor hinzugefügten Steuerelements und fügt den aktuellen Standardabstand hinzu. <code>xp y+m</code> positioniert ein Steuerelement unterhalb des zuvor hinzugefügten Steuerelements, während eine relative X-Koordinate allein (mit xp oder x+) standardmäßig <code>yp</code> impliziert.</p>
<p id="xp"><strong>xp+n</strong>, <strong>yp+n</strong>, <strong>xp-n</strong> und <strong>yp-n</strong> (hierbei ist <strong>n</strong> eine beliebige Zahl) können genutzt werden, um Steuerelemente relativ zur linken oberen Ecke des zuvor hinzugefügten Steuerelements zu positionieren. Dies ist zum Beispiel nützlich, um Steuerelemente mit einer <a href="GuiControls.htm#GroupBox">GroupBox</a> zu umschließen.</p>
<p id="xm"><strong>xm</strong> und <strong>ym</strong> können genutzt werden, um ein Steuerelement an den ganz linken bzw. obersten <a href="#Margin">Abstand (Margin)</a> des Fensters zu positionieren (nach diesen Optionen kann ein Plus-/Minuszeichen und eine Zahl erfolgen).</p>
<p id="xs"><strong>xs</strong> und <strong>ys</strong>: Diese haben einen ähnlichen Effekt wie <strong>xm</strong> und <strong>ym</strong>, allerdings beziehen sie sich auf Koordinaten, die von einem zuvor hinzugefügten Steuerelement stammen, dessen Optionen das Wort <a href="#Section">Section</a> enthält (das erste Steuerelement eines Fensters beginnt immer eine neue Sektion, egal ob dessen Optionen dieses Wort enthält). Zum Beispiel:</p>
<pre>Gui, Add, Edit, w600  <em>; Fügt ein ziemlich breites Eingabefeld in den obersten Bereich des Fensters ein.</em>
Gui, Add, Text, <strong>Section</strong>, Vorname:  <em>; Speichert die Position dieses Steuerelements und beginnt eine neue Sektion.</em>
Gui, Add, Text,, Nachname:
Gui, Add, Edit, <strong>ys</strong>  <em>; Beginnt eine neue Spalte innerhalb dieser Sektion.</em>
Gui, Add, Edit
Gui, Show</pre>
<p>Nach <strong>xs</strong> und <strong>ys</strong> kann optional ein Plus-/Minuszeichen und eine Zahl erfolgen. Außerdem ist es möglich, das Wort <a href="#Section">Section</a> und xs/ys in den Optionen eines Steuerelements anzugeben, damit das Steuerelement gleichzeitig auf die alte Sektion zugreifen kann und eine neue Sektion für nachfolgende Steuerelemente etabliert.</p>
<p><strong>X</strong> und/oder <strong>Y</strong> wegzulassen hat den Vorteil, dass sich ein GUI-Layout automatisch an zukünftigen Änderungen bzgl. der Größe von Steuerelementen oder der Schrift anpassen kann. Wenn man stattdessen jedes Steuerelement absolut positioniert, müssen alle Steuerelemente unterhalb und/oder auf der rechten Seite des Steuerelements, dessen Größe geändert wurde, eventuell manuell verschoben werden.</p>
<p>Lässt man sowohl <strong>X</strong> als auch <strong>Y</strong> weg, wird das Steuerelement mit einem bestimmten <a href="#Margin">Abstand (Margin)</a> unterhalb des zuvor hinzugefügten Steuerelements positioniert.</p>
<p>Wenn nur eine Komponente weggelassen wird, hängt ihr Standardwert davon ab, welche Option zur Angabe der anderen Komponente verwendet wurde:</p>
<table class="info">
  <tr><th>X angegeben</th><th>Standard für Y</th></tr>
  <tr><td>x<em>n</em> oder xm</td><td>Unterhalb aller vorherigen Steuerelemente (maximale Y-Ausdehnung plus Margin).</td></tr>
  <tr><td>xs</td><td>Unterhalb aller vorherigen Steuerelemente seit der letzten Verwendung der <a href="#Section">Section</a>-Option.</td></tr>
  <tr><td>x+<em>n</em> oder xp</td><td>Dasselbe wie der obere Rand des vorherigen Steuerelements (<a href="#xp">yp</a>).</td></tr>
  <tr><th>Y angegeben</th><th>Standard für X</th></tr>
  <tr><td>y<em>n</em> oder ym</td><td>Rechts von allen vorherigen Steuerelementen (maximale X-Ausdehnung plus Margin).</td></tr>
  <tr><td>ys</td><td>Rechts von allen vorherigen Steuerelementen seit der letzten Verwendung der <a href="#Section">Section</a>-Option.</td></tr>
  <tr><td>y+<em>n</em> oder yp</td><td>Dasselbe wie der linke Rand des vorherigen Steuerelements (<a href="#xp">xp</a>).</td></tr>
</table>

<h3 id="Events">Benutzereingaben speichern und verarbeiten</h3>
<p id="var"><strong>V</strong>: Variable. Verknüpft eine Variable mit einem Steuerelement. Geben Sie direkt nach dem Buchstaben V den Namen einer globalen Variable ein (oder eine <a href="../Functions.htm#ByRef">lokale ByRef-Variable</a>, die auf eine globale Variable verweist, oder <span class="ver">[in v1.0.46.01+]</span> eine <a href="../Functions.htm#static">statische Variable</a>). <code><strong>v</strong>MeinEdit</code> beispielsweise speichert den Inhalt des Steuerelements in die Variable <em>MeinEdit</em>, sobald man <a href="#Submit">Gui Submit</a> verwendet. Das Zuordnen von Variablen ist auch bei Steuerelementen hilfreich, die nicht eingabefähig sind (z. B. bei Text- oder GroupBox-Steuerelementen), weil der Name von so einer Variable auch als eindeutiger Identifikator für <a href="GuiControl.htm">GuiControl</a>, <a href="GuiControlGet.htm">GuiControlGet</a> und <a href="../Variables.htm#GuiControl">A_GuiControl</a> verwendet werden kann.</p>
  <p class="note"><strong>Hinweis</strong>: <a href="#Submit">Gui Submit</a> ändert weder die zugeordneten Variablen von nicht-eingabefähigen Steuerelementen (z. B. Text und GroupBox) noch von Steuerelementen, wo entsprechend dokumentiert (z. B. <a href="ListView.htm">ListView</a> und <a href="TreeView.htm">TreeView</a>).</p>
<p id="label"><strong>G</strong>: Gosub (g-Label). Startet automatisch eine Subroutine oder Funktion, wenn der Benutzer ein Steuerelement anklickt oder ändert. Geben Sie direkt nach dem Buchstaben G den Namen eines <a href="../misc/Labels.htm">Labels</a> an, das ausgeführt werden soll. <code>gCancel</code> kann genutzt werden, um ein indirektes <a href="#Cancel">Gui Cancel</a> auszulösen (aber wenn ein Label namens "Cancel" im Skript existiert, wird dieses stattdessen ausgeführt). Die Subroutine kann auf folgende interne Variablen zurückgreifen: <a href="../Variables.htm#Gui">A_Gui</a>, <a href="../Variables.htm#GuiControl">A_GuiControl</a>, <a href="../Variables.htm#GuiEvent">A_GuiEvent</a>, <a href="../Variables.htm#EventInfo">A_EventInfo</a> und <a href="../Variables.htm#ThisLabel">A_ThisLabel</a>.</p>
<p><span class="ver">[v1.1.20+]:</span> Man kann auch den Namen einer Funktion angeben, sofern dieser Name noch nicht als Label existiert. Alternativ kann via <a href="GuiControl.htm#Functor">GuiControl</a> ein <a href="../objects/Functor.htm">Funktionsobjekt</a> zugeordnet werden. Die Funktion kann optional die folgenden Parameter akzeptieren (<code>gElementEreignis</code> hat in diesem Fall die Funktion gesetzt):</p>
<pre class="Syntax"><span class="func">ElementEreignis</span>(ElementHwnd, GuiEreignis, EreignisInfo, ErrLevel:="")</pre>
<p>Die Bedeutung der Parameter hängt vom Typ des Steuerelements ab. Hinweis: Wenn man den vierten Parameter ohne Standardwert deklariert, kann die Funktion nur von Ereignissen aufgerufen werden, die vier Parameter bereitstellen.</p>

<h3 id="OtherOptions">Steuerelemente: Häufig verwendete Styles und Optionen</h3>
<p class="note"><strong>Hinweis</strong>: Vorzeichenlose Optionen werden standardmäßig hinzugefügt; zum Beispiel bewirkt sowohl <code>Wrap</code> als auch <code>+Wrap</code>, dass der automatische Zeilenumbruch im Text des Steuerelements aktiviert wird. Um diese Eigenschaft hingegen wieder zu entfernen, geben Sie <code>-Wrap</code> an.</p>
<p id="AltSubmit"><strong>AltSubmit</strong>: Verwendet eine alternative Submit-Methode. Bei einer DropDownList, ComboBox oder ListBox bewirkt diese Option, dass <a href="#Submit">Gui Submit</a> nicht den Text, sondern die Position des ausgewählten Listeneintrags speichert. Wenn kein Listeneintrag ausgewählt ist, wird bei einer ComboBox weiterhin der Text des Eingabefeldes gespeichert, während bei einer DropDownList oder ListBox weiterhin die <a href="#var">zugeordnete Ausgabevariable</a> leer gemacht wird. Hinweis: AltSubmit beeinflusst auch das Verhalten von <a href="GuiControlGet.htm">GuiControlGet</a> beim Abrufen des Inhalts eines solchen Steuerelements.</p>
<p><strong>C</strong>: Farbe des Textes (funktioniert nicht bei <a href="GuiControls.htm#Button">Button</a>-Steuerelementen). Geben Sie nach dem Buchstaben C den Namen einer Farbe (siehe <a href="Progress.htm#colors">Farbentabelle</a>) oder einen RGB-Wert an (mit oder ohne 0x-Präfix). Beispiele: <code>cRed</code>, <code>cFF2211</code>, <code>c0xFF2211</code>, <code>cDefault</code>.</p>
<p><strong>Choose</strong>: Wählt ein einzelnes Element in einem <a href="../commands/GuiControls.htm#ComboBox">ComboBox</a>-, <a href="../commands/GuiControls.htm#DateTime">DateTime</a>-, <a href="../commands/GuiControls.htm#DropDownList">DropDownList</a>-, <a href="../commands/GuiControls.htm#ListBox">ListBox</a>- oder <a href="../commands/GuiControls.htm#Tab">Tab</a>-Steuerelement vorab aus. Geben Sie direkt nach dem Wort <code>Choose</code> die Nummer eines Elements an. Zum Beispiel: <code>Choose2</code></p>
<p><strong>Disabled</strong>: Stellt das Steuerelement in einem deaktivierten Zustand dar und bewirkt, dass es weder fokussiert noch geändert werden kann. Um später die Interaktion mit diesem Steuerelement wieder zu aktivieren, nutzen Sie <a href="GuiControl.htm#EnableDisable">GuiControl Enable</a>. Hinweis: Um ein Edit-Steuerelement stattdessen in den schreibgeschützten Zustand zu versetzen, fügen Sie <code>ReadOnly</code> in dessen Optionen ein. Direkt nach dem Wort Disabled kann optional eine 0 oder 1 erfolgen, um den Startzustand zu bestimmen (0 für aktiviert, 1 für deaktiviert). In diesem Fall ist <code>Disabled</code> das gleiche wie <code>Disabled%VarMitEins%</code>.</p>
<p><strong>Hidden</strong>: Versteckt zunächst das Steuerelement. Mit <a href="GuiControl.htm#Show">GuiControl Show</a> kann es später wieder sichtbar gemacht werden. Direkt nach dem Wort Hidden kann optional eine 0 oder 1 erfolgen, um den Startzustand zu bestimmen (0 für sichtbar, 1 für versteckt). In diesem Fall ist <code>Hidden</code> das gleiche wie <code>Hidden%VarMitEins%</code>.</p>
<p><strong>Left</strong>: Macht den Text innerhalb der verfügbaren Breite des Steuerelements linksbündig. Diese Option funktioniert nur bei folgenden Steuerelementen: Text, Edit, Button, Checkbox, Radio, UpDown, Slider, Tab, Tab2, GroupBox, DateTime.</p>
<p><strong>Right</strong>: Macht den Text innerhalb der verfügbaren Breite des Steuerelements rechtsbündig. Bei einer CheckBox und einem Radio-Button bewirkt diese Option zudem, dass das Auswahlfeld selbst auf die rechte statt linke Seite des Steuerelements positioniert wird. Diese Option funktioniert nur bei folgenden Steuerelementen: Text, Edit, Button, Checkbox, Radio, UpDown, Slider, Tab, Tab2, GroupBox, DateTime, Link.</p>
<p><strong>Center</strong>: Zentriert den Text des Steuerelements auf horizontaler Ebene. Diese Option funktioniert nur bei folgenden Steuerelementen: Text, Edit, Button, Checkbox, Radio, Slider, GroupBox.</p>
<p id="Section"><strong>Section</strong>: Beginnt eine neue Sektion und speichert die Positionsdaten des Steuerelements, um sie später mit den <a href="#xs">oben</a> beschriebenen Positionierungsoptionen <em>xs</em> und <em>ys</em> zu verwenden.</p>
<p id="Tabstop"><strong>Tabstop</strong>: Geben Sie <code>-Tabstop</code> an, um ein eingabefähiges Steuerelement überspringen zu lassen, wenn der Benutzer <kbd>Tab</kbd> zum Navigieren drückt.</p>
<p id="Wrap"><strong>Wrap</strong>: Aktiviert den automatischen Zeilenumbruch im Text des Steuerelements. Da bei nahezu allen Steuerelementen standardmäßig der automatische Zeilenumbruch aktiv ist, nutzt man in der Regel <code>-Wrap</code>, um diese Option zu deaktivieren.</p>
<p><strong>VScroll</strong>: Stattet das Steuerelement mit einer vertikalen Scrollleiste aus, sofern möglich.</p>
<p><strong>HScroll</strong>: Stattet das Steuerelement mit einer horizontalen Scrollleiste aus, sofern möglich. Der Rest dieses Absatzes gilt nur für die <a href="GuiControls.htm#ListBox">ListBox</a>. Die horizontale Scrollbreite ist standardmäßig das 3-fache der Breite der Listbox. Um eine andere Scrollbreite zu definieren, müssen Sie direkt nach dem Wort HScroll eine Zahl angeben. <code>HScroll500</code> beispielsweise ermöglicht einen scrollbaren Bereich von 500 Pixeln innerhalb der ListBox. Wenn die angegebene Scrollbreite allerdings kleiner als die Breite der ListBox ist, wird keine Scrollleiste angezeigt (obwohl das bloße Vorhandensein von <em>HScroll</em> es überhaupt erst möglich macht, die horizontale Scrollleiste später via <code><a href="GuiControl.htm">GuiControl</a>, +HScroll500, MeineScrollleiste</code> hinzuzufügen).</p>

<h3 id="Controls_Uncommon_Styles_and_Options">Steuerelemente: Selten verwendete Styles und Optionen</h3>
<p id="BackgroundTrans"><strong>BackgroundTrans</strong>: Verwendet einen transparenten Hintergrund, der jedes Steuerelement, das sich hinter einem Text-, Picture- oder GroupBox-Steuerelement befindet, durchscheinen lässt. Ein transparentes Text-Steuerelement oberhalb eines Picture-Steuerelements würde beispielsweise die Illusion erzeugen, als gehöre der Text zum Bild. Mit <code><a href="GuiControl.htm">GuiControl</a>, +Background</code> kann diese Option später wieder entfernt werden. Weitere Informationen zu transparenten Bildern finden Sie im <a href="GuiControls.htm#PicAltSubmit">AltSubmit-Abschnitt des Picture-Steuerelements</a>. Bekannte Einschränkung: BackgroundTrans funktioniert eventuell nicht ordnungsgemäß bei Steuerelementen innerhalb eines <a href="GuiControls.htm#Tab">Tab</a>-Steuerelements, das eine <a href="ListView.htm">ListView</a> enthält.</p>
<p><strong>-Background</strong>: Lässt ein Steuerelement dessen Standard-Hintergrundfarbe und nicht die via <a href="#Color">Gui Color</a> definierte Hintergrundfarbe verwenden. Diese Option wird häufig genutzt, um ein Tab-Steuerelement mit dessen Standardfarbe statt Fensterfarbe zu versehen. Mit <code><a href="GuiControl.htm">GuiControl</a>, +Background</code> kann diese Option später wieder entfernt werden.</p>
<p><strong>Border</strong>: Umrahmt das Steuerelement mit einer dünnen Linie. Die meisten Steuerelemente sind bereits eingerahmt und benötigen aufgrund dessen diese Option nicht. Wenn man ein <em>bereits existierendes</em> Steuerelement mit einem Rahmen versieht, muss die Breite und Höhe des Steuerelements eventuell um einen Pixel erweitert werden, um dessen korrekte Darstellung zu gewährleisten.</p>
<p id="HwndOutputVar"><strong>Hwnd</strong><em>AusgabeVar</em> <span class="ver">[v1.0.46.01+]:</span> Speichert die HWND-Nummer (eindeutige ID) des Steuerelements in <em>AusgabeVar</em>, wenn diese Option in Verbindung mit <a href="#Add">Gui Add</a> genutzt wird. Zum Beispiel: <code>Gui, Add, Edit, vMeinEdit HwndMeinEditHwnd</code>. Wenn man diese Option innerhalb einer Funktion verwendet, wird <em>AusgabeVar</em> als <a href="../Functions.htm#DynVar">dynamische Variable</a> behandelt. Die HWND-Nummer (eindeutige ID) eines Steuerelements wird oft in Verbindung mit <a href="PostMessage.htm">PostMessage</a>, <a href="PostMessage.htm">SendMessage</a> und <a href="DllCall.htm">DllCall()</a> genutzt. Außerdem kann diese Nummer direkt als <a href="../misc/WinTitle.htm#ahk_id">ahk_id-FensterTitel</a> verwendet werden (das auch mit versteckten Steuerelementen funktioniert, selbst wenn <a href="DetectHiddenWindows.htm">DetectHiddenWindows</a> ausgeschaltet ist) oder <span class="ver">[in v1.1.04+]</span> bei GuiControl und GuiControlGet als <em>SteuerelementID</em>-Parameter verwendet werden. Die HWND-Nummer eines nicht-untergeordneten Fensters kann via <a href="#GuiHwndOutputVar">Gui MeineGui:+HwndAusgabeVar</a> abgerufen werden.</p>
<p><strong>Theme</strong>: Mit dieser Option kann das aktuelle Fenster-Design des neu erstellten Steuerelements überschrieben werden. Bei bereits existierenden Steuerelementen hat diese Option keinen Effekt; allerdings kann sich das in einer zukünftigen Version noch ändern. Weitere Informationen finden Sie unter <a href="#Theme">Gui +/-Theme</a>.</p>
<p><strong>(Namenloser Style)</strong>: Geben Sie ein Plus- oder Minuszeichen und direkt danach eine dezimale oder hexadezimale Nummer an, um einen <a href="../misc/Styles.htm">Style</a> hinzuzufügen oder zu entfernen. Lässt man das Vorzeichen weg, wird der Style standardmäßig hinzugefügt.</p>
<p><strong>(Namenloser erweiterter Style)</strong>: Geben Sie ein Plus- oder Minuszeichen und direkt danach ein E und eine dezimale oder hexadezimale Nummer an, um einen erweiterten Style hinzuzufügen oder zu entfernen. Lässt man das Vorzeichen weg, wird der Style standardmäßig hinzugefügt. <code>E0x200</code> beispielsweise fügt den WS_EX_CLIENTEDGE-Style hinzu, der Steuerelemente wie z. B. Picture mit einem abgesenkten Rahmen ausstattet. Alle anderen erweiterten Styles, die nur selten verwendet werden und aufgrund dessen hier nicht aufgelistet sind, finden Sie unter <a href="https://www.microsoft.com">www.microsoft.com</a> mit Suchbegriffen wie WS_EX_CLIENTEDGE.</p>

<h2 id="Labels">Fensterereignisse</h2>
<p>Die folgenden Label (Subroutinen) werden automatisch einem GUI-Fenster zugeordnet, wenn sie im Skript verwendet werden:</p>
<ul>
  <li><a href="#GuiClose">GuiClose</a></li>
  <li><a href="#GuiEscape">GuiEscape</a></li>
  <li><a href="#GuiSize">GuiSize</a></li>
  <li><a href="#GuiContextMenu">GuiContextMenu</a></li>
  <li><a href="#GuiDropFiles">GuiDropFiles</a></li>
</ul>
<p><span class="ver">[v1.1.20+]:</span> Wenn ein Label für ein bestimmtes Ereignis nicht existiert, kann stattdessen eine Funktion über diesen Namen aufgerufen werden. Die Funktion kann optional die <a href="#GuiHwndOutputVar">HWND-Nummer (eindeutige ID)</a> der GUI als ersten Parameter akzeptieren. Einige Ereignisse stellen noch mehr Parameter bereit.</p>
<p>Um auf die Ereignisse eines anderen Fensters <a href="#MultiWin">anstelle des Fensters mit der Nummer 1</a> zuzugreifen, muss der Name oder die Nummer des Fensters (falls vorhanden) als Präfix für die oben genannten speziellen Label verwendet werden; zum Beispiel sind 2GuiEscape und 2GuiClose die Standardlabel für das Fenster Nummer 2, und <em>MeineGui</em>GuiEscape und <em>MeineGui</em>GuiClose die Standardlabel für das Fenster <em>MeineGui</em>. Mit <a href="#PlusLabel">Gui +Label</a> kann ein benutzerdefiniertes Präfix definiert werden.</p>

<h3 id="GuiClose">GuiClose</h3>
<p>Wird gestartet, wenn das Fenster mit eine der folgenden Methoden geschlossen wird: Drücken der X-Schaltfläche in der Titelleiste, Auswählen des Systemmenüpunkts "Schließen" oder Schließen via <a href="WinClose.htm">WinClose</a>. Wenn dieses Label fehlt, wird das Fenster beim Schließen nur versteckt, was den gleichen Effekt hat wie <a href="#Cancel">Gui Cancel</a>. Die am häufigsten durchgeführte Aktion für GuiClose ist <a href="ExitApp.htm">ExitApp</a>; zum Beispiel:</p>
<pre>GuiClose:
ExitApp</pre>
<p><span class="ver">[v1.1.20+]:</span> Wenn GuiClose eine Funktion ist, wird die GUI standardmäßig versteckt. Um das zu verhindern, muss die Funktion via Return einen Integer ungleich 0 zurückgeben; zum Beispiel:</p>
<pre>GuiClose(GuiHwnd) {  <em>; Dieser Parameter ist optional.</em>
    MsgBox 4,, Wollen Sie die GUI wirklich verstecken?
    IfMsgBox No
        return true  <em>; true = 1</em>
}</pre>

<h3 id="GuiEscape">GuiEscape</h3>
<p>Wird gestartet, wenn der Benutzer <kbd>Esc</kbd> drückt, während das GUI-Fenster aktiv ist. Wenn dieses Label fehlt, hat das Drücken von <kbd>Esc</kbd> keine Auswirkung. Bekannte Einschränkung: Wenn die Interaktion mit dem ersten Steuerelement im Fenster deaktiviert ist (möglicherweise abhängig vom Typ des Steuerelements), wird das GuiEscape-Label nicht gestartet. Es gibt eventuell noch andere Faktoren, die diesen Effekt hervorrufen.</p>

<h3 id="GuiSize">GuiSize</h3>
<p>Wird gestartet, wenn das Fenster kleiner/größer gemacht, minimiert, maximiert oder wiederhergestellt wird. Die internen Variablen <a href="../Variables.htm#GuiWidth">A_GuiWidth</a> und <a href="../Variables.htm#GuiWidth">A_GuiHeight</a> enthalten die neue Breite und Höhe des Clientbereichs des Fensters (das ist der Bereich ohne Rahmen, Titelleiste und Menüleiste). Zusätzlich enthält sowohl <a href="../Variables.htm#EventInfo">A_EventInfo</a> als auch <a href="../misc/ErrorLevel.htm">ErrorLevel</a> eine der folgenden Zahlen:</p>
<ul>
  <li>0 = Das Fenster wurde wiederhergestellt oder auf normale Weise größer/kleiner gemacht, z. B. durch Ziehen des Rahmens.</li>
  <li>1 = Das Fenster wurde minimiert.</li>
  <li>2 = Das Fenster wurde maximiert.</li>
</ul>
<p>Mithilfe von GuiSize können Steuerelemente neu positioniert und größer/kleiner gemacht werden, während der Benutzer die Größe des Fensters ändert. Um diesen Vorgang zu vereinfachen, können Sie <a href="https://www.autohotkey.com/boards/viewtopic.php?f=6&amp;t=1079">AutoXYWH() von tmplinshi und toralf</a> nutzen.</p>
<p>Beim Ändern der Fenstergröße (auch via Skript) wird GuiSize eventuell nicht sofort aufgerufen. Wie jedes Fensterereignis wird GuiSize erst aufgerufen, wenn der aktuelle Thread <a href="Thread.htm#Interrupt">unterbrechbar</a> wird. Nutzen Sie das folgende Beispiel, um sicherzustellen, dass GuiSize beim Ändern der Fenstergröße sofort aufgerufen wird:</p>
<pre><a href="Critical.htm#Off">Critical</a> Off  <em>; Selbst wenn Critical On nie verwendet wurde.</em>
<a href="Sleep.htm">Sleep</a> -1</pre>
<p><span class="ver">[v1.1.22.05+]:</span> <a href="#Show">Gui Show</a> macht automatisch ein <code>Sleep -1</code>, demzufolge muss in diesem Fall kein Sleep aufgerufen werden.</p>
<p><span class="ver">[v1.1.20+]:</span> Wenn GuiSize eine Funktion ist, akzeptiert sie folgende Parameter:</p>
<pre class="Syntax"><span class="func">GuiSize</span>(GuiHwnd, EreignisInfo, Breite, Höhe)</pre>

<h3 id="GuiContextMenu">GuiContextMenu</h3>
<p>Wird gestartet, wenn der Benutzer mit der rechten Maustaste auf eine beliebige Stelle im Fenster klickt (außer Titelleiste und Menüleiste). Das Ereignis wird auch gestartet, wenn der Benutzer <kbd>Menü</kbd> oder <kbd>Umschalt</kbd>+<kbd>F10</kbd> drückt. Im Gegensatz zu vielen anderen GUI-Labels können mehrere GuiContextMenu-<a href="../misc/Threads.htm">Threads</a> zur selben Zeit aktiv sein. GuiContextMenu kann auf folgende interne Variablen zugreifen:</p>
<ol>
  <li><a href="../Variables.htm#GuiControl">A_GuiControl</a> enthält den <a href="../Variables.htm#GuiControl">Text oder Variablennamen</a> des Steuerelements, auf dem sich das Ereignis bezieht (leer, wenn nicht).</li>
  <li><a href="../Variables.htm#EventInfo">A_EventInfo</a>: Bei einer ListBox, ListView oder TreeView gibt A_EventInfo an, auf welcher Zeile bzw. Element der Versuch unternommen wurde, das Kontextmenü zu öffnen:
    <ul>
      <li><a href="GuiControls.htm#ListBox">ListBox</a> oder <a href="ListView.htm">ListView</a>: A_EventInfo wird auf die Nummer der aktuell fokussierten Zeile gesetzt (oder 0, wenn nicht).</li>
      <li><a href="TreeView.htm">TreeView</a>: Bei Rechtsklick wird A_EventInfo auf die ID-Nummer des angeklickten Elements gesetzt (oder 0, wenn der Benutzer etwas anderes als ein Element anklickt). Bei <kbd>Menü</kbd> oder <kbd>Umschalt</kbd>+<kbd>F10</kbd> wird A_EventInfo auf die ID-Nummer des ausgewählten Elements gesetzt.</li>
    </ul></li>
  <li>A_GuiX und A_GuiY enthalten die X- bzw. Y-Koordinate der Position, auf der das Kontextmenü angezeigt werden soll (z. B. <code><a href="Menu.htm">Menu</a>, MeinKontext, Show, %A_GuiX%, %A_GuiY%</code>). Die Koordinaten sind relativ zur linken oberen Ecke des Fensters.</li>
  <li>A_GuiEvent enthält das Wort RightClick, wenn der Benutzer einen Rechtsklick gemacht hat, oder das Wort Normal, wenn das Kontextmenü via <kbd>Menü</kbd> oder <kbd>Umschalt</kbd>+<kbd>F10</kbd> aufgerufen wurde.</li>
</ol>
<p class="note"><strong>Hinweis</strong>: Da <a href="GuiControls.htm#Edit">Edit</a> und <a href="GuiControls.htm#MonthCal">MonthCal</a> über ein eigenes Kontextmenü verfügen, kann in solchen Steuerelementen kein GuiContextMenu-Ereignis via Rechtsklick gestartet werden.</p>
<p><span class="ver">[v1.1.20+]:</span> Wenn GuiContextMenu eine Funktion ist, akzeptiert sie folgende Parameter:</p>
<pre class="Syntax"><span class="func">GuiContextMenu</span>(GuiHwnd, ElementHwnd, EreignisInfo, IstRechtsklick, X, Y)</pre>
<p><em>ElementHwnd</em> ist leer, wenn das Ereignis nicht von einem Steuerelement stammt. <em>IstRechtsklick</em> ist wahr, wenn A_GuiEvent das Wort RightClick enthält.</p>

<h3 id="GuiDropFiles">GuiDropFiles</h3>
<p>Wird gestartet, wenn Dateien/Ordner während eines Drag-and-Drop-Vorgangs auf das Fenster abgelegt werden (aber wenn das Label bereits läuft, werden Drop-Ereignisse ignoriert). GuiDropFiles kann auf folgende interne Variablen zugreifen:</p>
<ol>
  <li><a href="../Variables.htm#GuiControl">A_GuiControl</a> enthält den <a href="../Variables.htm#GuiControl">Text oder Variablennamen</a> des Steuerelements, auf dem die Dateien abgelegt wurden (leer, wenn nicht).</li>
  <li><a href="../Variables.htm#EventInfo">A_EventInfo</a> und <a href="../misc/ErrorLevel.htm">ErrorLevel</a> enthalten die Anzahl der abgelegten Dateien.</li>
  <li>A_GuiX und A_GuiY enthalten die X- bzw. Y-Koordinate der Position, auf der die Dateien abgelegt wurden (relativ zur oberen linken Ecke des Fensters).</li>
  <li>A_GuiEvent enthält die vollständigen Pfadnamen jeder abgelegten Datei; abgesehen vom letzten Pfadnamen enden alle mit einem Zeilenumbruchszeichen (`n).</li>
</ol>
<p>Mit einer <a href="LoopParse.htm">parsenden Schleife</a> können einzelne Dateien extrahiert werden; zum Beispiel:
</p>
<pre><em>; BEISPIEL #1:</em>
Loop, Parse, A_GuiEvent, `n
{
    MsgBox, 4,, Datei Nummer %A_Index% ist:`n%A_LoopField%.`n`nWeiter?
    IfMsgBox, No, break
}

<em>; BEISPIEL #2: Nur die erste Datei extrahieren:</em>
Loop, Parse, A_GuiEvent, `n
{
    ErsteDatei := A_LoopField
    break
}

<em>; BEISPIEL #3: Dateien in alphabetischer Reihenfolge durchgehen:</em>
DateiListe := A_GuiEvent
Sort, DateiListe
Loop, Parse, DateiListe, `n
    MsgBox Datei Nummer %A_Index% ist:`n%A_LoopField%.</pre>
<p>Um das Drag-and-Drop-Feature eines Fensters zu deaktivieren, entfernen Sie den WS_EX_ACCEPTFILES-Style via <code>Gui -E0x10</code>. Mit <code>Gui +E0x10</code> kann es später wieder aktiviert werden.</p>
<p><span class="ver">[v1.1.20+]:</span> Wenn GuiDropFiles eine Funktion ist, akzeptiert sie die im nächsten Beispiel gezeigten Parameter. <em>ElementHwnd</em> ist leer, wenn Dateien auf die GUI selbst abgelegt wurden. <em>DateiArray</em> ist ein <a href="../Objects.htm#Usage_Simple_Arrays">Array (Objekt)</a> mit Dateinamen, mit dem zum Beispiel via <code>DateiArray[1]</code> die erste Datei abgerufen oder via <code>DateiArray.MaxIndex()</code> die Anzahl der Dateien zurückgegeben werden kann. Mit einer <a href="For.htm">For-Schleife</a> können die Dateien einzeln durchgegangen werden:</p>
<pre>GuiDropFiles(GuiHwnd, DateiArray, ElementHwnd, X, Y) {
    for i, Datei in DateiArray
        MsgBox Datei %i% ist:`n%Datei%
}
</pre>

<h3 id="OtherEvents">Andere Ereignisse</h3>
<p>Andere Arten von GUI-Ereignissen können via <a href="OnMessage.htm">OnMessage()</a> erkannt und verarbeitet werden. Ein Skript kann beispielsweise via ToolTip eine kontextabhängige Hilfe anzeigen, wenn der Benutzer den Mauszeiger über bestimmte Steuerelemente im Fenster bewegt. Siehe dazu das <a href="#ExToolTip">GUI-ToolTip-Beispiel</a>.</p>

<h2 id="MultiWin">Mehrere GUI-Fenster erstellen</h2>
<p>Um anstelle des <a href="#DefaultWin">Standardfensters</a> mit einem anderen Fenster zu agieren, fügen Sie dessen Namen oder Nummer (oder <span class="ver">[in v1.1.03+]</span> dessen <a href="#GuiHwndOutputVar">HWND</a>), gefolgt von einem Doppelpunkt, vor dem Unterbefehl ein. Zum Beispiel:</p>
<pre>Gui, <strong>MeineGui:</strong>Add, Text,, Text für das Über-Fenster.
Gui, <strong>MeineGui:</strong>Show</pre>
<p><code><a href="#Default">Gui MeineGui:Default</a></code> kann genutzt werden, um das obige Präfix "MeineGui:" zu vermeiden. Darüber hinaus kann das Präfix in einem <a href="#DefaultWin">GUI-Thread</a> weggelassen werden, wenn dieser Thread mit demselben Fenster agiert, das diesen Thread gestartet hat.</p>
<p id="Name"><span class="ver">[v1.1.03+]:</span> Gui-Namen müssen den <a href="../Concepts.htm#names">Richtlinien zum Erstellen von Variablennamen</a> entsprechen. Jede Nummer größer als 99 oder länger als zwei Zeichen (z. B. 0x01) wird automatisch als HWND-Nummer (eindeutige ID) einer GUI behandelt. Wenn diese GUI nicht existiert, wird der Befehl fehlschlagen. Es können solange neue Fenster erstellt werden, bis alle verfügbaren Systemressourcen aufgebraucht sind.</p>
<p><span class="ver">[v1.1.04+]:</span> Mit <a href="#New">Gui, New</a> können beliebig viele namenlose GUI-Fenster erstellt werden.</p>

<h2 id="DefaultWin">GUI-Ereignisse, -Threads und -Subroutinen</h2>
<p>Ein GUI-<a href="../misc/Threads.htm">Thread</a> ist laut Definition jeder Thread, den eine GUI-Aktion gestartet hat. Zu den GUI-Aktionen gehört beispielsweise das Auswählen eines <a href="#Menu">Menüpunkts</a> oder das Auslösen eines <a href="#label">g-Labels</a> (z. B. durch Drücken einer Schaltfläche).</p>
<p>Der <strong><a href="#MultiWin">Standardfenstername</a></strong> eines GUI-Threads ist der Name des Fensters, das diesen Thread gestartet hat. Nicht-GUI-Threads verwenden standardmäßig 1.</p>
<p>Jedes Mal, wenn ein GUI-<a href="../misc/Threads.htm">Thread</a> gestartet wird, wird das GUI-Fenster selbst als <a href="../misc/WinTitle.htm#LastFoundWindow">zuletzt gefundenes Fenster</a> für diesen Thread festgelegt. Dadurch können bei fenster- oder steuerelementspezifischen Befehlen -- z. B. <a href="WinMove.htm">WinMove</a>, <a href="WinHide.htm">WinHide</a>, <a href="WinSet.htm">WinSet</a>, <a href="WinSetTitle.htm">WinSetTitle</a> und <a href="ControlGetFocus.htm">ControlGetFocus</a> -- die FensterTitel- und FensterText-Parameter weggelassen werden, damit diese Befehle mit dem GUI-Fenster selbst agieren können (sogar wenn es versteckt ist).</p>
<p>Ein Klick auf ein Steuerelement, dessen <a href="#label">g-Label</a> wegen eines vorherigen Klicks noch läuft, ist unwirksam und führt dazu, dass dieses Ereignis verworfen wird. Um das zu verhindern, setzen Sie <a href="Critical.htm">Critical</a> auf die erste Zeile der Subroutine (allerdings werden dadurch auch andere <a href="../misc/Threads.htm">Threads</a>, wie z. B. das Drücken eines Hotkeys, gepuffert/hinausgezögert).</p>
<p>Die internen Variablen A_Gui und A_GuiControl enthalten den Fensternamen und die ID des Steuerelements, das den aktuellen Thread gestartet hat. Weitere Informationen finden Sie unter <a href="../Variables.htm#Gui">A_Gui</a> und <a href="../Variables.htm#GuiControl">A_GuiControl</a>.</p>
<p>Damit mehrere Ereignisse dieselbe Subroutine ausführen können, stapeln Sie die entsprechenden Labelnamen einfach übereinander. Zum Beispiel:</p>
<pre>GuiEscape:
GuiClose:
ButtonCancel:
ExitApp  <em>; Alle Label oben werden diesen Befehl ausführen.</em></pre>
<p>Alle GUI-<a href="../misc/Threads.htm">Threads</a> verwenden zu Beginn die Standardwerte von Einstellungen wie <a href="SendMode.htm">SendMode</a>. Diese Standardwerte können im <a href="../Scripts.htm#auto">automatischen Ausführungsbereich</a> geändert werden.</p>

<h2 id="Navigate">Navigation mit der Tastatur</h2>
<p>Mit <kbd>Tab</kbd> ist es möglich, den Tastaturfokus jeweils auf das nächste eingabefähige Steuerelement in einem GUI-Fenster zu setzen (Steuerelemente mit deaktiviertem <a href="#Tabstop">Tabstop</a>-Style werden übersprungen). In welcher Reihenfolge die Steuerelemente navigiert werden, ist abhängig davon, zu welchem Zeitpunkt sie hinzugefügt wurden. Wenn das Fenster zum ersten Mal angezeigt wird, bekommt das erste eingabefähige Steuerelement mit aktiviertem Tabstop-Style (was auf die meisten zutrifft) den Tastaturfokus.</p>
<p id="ShortcutKey">Bestimmte Steuerelemente können ein Und-Zeichen (&amp;) enthalten, um einen Tastaturkurzbefehl zu erstellen, das im Text des Steuerelements je nach Systemeinstellungen als unterstrichenes Zeichen dargestellt wird. Um so einen Tastaturkurzbefehl auszulösen, muss der Benutzer <kbd>Alt</kbd> gedrückt halten und dann das entsprechende Zeichen auf der Tastatur drücken. Drückt man den Tastaturkurzbefehl von einem Button, einer CheckBox oder einem Radio-Button, ist der Effekt das gleiche wie, als würde man das Steuerelement anklicken. Drückt man den Tastaturkurzbefehl von einer GroupBox oder einem Text-Steuerelement, wird der Tastaturfokus auf das erste eingabefähige <a href="#Tabstop">Tabstop</a>-Steuerelement gesetzt, welches danach erstellt wurde. Wenn mehrere Steuerelemente den gleichen Tastaturkurzbefehl verwenden und drückt man diesen, springt der Tastaturfokus zwischen solchen Steuerelementen abwechselnd hin und her.</p>
<p>Geben Sie zwei aufeinanderfolgende Und-Zeichen an, um ein direkt geschriebenes Und-Zeichen in einem der oben genannten Steuerelementen anzuzeigen. Zum Beispiel: <code>Gui, Add, Button,, Speichern &amp;&amp; Beenden</code>.</p>

<h2 id="Appear">Fensterdarstellung</h2>
<p>Ein GUI-Fenster verwendet als Symbol das Tray-Symbol, welches zum Zeitpunkt der Erstellung des Fensters wirksam war. Daher muss, sofern ein anderes Symbol angezeigt werden soll, das Tray-Symbol vor der Erstellung des Fensters geändert werden. Zum Beispiel: <code><a href="Menu.htm">Menu</a>, Tray, Icon, MeinSymbol.ico</code>. Es ist auch möglich, ein Fenster mit einem anderen großen Symbol zu versehen (das große Symbol wird im Alt-Tab-Fenster angezeigt). Dazu verwendet man <a href="LoadPicture.htm">LoadPicture()</a> und <a href="PostMessage.htm">SendMessage</a>; zum Beispiel:</p>
<pre>SymbolGröße := 32  <em>; Die ideale Größe für Alt-Tab variiert je nach System und Windows-Version.</em>
hIcon := LoadPicture("Mein Symbol.ico", "Icon1 w" SymbolGröße " h" SymbolGröße, BildTyp)
Gui +LastFound
SendMessage 0x0080, 1, hIcon  <em>; 0x0080 ist WM_SETICON; und 1 bedeutet ICON_BIG (0 wäre ICON_SMALL).</em>
Gui Show</pre>
<p>Aufgrund von Einschränkungen in Windows XP und höher werden CheckBox-, Radio- und GroupBox-Steuerelemente mit benutzerdefinierter Textfarbe im klassischen Design dargestellt.</p>
<p>Verwandtes Thema: <a href="#Margin">Margin</a> (Abstände innerhalb eines Fensters).</p>

<h2 id="GenRemarks">Allgemeine Bemerkungen</h2>
<p><a href="GuiControl.htm">GuiControl</a> und <a href="GuiControlGet.htm">GuiControlGet</a> können genutzt werden, um mit einzelnen Steuerelementen in einem GUI-Fenster zu agieren.</p>
<p>Jedes GUI-Fenster kann bis zu 11000 Steuerelemente enthalten. Aber Vorsicht: Bei mehr als 5000 Steuerelementen kann es vorkommen, dass bestimmte Steuerelemente instabil werden.</p>
<p>Jedes Skript, das den GUI-Befehl irgendwo verwendet, ist automatisch <a href="_Persistent.htm">persistent</a> (selbst wenn der GUI-Befehl nie ausgeführt wird). Außerdem wird bei solchen Skripten standardmäßig ein Dialogfenster mit der Anfrage angezeigt, ob die alte Instanz beibehalten oder mit einer neuen Instanz ersetzt werden soll, es sei denn, man überschreibt das mit der <a href="_SingleInstance.htm">#SingleInstance</a>-Direktive.</p>

<h2 id="Related">Siehe auch</h2>
<p><a href="GuiControl.htm">GuiControl</a>, <a href="GuiControlGet.htm">GuiControlGet</a>, <a href="Menu.htm">Menu</a>, <a href="GuiControls.htm">Steuerelemente</a>, <a href="ListView.htm">ListView</a>, <a href="TreeView.htm">TreeView</a>, <a href="Control.htm">Control</a>, <a href="ControlGet.htm">ControlGet</a>, <a href="Progress.htm">SplashImage</a>, <a href="MsgBox.htm">MsgBox</a>, <a href="FileSelectFile.htm">FileSelectFile</a>, <a href="FileSelectFolder.htm">FileSelectFolder</a></p>

<h2 id="Examples">Beispiele</h2>

<div class="ex" id="ExPopup">
<p><a class="ex_number" href="#ExPopup"></a> Erstellt ein Popup-Fenster ähnlich wie <a href="SplashTextOn.htm">SplashTextOn</a>.</p>
<pre>Gui, +AlwaysOnTop +Disabled -SysMenu +Owner  <em>; +Owner verhindert eine Taskleistenschaltfläche.</em>
Gui, Add, Text,, Beliebiger Text.
Gui, Show, NoActivate, Fenstertitel  <em>; NoActivate verhindert, dass ein anderes Fenster seinen Aktivzustand verliert.</em></pre>
</div>

<div class="ex" id="ExInputBox">
<p><a class="ex_number" href="#ExInputBox"></a> Erstellt ein einfaches Eingabefenster zum Abfragen des Vor- und Nachnamens.</p>
<pre>Gui, Add, Text,, Vorname:
Gui, Add, Text,, Nachname:
Gui, Add, Edit, vVorname ym  <em>; Die ym-Option beginnt eine neue Spalte für Steuerelemente.</em>
Gui, Add, Edit, vNachname
Gui, Add, Button, default, OK  <em>; Das ButtonOK-Label (falls vorhanden) wird ausgeführt, wenn die Schaltfläche gedrückt wird.</em>
Gui, Show,, Einfaches Eingabebeispiel
return  <em>; Ende des automatischen Ausführungsbereichs. Das Skript ist solange im Leerlauf, bis der Benutzer irgendetwas macht.</em>

GuiClose:
ButtonOK:
Gui, Submit  <em>; Speichert die Benutzereingaben in die entsprechenden Steuerelementvariablen.</em>
MsgBox Sie haben "%Vorname% %Nachname%" eingegeben.
ExitApp</pre>
</div>

<div class="ex" id="ExTab">
<p><a class="ex_number" href="#ExTab"></a> Erstellt ein Tab-Steuerelement mit mehreren Tabs, die jeweils verschiedene Steuerelemente enthalten, mit denen Sie interagieren können.</p>
<pre>Gui, Add, Tab2,, Erster Tab|Zweiter Tab|Dritter Tab  <em>; Tab2 statt Tab benötigt <span class="ver">[v1.0.47.05+]</span>.</em>
Gui, Add, Checkbox, vMeineCheckBox, Kontrollkästchen
Gui, Tab, 2
Gui, Add, Radio, vMeinRadio, Optionsfeld 1
Gui, Add, Radio,, Optionsfeld 2
Gui, Tab, 3
Gui, Add, Edit, vMeinEdit r5  <em>; r5 bedeutet 5 Zeilen hoch.</em>
Gui, Tab  <em>; nachfolgende Steuerelemente werden nicht als Teil des Tab-Steuerelements angesehen.</em>
Gui, Add, Button, default xm, OK  <em>; xm positioniert die Schaltfläche in die untere linke Ecke.</em>
Gui, Show
return

ButtonOK:
GuiClose:
GuiEscape:
Gui, Submit  <em>; Speichert die Inhalte der Steuerelemente in ihre zugeordneten Variablen.</em>
MsgBox Ihre Eingabe:`n%MeineCheckBox%`n%MeinRadio%`n%MeinEdit%
ExitApp</pre>
</div>

<div class="ex" id="ExListBox">
<p><a class="ex_number" href="#ExListBox"></a> Erstellt eine ListBox mit Dateien aus einem Verzeichnis.</p>
<pre>Gui, Add, Text,, Eine Datei zum Ausführen auswählen.`nDrücken Sie ESCAPE oder schließen Sie das Fenster, um den Vorgang abzubrechen.
Gui, Add, ListBox, vMeineListBox gMeineListBox w640 r10
Gui, Add, Button, Default, OK
Loop, C:\*.*  <em>; Ordner und Platzhaltermuster je nach Bedarf anpassen.</em>
{
    GuiControl,, MeineListBox, %A_LoopFileFullPath%
}
Gui, Show
return

MeineListBox:
if (A_GuiEvent != "DoubleClick")
    return
<em>; Ansonsten wurde ein Doppelklick auf einen Listeneintrag gemacht, also wie OK-Drücken behandeln
; und zum nächsten Label übergehen.</em>
ButtonOK:
GuiControlGet, MeineListBox  <em>; Ermittelt die aktuelle Auswahl in der ListBox.</em>
MsgBox, 4,, Wollen Sie die folgende Datei wirklich öffnen?`n`n%MeineListBox%
IfMsgBox, No
    return
<em>; Ansonsten versuchen zu starten:</em>
Run, %MeineListBox%,, UseErrorLevel
if (ErrorLevel = "ERROR")
    MsgBox Die angegebene Datei konnte nicht ausgeführt werden. Scheinbar fehlt ein passendes Programm dafür.
return

GuiClose:
GuiEscape:
ExitApp</pre>
</div>

<div class="ex" id="ExToolTip">
<p><a class="ex_number" href="#ExToolTip"></a> Zeigt eine kontextabhängige Hilfe an (via ToolTip), wenn man den Mauszeiger über ein bestimmtes Steuerelement bewegt.</p>
<pre>Gui, Add, Edit, v<strong>MeinEdit</strong>
<strong>MeinEdit</strong>_TT := "Das Tooltip für das Steuerelement mit der Variable MeinEdit"
Gui, Add, DropDownList, v<strong>MeineDDL</strong>, Rot|Grün|Blau
<strong>MeineDDL</strong>_TT := "Wählen Sie eine Farbe aus."
Gui, Add, Checkbox, vMeineCheckBox, Dieses Steuerelement hat kein Tooltip.
Gui, Show
<a href="OnMessage.htm">OnMessage</a>(0x0200, "WM_MOUSEMOVE")
return

WM_MOUSEMOVE()
{
    static AktStrlmnt, VorStrlmnt, _TT  <em>; _TT bleibt für den unteren ToolTip-Befehl leer.</em>
    AktStrlmnt := A_GuiControl
    if (AktStrlmnt != VorStrlmnt and not InStr(AktStrlmnt, " "))
    {
        ToolTip  <em>; Schließt alle offenen Tooltips.</em>
        SetTimer, ZeigeToolTip, 1000
        VorStrlmnt := AktStrlmnt
    }
    return

    ZeigeToolTip:
    SetTimer, ZeigeToolTip, Off
    <a href="ToolTip.htm">ToolTip</a> % %AktStrlmnt%_TT  <em>; Das Prozentzeichen am Anfang erzwingt einen Ausdruck.</em>
    SetTimer, EntferneToolTip, 3000
    return

    EntferneToolTip:
    SetTimer, EntferneToolTip, Off
    ToolTip
    return
}


GuiClose:
ExitApp</pre>
</div>

<div class="ex" id="OSD">
<p><a class="ex_number" href="#OSD"></a> Erstellt eine Bildschirmanzeige (OSD) mittels transparenten Fensters.</p>
<pre>UnsichtbareFarbe := "EEAA99"  <em>; Kann eine beliebige RGB-Farbe sein (wird weiter unten transparent gemacht).</em>
Gui +LastFound +AlwaysOnTop -Caption +ToolWindow  <em>; +ToolWindow entfernt die Taskleistenschaltfläche und die Möglichkeit, via ALT+TAB angesteuert zu werden.</em>
Gui, Color, %UnsichtbareFarbe%
Gui, Font, s32  <em>; Setzt eine große Schriftgröße (32 Punkte).</em>
Gui, Add, Text, vMeinText cLime, XXXXX YYYYY  <em>; XX &amp; YY dienen zum automatischen Anpassen der Fenstergröße.
; Macht alle Pixel dieser Farbe unsichtbar und den Text selbst transparent (150):</em>
WinSet, TransColor, %UnsichtbareFarbe% 150
SetTimer, AktualisiereOSD, 200
Gosub, AktualisiereOSD  <em>; Führt die Aktualisierung sofort durch, anstatt auf den Timer zu warten.</em>
Gui, Show, x0 y400 NoActivate  <em>; NoActivate verhindert, dass ein anderes Fenster seinen Aktivzustand verliert.</em>
return

AktualisiereOSD:
MouseGetPos, MausX, MausY
GuiControl,, MeinText, X%MausX%, Y%MausY%
return</pre>
</div>

<div class="ex" id="ExProgressBar">
<p><a class="ex_number" href="#ExProgressBar"></a> Erstellt einen animierten Fortschrittsbalken auf einem Hintergrundbild.</p>
<pre>Gui, Color, White
Gui, Add, Picture, x0 y0 h350 w450, %A_WinDir%\system32\ntimage.gif
Gui, Add, Button, Default xp+20 yp+250, Animation starten
Gui, Add, Progress, vMeinProgress w416
Gui, Add, Text, vMeinText wp  <em>; wp bedeutet "vorherige Breite verwenden".</em>
Gui, Show
return

ButtonAnimationStarten:
Loop, %A_WinDir%\*.*
{
    if (A_Index &gt; 100)
        break
    GuiControl,, MeinProgress, %A_Index%
    GuiControl,, MeinText, %A_LoopFileName%
    Sleep 50
}
GuiControl,, MeinText, Animation beendet.
return

GuiClose:
ExitApp</pre>
</div>

<div class="ex" id="ExImageViewer">
<p><a class="ex_number" href="#ExImageViewer"></a> Erstellt einen einfachen Bildbetrachter.</p>
<pre>Gui, +Resize
Gui, Add, Button, default, Neues Bild &amp;laden
Gui, Add, Radio, ym+5 x+10 vOption checked, &amp;Originalgröße
Gui, Add, Radio, ym+5 x+10, &amp;Kompletter Bildschirm
Gui, Add, Pic, xm vPic
Gui, Show
return

ButtonNeuesBildLaden:
FileSelectFile, Datei,,, Bild auswählen:, Bilder (*.gif; *.jpg; *.bmp; *.png; *.tif; *.ico; *.cur; *.ani; *.exe; *.dll)
if not Datei
    return
Gui, Submit, NoHide <em>; Speichert die Werte der Optionsfelder.</em>
if (Option = 1)  <em>; Bild mit aktueller Größe anzeigen.</em>
{
    Breite := 0
    Höhe := 0
}
else <em>; Zweites Optionsfeld ausgewählt: Größe des Bildes an Bildschirmgröße anpassen.</em>
{
    Breite := A_ScreenWidth - 28  <em>; Minus 28, um Platz für Rahmen und Innenabstand zu schaffen.</em>
    Höhe := -1  <em>; "Seitenverhältnis beibehalten" erscheint sinnvoll.</em>
}
GuiControl,, Pic, *w%Breite% *h%Höhe% %Datei%  <em>; Bild laden.</em>
Gui, Show, xCenter y0 AutoSize, %Datei%  <em>; Fenstergröße an Bildgröße anpassen.</em>
return

GuiClose:
ExitApp</pre>
</div>

<div class="ex" id="ExEditor">
<p><a class="ex_number" href="#ExEditor"></a> Erstellt einen einfachen Texteditor mit Menüleiste.</p>
<pre><em>; Untermenüs für die Menüleiste erstellen:</em>
Menu, Dateimenü, Add, &amp;Neu, DateiNeu
Menu, Dateimenü, Add, &amp;Öffnen, DateiÖffnen
Menu, Dateimenü, Add, &amp;Speichern, DateiSpeichern
Menu, Dateimenü, Add, Speichern &amp;unter..., DateiSpeichernAls
Menu, Dateimenü, Add  <em>; Trennlinie.</em>
Menu, Dateimenü, Add, E&amp;xit, DateiBeenden
Menu, Hilfsmenü, Add, &amp;Über, HilfeÜber

<em>; Fügt die Untermenüs in die Menüleiste ein:</em>
Menu, MeineMenüleiste, Add, &amp;Datei, :Dateimenü
Menu, MeineMenüleiste, Add, &amp;?, :Hilfsmenü

<em>; Heftet die Menüleiste an das Fenster an:</em>
Gui, Menu, MeineMenüleiste

<em>; Erstellt das Haupt-Eingabefeld und zeigt das Fenster an:</em>
Gui, +Resize  <em>; Macht die Größe des Fensters veränderbar.</em>
Gui, Add, Edit, vHauptEdit WantTab W600 R20
Gui, Show,, Unbenannt
AktuelleDateiName := ""  <em>; Bedeutet, dass keine aktuelle Datei vorhanden ist.</em>
return

DateiNeu:
GuiControl,, HauptEdit  <em>; Eingabefeld leeren.</em>
return

DateiÖffnen:
Gui +OwnDialogs  <em>; Zwingt den Benutzer, das FileSelectFile-Dialogfenster zu schließen, bevor er zum Hauptfenster zurückkehren kann.</em>
FileSelectFile, AusgewählteDateiName, 3,, Datei öffnen, Text-Dokumente (*.txt)
if not AusgewählteDateiName  <em>; Keine Datei ausgewählt.</em>
    return
Gosub DateiLesen
return

DateiLesen:  <em>; Der Aufrufer hat AusgewählteDateiName bereits für uns gesetzt.</em>
FileRead, HauptEdit, %AusgewählteDateiName%  <em>; Liest den Inhalt der Datei und speichert ihn in die Variable.</em>
if ErrorLevel
{
    MsgBox "%AusgewählteDateiName%" konnte nicht geöffnet werden.
    return
}
GuiControl,, HauptEdit, %HauptEdit%  <em>; Fügt den Text in das Steuerelement ein.</em>
AktuelleDateiName := AusgewählteDateiName
Gui, Show,, %AktuelleDateiName%   <em>; Zeigt den Dateinamen in der Titelleiste an.</em>
return

DateiSpeichern:
if not AktuelleDateiName   <em>; Aktuell keinen Dateinamen ausgewählt, daher "Speichern unter...".</em>
    Goto DateiSpeichernAls
Gosub AktuelleDateiSpeichern
return

DateiSpeichernAls:
Gui +OwnDialogs  <em>; Zwingt den Benutzer, das FileSelectFile-Dialogfenster zu schließen, bevor er zum Hauptfenster zurückkehren kann.</em>
FileSelectFile, AusgewählteDateiName, S16,, Datei speichern, Text-Dokumente (*.txt)
if not AusgewählteDateiName  <em>; Keine Datei ausgewählt.</em>
    return
AktuelleDateiName := AusgewählteDateiName
Gosub AktuelleDateiSpeichern
return

AktuelleDateiSpeichern:  <em>; Der Aufrufer hat sichergestellt, dass AktuelleDateiName nicht leer ist.</em>
if FileExist(AktuelleDateiName)
{
    FileDelete %AktuelleDateiName%
    if ErrorLevel
    {
        MsgBox Überschreiben der Datei "%AktuelleDateiName%" fehlgeschlagen.
        return
    }
}
GuiControlGet, HauptEdit  <em>; Ermittelt den Inhalt des Eingabefeldes.</em>
FileAppend, %HauptEdit%, %AktuelleDateiName%  <em>; Speichert den Inhalt in eine Datei.
; Bei Erfolg den Dateinamen in der Titelleiste anzeigen (falls es mit DateiSpeichernAls aufgerufen wurde):</em>
Gui, Show,, %AktuelleDateiName%
return

HilfeÜber:
Gui, Über:+owner1  <em>; Macht das Über-Fenster zum Unterfenster vom Hauptfenster (Gui Nr. 1).</em>
Gui +Disabled  <em>; Deaktiviert die Interaktion mit dem Hauptfenster.</em>
Gui, Über:Add, Text,, Beliebiger Text.
Gui, Über:Add, Button, Default, OK
Gui, Über:Show
return

ÜberButtonOK:  <em>; Dieser Abschnitt gilt für das Über-Fenster oben.</em>
ÜberGuiClose:
ÜberGuiEscape:
Gui, 1:-Disabled  <em>; Reaktiviert die Interaktion mit dem Hauptfenster (muss vor dem nächsten Schritt erfolgen).</em>
Gui Destroy  <em>; Entfernt das Über-Fenster.</em>
return

GuiDropFiles:  <em>; Ziehen &amp; Ablegen unterstützen.</em>
Loop, Parse, A_GuiEvent, `n
{
    AusgewählteDateiName := A_LoopField  <em>; Nur die erste Datei nehmen (sofern mehrere Dateien vorhanden sind).</em>
    break
}
Gosub DateiLesen
return

GuiSize:
if (ErrorLevel = 1)  <em>; Das Fenster wurde minimiert. Keine Aktion notwendig.</em>
    return
<em>; Ansonsten wurde die Größe des Fensters geändert oder maximiert. Die Größe des Eingabefeldes muss entsprechend angepasst werden.</em>
NeueBreite := A_GuiWidth - 20
NeueHöhe := A_GuiHeight - 20
GuiControl, Move, HauptEdit, W%NeueBreite% H%NeueHöhe%
return

DateiBeenden:     <em>; Benutzer hat "Exit" im Dateimenü ausgewählt.</em>
GuiClose:  <em>; Benutzer hat das Fenster geschlossen.</em>
ExitApp</pre>
</div>
</body>
</html>
