<!DOCTYPE HTML>
<html lang="de">
<head>
<title>Transform - Syntax &amp; Verwendung | AutoHotkey</title>
<meta name="description" content="Der Transform-Befehl führt verschiedene mathematische Funktionen, bitweise Operationen und Aufgaben wie ASCII/Unicode-Konvertierung aus." />
<meta name="ahk:equiv-v2" content="commands/Math.htm" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga4.js" type="text/javascript"></script>
</head>
<body>

<h1>Transform</h1>

<p>Führt verschiedene mathematische Funktionen, bitweise Operationen und Aufgaben wie ASCII/Unicode-Konvertierung aus.</p>
<p class="warning"><strong>Veraltet:</strong> Dieser Befehl ist nicht für neue Skripte empfohlen. Einzelheiten dazu, was Sie stattdessen verwenden können, finden Sie in den Abschnitten zu den Unterbefehlen weiter unten.</p>
<pre class="Syntax"><span class="func">Transform</span>, AusgabeVar, <a href="#SubCommands">Unterbefehl</a>, Wert1 <span class="optional">, Wert2</span></pre>
<p>Der <em>AusgabeVar</em>-Parameter ist Name der Variable, in der das Ergebnis gespeichert werden soll. Die Parameter <em>Unterbefehl</em>, <em>Wert1</em> und <em>Wert2</em> sind voneinander abhängig und können wie folgt genutzt werden.</p>

<h2 id="SubCommands">Unterbefehle</h2>
<p>Geben Sie für <em>Unterbefehl</em> Folgendes an:</p>
<ul>
  <li><a href="#Unicode">Unicode</a> (nur für ANSI-Versionen): Ermittelt oder speichert Unicode-Text in die Zwischenablage.</li>
  <li><a href="#Deref">Deref</a>: Erweitert Variablenreferenzen und Escapesequenzen, die sich in anderen Variablen befinden.</li>
  <li><a href="#HTML">HTML</a>: Konvertiert eine bestimmte Zeichenkette in ihr HTML-Äquivalent.</li>
  <li><a href="#Asc">Asc</a>: Ermittelt den Zeichencode des ersten Zeichens in einer bestimmten Zeichenkette.</li>
  <li><a href="#Chr">Chr</a>: Ermittelt ein einzelnes Zeichen, das zum angegebenen Zeichencode gehört.</li>
  <li><a href="#Mod">Mod</a>: Ermittelt den Rest einer Division.</li>
  <li><a href="#Exp">Exp</a>: Ermittelt e, potenziert mit <em>N</em>.</li>
  <li><a href="#Sqrt">Sqrt</a>: Ermittelt die Quadratwurzel einer Zahl.</li>
  <li><a href="#Log">Log</a>: Ermittelt den Logarithmus (Basis 10) einer Zahl.</li>
  <li><a href="#Ln">Ln</a>: Ermittelt den Logarithmus (Basis e) einer Zahl.</li>
  <li><a href="#Round">Round</a>: Ermittelt eine Zahl, welche auf <em>N</em> Dezimalstellen gerundet ist.</li>
  <li><a href="#Ceil">Ceil</a>: Ermittelt eine Zahl, welche auf den nächsten Integer aufgerundet ist.</li>
  <li><a href="#Floor">Floor</a>: Ermittelt eine Zahl, welche auf den nächsten Integer abgerundet ist.</li>
  <li><a href="#Abs">Abs</a>: Ermittelt den absoluten Wert einer Zahl.</li>
  <li><a href="#Sin">Sin</a>: Ermittelt den trigonometrischen Sinus einer Zahl.</li>
  <li><a href="#Cos">Cos</a>: Ermittelt den trigonometrischen Kosinus einer Zahl.</li>
  <li><a href="#Tan">Tan</a>: Ermittelt den trigonometrischen Tangens einer Zahl.</li>
  <li><a href="#ASin">ASin</a>: Ermittelt den Arkussinus als Bogenmaß.</li>
  <li><a href="#ACos">ACos</a>: Ermittelt den Arkuskosinus als Bogenmaß.</li>
  <li><a href="#ATan">ATan</a>: Ermittelt den Arkustangens als Bogenmaß.</li>
  <li><a href="#Pow">Pow</a>: Ermittelt eine Basis, potenziert mit einem Exponenten.</li>
  <li><a href="#BitNot">BitNot</a>: Ermittelt die bit-invertierte Version einer Zahl.</li>
  <li><a href="#BitAnd">BitAnd</a>: Ermittelt das Ergebnis des bitweisen UNDs von bestimmten Zahlen.</li>
  <li><a href="#BitOr">BitOr</a>: Ermittelt das Ergebnis des bitweisen ODERs von bestimmten Zahlen.</li>
  <li><a href="#BitXOr">BitXOr</a>: Ermittelt das Ergebnis des bitweisen Exklusiv-ODERs von bestimmten Zahlen.</li>
  <li><a href="#BitShiftLeft">BitShiftLeft</a>: Ermittelt das Ergebnis durch Verschieben einer Zahl um <em>N</em> Bit-Stellen nach links.</li>
  <li><a href="#BitShiftRight">BitShiftRight</a>: Ermittelt das Ergebnis durch Verschieben einer Zahl um <em>N</em> Bit-Stellen nach rechts.</li>
</ul>

<h3 id="Unicode">Unicode</h3>
<p class="warning"><strong>Veraltet:</strong> Nicht für neue Skripte empfohlen. Verwenden Sie stattdessen die Unicode-Version von AutoHotkey.</p>
<p>Ermittelt oder speichert Unicode-Text in die Zwischenablage (nur für ANSI-Versionen).</p>
<pre class="Syntax"><span class="func">Transform</span>, AusgabeVar, Unicode <span class="optional">, Zkette</span></pre>
<p>Hinweis: Die gesamte Zwischenablage kann mit <a href="../misc/Clipboard.htm#ClipboardAll">ClipboardAll</a> gespeichert und wiederhergestellt werden, damit dieser Unterbefehl ohne Verlust des originalen Inhalts der Zwischenablage ausgeführt werden kann.</p>
<p>Es gibt zwei verschiedene Modi, wie dieser Unterbefehl ausgeführt werden kann:</p>
<pre>Transform, AusgabeVar, Unicode  <em>; Ermittelt den Unicode-Text aus der Zwischenablage als UTF-8-Zeichenkette.</em>
Transform, Clipboard, Unicode, %MeineUTF_Zkette%  <em>; Speichert den Unicode-Text in die Zwischenablage.</em></pre>
<p>Im zweiten oberen Beispiel besteht die Möglichkeit, anstelle von <code>%MeineUTF_Zkette%</code> eine direkt geschriebene UTF-8-Zeichenkette anzugeben.</p>
<p>Mit dem folgenden Hotkey kann eine UTF-8-Zeichenkette ermittelt werden, die zu einer angegebene Unicode-Zeichenkette gehört:</p>
<pre>^!u::  <em>; Hotkey STRG+ALT+U.</em>
MsgBox Kopieren Sie einen beliebigen Unicode-Text, kehren Sie danach zu diesem Fenster zurück und drücken Sie auf OK, um fortzufahren.
Transform, ClipUTF, Unicode
Clipboard := "Transform, Clipboard, Unicode, %ClipUTF%`r`n"
MsgBox Die Zwischenablage enthält nun die folgende Zeile, die Sie in Ihrem Skript einfügen können. Bei ihrer Ausführung wird der originale Unicode-Text, den man kopiert hat, in die Zwischenablage gespeichert:`n`n%Clipboard%
return</pre>
<p class="note"><strong>Hinweis:</strong> Der Befehl <code><a href="Send.htm#sendu">Send {U+nnnn}</a></code> ist eine alternative Methode, um Unicode-Zeichen zu erzeugen.</p>

<h3 id="Deref">Deref</h3>
<p class="warning"><strong>Veraltet:</strong> Nicht für neue Skripte empfohlen. Verwenden Sie stattdessen die <a href="../Language.htm#expressions">Ausdruckssyntax</a> oder eine benutzerdefinierte Funktion wie <a href="RegExMatch.htm#ExDeref">Deref()</a>.</p>
<p>Erweitert Variablenreferenzen und <a href="../misc/EscapeChar.htm">Escapesequenzen</a>, die sich in anderen Variablen befinden.</p>
<pre class="Syntax"><span class="func">Transform</span>, AusgabeVar, Deref, Zkette</pre>
<p>Jede schlecht formatierte Variablenreferenz wird im erweiterten Ergebnis weggelassen. Das gleiche gilt auch, wenn sich <em>AusgabeVar</em> in sich selbst erweitert. Das heißt, dass jegliche Referenzen zu <em>AusgabeVar</em> innerhalb der Variablen von <em>Zkette</em> beim Erweitern weggelassen werden (allerdings kann <em>Zkette</em> <strong>selbst</strong> <code>%AusgabeVar%</code> sein). Wenn im folgenden Beispiel Var1 die Zeichenkette "Test" und Var2 die <strong>direkt geschriebene</strong> Zeichenkette "%Var1%" enthält, wird <em>AusgabeVar</em> auf die Zeichenkette "Test" gesetzt: <code>Transform, AusgabeVar, Deref, %Var2%</code>. Innerhalb einer <a href="../Functions.htm">Funktion</a> werden alle Variablen in <em>Zkette</em> in lokale Variablen aufgelöst, es sei denn, es gibt keine Variablen dieser Art, dann werden sie in globale Variablen aufgelöst (oder leer gemacht, wenn keine vorhanden sind).</p>

<h3 id="HTML">HTML</h3>
<p class="warning"><strong>Veraltet:</strong> Nicht für neue Skripte empfohlen. Verwenden Sie stattdessen eine benutzerdefinierte Funktion wie <a href="../scripts/index.htm#HTML_Entities_Encoding">EncodeHTML()</a>.</p>
<p>Konvertiert <em>Zkette</em> in ihr HTML-Äquivalent, indem Zeichen, deren ASCII-Werte über 127 liegen, in ihre HTML-Namen übersetzt werden (z. B. wird <code>£</code> zu <code>&amp;pound;</code>).</p>
<pre class="Syntax"><span class="func">Transform</span>, AusgabeVar, HTML, Zkette <span class="optional">, Flags</span></pre>
<p>Zudem werden die vier Zeichen <code>"&amp;&lt;&gt;</code> in <code>&amp;quot;&amp;amp;&amp;lt;&amp;gt;</code> und zu guter Letzt jedes LF-Zeichen (<code>`n</code>) in <code>&lt;br&gt;`n</code> übersetzt (also <code>&lt;br&gt;</code>, gefolgt von einem LF-Zeilenumbruchszeichen). Der <em>Flags</em>-Parameter wird ignoriert.</p>
<p><strong>Bei der Unicode-Version</strong> kann zusätzlich der <em>Flags</em>-Parameter verwendet werden, der entweder eine 0 oder eine Kombination (Summe) der folgenden Werte sein kann. Lässt man diesen Parameter weg, wird standardmäßig 1 verwendet.</p>
<ul>
<li>1: Wandelt bestimmte Zeichen in benannte Ausdrücke um. Zum Beispiel wird <code>€</code> zu <code>&amp;euro;</code>.</li>
<li>2: Wandelt bestimmte Zeichen in nummerierte Ausdrücke um. Zum Beispiel wird <code>€</code> zu <code>&amp;#8364;</code>.</li>
</ul>
<p>Nur Zeichen, die nicht zum ASCII-Zeichensatz gehören, sind davon betroffen. Wenn <i>Flags</i> eine 3 ist, werden nummerierte Ausdrücke nur verwendet, wenn kein benannter Ausdruck verfügbar ist. Die folgenden Zeichen werden immer umgewandelt: <code>&lt;&gt;"&amp;</code> und <code>`n</code> (LF-Zeilenumbruchszeichen).</p>

<h3 id="Asc">Asc</h3>
<p class="warning"><strong>Veraltet:</strong> Nicht für neue Skripte empfohlen. Verwenden Sie stattdessen <a href="Asc.htm">Asc()</a>.</p>
<p>Ermittelt den Zeichencode (eine Zahl zwischen 1 und 255, oder bei Unicode zwischen 1 und 65535) des ersten Zeichens in <em>Zkette</em>.</p>
<pre class="Syntax"><span class="func">Transform</span>, AusgabeVar, Asc, Zkette</pre>
<p>Wenn <em>Zkette</em> leer ist, wird <em>AusgabeVar</em> auch leer gemacht. Zum Beispiel: <code>Transform, AusgabeVar, Asc, %VarMitZkette%</code>. Für Unicode-Ergänzungszeichen können Sie stattdessen <a href="Ord.htm">Ord()</a> verwenden.</p>

<h3 id="Chr">Chr</h3>
<p class="warning"><strong>Veraltet:</strong> Nicht für neue Skripte empfohlen. Verwenden Sie stattdessen <a href="Chr.htm">Chr()</a>.</p>
<p>Ermittelt ein einzelnes Zeichen, dessen Zeichencode mit der angegebenen Zahl übereinstimmt.</p>
<pre class="Syntax"><span class="func">Transform</span>, AusgabeVar, Chr, Zahl</pre>
<p>Wenn <em>Zahl</em> nicht zwischen 1 und 255 (oder bei Unicode zwischen 1 und 65535) liegt, wird <em>AusgabeVar</em> leer gemacht, um das Problem zu kennzeichnen. Zum Beispiel: <code>Transform, AusgabeVar, Chr, 130</code>. Im Gegensatz zu <a href="Chr.htm">Chr()</a> unterstützt dieser Unterbefehl keine Unicode-Ergänzungszeichen (Zeichencodes von 0x10000 bis 0x10FFFF).</p>

<h3 id="Mod">Mod</h3>
<p class="warning"><strong>Veraltet:</strong> Nicht für neue Skripte empfohlen. Verwenden Sie stattdessen <a href="Math.htm#Mod">Mod()</a>.</p>
<p>Modulo. Ermittelt den Rest aus einer Division zweier Zahlen.</p>
<pre class="Syntax"><span class="func">Transform</span>, AusgabeVar, Mod, Dividend, Divisor</pre>
<p>Wenn <em>Divisor</em> eine 0 ist, wird <em>AusgabeVar</em> leer gemacht. Sowohl <em>Dividend</em> als auch <em>Divisor</em> können einen Dezimalpunkt enthalten. Falls <em>Divisor</em> negativ ist, wird er für die Berechnung als positiv angesehen. Im folgenden Beispiel ist das Ergebnis eine 2: <code>Transform, AusgabeVar, Mod, 5, 3</code>.</p>

<h3 id="Exp">Exp</h3>
<p class="warning"><strong>Veraltet:</strong> Nicht für neue Skripte empfohlen. Verwenden Sie stattdessen <a href="Math.htm#Exp">Exp()</a>.</p>
<p>Ermittelt e (ungefähr 2.71828182845905), potenziert mit <em>N</em>.</p>
<pre class="Syntax"><span class="func">Transform</span>, AusgabeVar, Exp, N</pre>
<p>Der Parameter <em>N</em> kann negativ sein und einen Dezimalpunkt enthalten.</p>

<h3 id="Sqrt">Sqrt</h3>
<p class="warning"><strong>Veraltet:</strong> Nicht für neue Skripte empfohlen. Verwenden Sie stattdessen <a href="Math.htm#Sqrt">Sqrt()</a>.</p>
<p>Ermittelt die Quadratwurzel einer bestimmten Zahl.</p>
<pre class="Syntax"><span class="func">Transform</span>, AusgabeVar, Sqrt, Zahl</pre>
<p>Wenn <em>Zahl</em> negativ ist, wird <em>AusgabeVar</em> leer gemacht.</p>

<h3 id="Log">Log</h3>
<p class="warning"><strong>Veraltet:</strong> Nicht für neue Skripte empfohlen. Verwenden Sie stattdessen <a href="Math.htm#Log">Log()</a>.</p>
<p>Ermittelt den Logarithmus (Basis 10) einer bestimmten Zahl.</p>
<pre class="Syntax"><span class="func">Transform</span>, AusgabeVar, Log, Zahl</pre>
<p>Wenn <em>Zahl</em> negativ ist, wird <em>AusgabeVar</em> leer gemacht.</p>

<h3 id="Ln">Ln</h3>
<p class="warning"><strong>Veraltet:</strong> Nicht für neue Skripte empfohlen. Verwenden Sie stattdessen <a href="Math.htm#Ln">Ln()</a>.</p>
<p>Ermittelt den Logarithmus (Basis e) einer bestimmten Zahl.</p>
<pre class="Syntax"><span class="func">Transform</span>, AusgabeVar, Ln, Zahl</pre>
<p>Wenn <em>Zahl</em> negativ ist, wird <em>AusgabeVar</em> leer gemacht.</p>

<h3 id="Round">Round</h3>
<p class="warning"><strong>Veraltet:</strong> Nicht für neue Skripte empfohlen. Verwenden Sie stattdessen <a href="Math.htm#Round">Round()</a>.</p>
<p>Ermittelt eine bestimmte Zahl, gerundet auf <em>N</em> Dezimalstellen.</p>
<pre class="Syntax"><span class="func">Transform</span>, AusgabeVar, Round, Zahl <span class="optional">, N</span></pre>
<p>Lässt man <em>N</em> weg, wird <em>AusgabeVar</em> auf <em>Zahl</em> gesetzt, gerundet auf den nächsten Integer. Ist <em>N</em> eine positive Zahl, wird <em>Zahl</em> auf <em>N</em> Dezimalstellen gerundet. Ist <em>N</em> negativ, wird <em>Zahl</em> auf <em>N</em> Stellen nach links gerundet. Zum Beispiel rundet -1 auf Einerstelle, -2 auf Zehnerstelle und -3 auf Hunderterstelle. Hinweis: Der Round-Unterbefehl entfernt beim Runden von Dezimalstellen keine Nullen am Ende. Zum Beispiel wird 12.333 zu 12.300000 beim Runden auf eine Dezimalstelle. Dieses Verhalten kann geändert werden, indem so etwas wie <code><a href="SetFormat.htm">SetFormat</a>, Float, 0.1</code> vor der Operation verwendet wird (tatsächlich könnte <a href="SetFormat.htm">SetFormat</a> den Round-Unterbefehl an erster Stelle überflüssig machen).</p>

<h3 id="Ceil">Ceil</h3>
<p class="warning"><strong>Veraltet:</strong> Nicht für neue Skripte empfohlen. Verwenden Sie stattdessen <a href="Math.htm#Ceil">Ceil()</a>.</p>
<p>Ermittelt eine bestimmte Zahl, aufgerundet auf den nächsten Integer.</p>
<pre class="Syntax"><span class="func">Transform</span>, AusgabeVar, Ceil, Zahl</pre>

<h3 id="Floor">Floor</h3>
<p class="warning"><strong>Veraltet:</strong> Nicht für neue Skripte empfohlen. Verwenden Sie stattdessen <a href="Math.htm#Floor">Floor()</a>.</p>
<p>Ermittelt eine bestimmte Zahl, abgerundet auf den nächsten Integer.</p>
<pre class="Syntax"><span class="func">Transform</span>, AusgabeVar, Floor, Zahl</pre>

<h3 id="Abs">Abs</h3>
<p class="warning"><strong>Veraltet:</strong> Nicht für neue Skripte empfohlen. Verwenden Sie stattdessen <a href="Math.htm#Abs">Abs()</a>.</p>
<p>Ermittelt den absoluten Wert einer bestimmten Zahl.</p>
<pre class="Syntax"><span class="func">Transform</span>, AusgabeVar, Abs, Zahl</pre>
<p>Entfernt das Minuszeichen (den Bindestrich) am Anfang von <em>Zahl</em>, sofern vorhanden.</p>

<h3 id="Sin">Sin</h3>
<p class="warning"><strong>Veraltet:</strong> Nicht für neue Skripte empfohlen. Verwenden Sie stattdessen <a href="Math.htm#Sin">Sin()</a>.</p>
<p>Ermittelt den trigonometrischen Sinus einer bestimmten Zahl.</p>
<pre class="Syntax"><span class="func">Transform</span>, AusgabeVar, Sin, Zahl</pre>
<p><em>Zahl</em> muss als Bogenmaß angegeben werden.</p>

<h3 id="Cos">Cos</h3>
<p class="warning"><strong>Veraltet:</strong> Nicht für neue Skripte empfohlen. Verwenden Sie stattdessen <a href="Math.htm#Cos">Cos()</a>.</p>
<p>Ermittelt den trigonometrischen Kosinus einer bestimmten Zahl.</p>
<pre class="Syntax"><span class="func">Transform</span>, AusgabeVar, Cos, Zahl</pre>
<p><em>Zahl</em> muss als Bogenmaß angegeben werden.</p>

<h3 id="Tan">Tan</h3>
<p class="warning"><strong>Veraltet:</strong> Nicht für neue Skripte empfohlen. Verwenden Sie stattdessen <a href="Math.htm#Tan">Tan()</a>.</p>
<p>Ermittelt den trigonometrischen Tangens einer bestimmten Zahl.</p>
<pre class="Syntax"><span class="func">Transform</span>, AusgabeVar, Tan, Zahl</pre>
<p><em>Zahl</em> muss als Bogenmaß angegeben werden.</p>

<h3 id="ASin">ASin</h3>
<p class="warning"><strong>Veraltet:</strong> Nicht für neue Skripte empfohlen. Verwenden Sie stattdessen <a href="Math.htm#ASin">ASin()</a>.</p>
<p>Ermittelt den Arkussinus (die Zahl, deren Sinus die angegebene Zahl ist) als Bogenmaß.</p>
<pre class="Syntax"><span class="func">Transform</span>, AusgabeVar, ASin, Zahl</pre>
<p>Wenn <em>Zahl</em> kleiner als -1 oder größer als 1 ist, wird <em>AusgabeVar</em> leer gemacht.</p>

<h3 id="ACos">ACos</h3>
<p class="warning"><strong>Veraltet:</strong> Nicht für neue Skripte empfohlen. Verwenden Sie stattdessen <a href="Math.htm#ACos">ACos()</a>.</p>
<p>Ermittelt den Arkuskosinus (die Zahl, deren Kosinus die angegebene Zahl ist) als Bogenmaß.</p>
<pre class="Syntax"><span class="func">Transform</span>, AusgabeVar, ACos, Zahl</pre>
<p>Wenn <em>Zahl</em> kleiner als -1 oder größer als 1 ist, wird <em>AusgabeVar</em> leer gemacht.</p>

<h3 id="ATan">ATan</h3>
<p class="warning"><strong>Veraltet:</strong> Nicht für neue Skripte empfohlen. Verwenden Sie stattdessen <a href="Math.htm#ATan">ATan()</a>.</p>
<p>Ermittelt den Arkustangens (die Zahl, deren Tangens die angegebene Zahl ist) als Bogenmaß.</p>
<pre class="Syntax"><span class="func">Transform</span>, AusgabeVar, ATan, Zahl</pre>

<h3 id="Pow">Pow</h3>
<p class="warning"><strong>Veraltet:</strong> Nicht für neue Skripte empfohlen. Verwenden Sie stattdessen den <a href="../Variables.htm#pow"><code>**</code>-Operator</a>.</p>
<p>Ermittelt <em>Basis</em>, potenziert mit <em>Exponent</em>.</p>
<pre class="Syntax"><span class="func">Transform</span>, AusgabeVar, Pow, Basis, Exponent</pre>
<p>Sowohl <em>Basis</em> als auch <em>Exponent</em> können einen Dezimalpunkt enthalten. Wenn <em>Exponent</em> negativ ist, wird <em>AusgabeVar</em> in eine Floating-Point-Zahl umgewandelt, auch dann, wenn <em>Basis</em> und <em>Exponent</em> Integer sind. Eine negative <em>Basis</em>, kombiniert mit einem gebrochenen <em>Exponent</em> wie 1.5, wird nicht unterstützt und führt dazu, dass <em>AusgabeVar</em> leer gemacht wird.</p>

<h3 id="BitNot">BitNot</h3>
<p class="warning"><strong>Veraltet:</strong> Nicht für neue Skripte empfohlen. Verwenden Sie stattdessen den <a href="../Variables.htm#unary"><code>~</code>-Operator</a>.</p>
<p>Ermittelt die bit-invertierte Version einer bestimmten Zahl.</p>
<pre class="Syntax"><span class="func">Transform</span>, AusgabeVar, BitNot, Zahl</pre>
<p>Floating-Point-Zahlen werden zu Integern gekürzt, bevor die Berechnung erfolgt. Wenn <em>Zahl</em> eine Zahl zwischen 0 und 4294967295 (0xffffffff) ist, wird sie als <strong>vorzeichenlosen</strong> 32-Bit-Wert behandelt. Ansonsten wird sie als <strong>vorzeichenfähigen</strong> 64-Bit-Wert behandelt. Im folgenden Beispiel ist das Ergebnis 0xfffff0f0 (4294963440): <code>Transform, AusgabeVar, BitNot, 0xf0f</code>.</p>

<h3 id="BitAnd">BitAnd</h3>
<p class="warning"><strong>Veraltet:</strong> Nicht für neue Skripte empfohlen. Verwenden Sie stattdessen den <a href="../Variables.htm#bitwise"><code>&amp;</code>-Operator</a>.</p>
<p>Ermittelt das Ergebnis des bitweisen UNDs von <em>Zahl1</em> und <em>Zahl2</em>.</p>
<pre class="Syntax"><span class="func">Transform</span>, AusgabeVar, BitAnd, Zahl1, Zahl2</pre>
<p>Floating-Point-Zahlen werden zu Integern gekürzt, bevor die Berechnung erfolgt. Im folgenden Beispiel ist das Ergebnis 0xff00 (65280): <code>Transform, AusgabeVar, BitAnd, 0xff0f, 0xfff0</code>.</p>

<h3 id="BitOr">BitOr</h3>
<p class="warning"><strong>Veraltet:</strong> Nicht für neue Skripte empfohlen. Verwenden Sie stattdessen den <a href="../Variables.htm#bitwise"><code>|</code>-Operator</a>.</p>
<p>Ermittelt das Ergebnis des bitweisen ODERs von <em>Zahl1</em> und <em>Zahl2</em>.</p>
<pre class="Syntax"><span class="func">Transform</span>, AusgabeVar, BitOr, Zahl1, Zahl2</pre>
<p>Floating-Point-Zahlen werden zu Integern gekürzt, bevor die Berechnung erfolgt. Im folgenden Beispiel ist das Ergebnis 0xf0f0 (61680): <code>Transform, AusgabeVar, BitOr, 0xf000, 0x00f0</code>.</p>

<h3 id="BitXOr">BitXOr</h3>
<p class="warning"><strong>Veraltet:</strong> Nicht für neue Skripte empfohlen. Verwenden Sie stattdessen den <a href="../Variables.htm#bitwise"><code>^</code>-Operator</a>.</p>
<p>Ermittelt das Ergebnis des bitweisen Exklusiv-ODERs von <em>Zahl1</em> und <em>Zahl2</em>.</p>
<pre class="Syntax"><span class="func">Transform</span>, AusgabeVar, BitXOr, Zahl1, Zahl2</pre>
<p>Floating-Point-Zahlen werden zu Integern gekürzt, bevor die Berechnung erfolgt. Im folgenden Beispiel ist das Ergebnis 0xff00 (65280): <code>Transform, AusgabeVar, BitXOr, 0xf00f, 0x0f0f</code>.</p>

<h3 id="BitShiftLeft">BitShiftLeft</h3>
<p class="warning"><strong>Veraltet:</strong> Nicht für neue Skripte empfohlen. Verwenden Sie stattdessen den <a href="../Variables.htm#bitwise"><code>&lt;&lt;</code>-Operator</a>.</p>
<p>Ermittelt das Ergebnis durch Verschieben einer bestimmten Zahl um <em>N</em> Bit-Stellen nach links.</p>
<pre class="Syntax"><span class="func">Transform</span>, AusgabeVar, BitShiftLeft, Zahl, N</pre>
<p>Entspricht dem Multiplizieren von <em>Zahl</em> mit "2 potenziert mit <em>N</em>". Floating-Point-Zahlen werden zu Integern gekürzt, bevor die Berechnung erfolgt. Im folgenden Beispiel ist das Ergebnis eine 8: <code>Transform, AusgabeVar, BitShiftLeft, 1, 3</code>.</p>

<h3 id="BitShiftRight">BitShiftRight</h3>
<p class="warning"><strong>Veraltet:</strong> Nicht für neue Skripte empfohlen. Verwenden Sie stattdessen den <a href="../Variables.htm#bitwise"><code>&gt;&gt;</code>-Operator</a>.</p>
<p>Ermittelt das Ergebnis durch Verschieben einer bestimmten Zahl um <em>N</em> Bit-Stellen nach rechts.</p>
<pre class="Syntax"><span class="func">Transform</span>, AusgabeVar, BitShiftRight, Zahl, N</pre>
<p>Entspricht dem Dividieren von <em>Zahl</em> mit "2 potenziert mit <em>N</em>", bei dem der Rest gekürzt wird. Floating-Point-Zahlen werden zu Integern gekürzt, bevor die Berechnung erfolgt. Im folgenden Beispiel ist das Ergebnis eine 2: <code>Transform, AusgabeVar, BitShiftRight, 17, 3</code>.</p>

<div id="ToCodePage">
  <h3 id="FromCodePage">FromCodePage / ToCodePage</h3>
  <p><span class="ver">[AHK_L 54+]</span>: Entfernt. Nutzen Sie stattdessen <a href="StrPut.htm">StrPut</a>/<a href="StrGet.htm">StrGet</a>.</p>
</div>

<h2 id="Remarks">Bemerkungen</h2>
<p>Unterbefehle, die numerische Parameter akzeptieren, können auch <a href="../Variables.htm#Expressions">Ausdrücke</a> für solche Parameter verwenden.</p>
<p>Wenn einer der Parameter eine Floating-Point-Zahl ist, ermitteln folgende Unterbefehle eine Floating-Point-Zahl anstelle eines Integers: <a href="#Mod">Mod</a>, <a href="#Pow">Pow</a>, <a href="#Round">Round</a> und <a href="#Abs">Abs</a>. Die Anzahl der abgerufenen Dezimalstellen wird über <a href="SetFormat.htm">SetFormat</a> bestimmt.</p>
<p>Um einen Bogenmaßwert in Grad umzurechnen, multiplizieren Sie ihn mit 180/pi (ungefähr 57.29578). Um einen Gradwert in Bogenmaß umzurechnen, multiplizieren Sie ihn mit pi/180 (ungefähr 0.01745329252).</p>
<p>Der Wert von pi (ungefähr 3.141592653589793) ist das 4-fache von Arkustangens 1.</p>

<h2 id="Related">Siehe auch</h2>
<p><a href="Math.htm">Mathematische Funktionen</a>, <a href="SetFormat.htm">SetFormat</a>, <a href="../Variables.htm#Expressions">Ausdrücke</a>, <a href="../Variables.htm#Operators">Operatoren</a>, <a href="StringLower.htm">StringLower</a>, <a href="IfIs.htm">if Var is Typ</a></p>

<h2 id="Examples">Beispiele</h2>
<div class="ex" id="ExBasic">
<p><a class="ex_number" href="#ExBasic"></a> Ermittelt den ASCII-Code des Buchstaben A und speichert ihn in <var>AusgabeVar</var>.</p>
<pre>Transform, AusgabeVar, Asc, A</pre>
</div>

</body>
</html>
