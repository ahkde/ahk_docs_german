<!DOCTYPE HTML>
<html lang="de">
<head>
<title>StringSplit - Syntax &amp; Verwendung | AutoHotkey</title>
<meta name="description" content="Der StringSplit-Befehl teilt anhand bestimmter Trennzeichen eine Zeichenkette in mehrere Teilzeichenketten auf." />
<meta name="ahk:equiv-v2" content="commands/StrSplit.htm" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
</head>
<body>

<h1>StringSplit</h1>
<p>Teilt anhand bestimmter Trennzeichen eine Zeichenkette in mehrere Teilzeichenketten auf.</p>
<p class="warning"><strong>Veraltet:</strong> Dieser Befehl ist nicht für neue Skripte empfohlen. Verwenden Sie stattdessen die <a href="StrSplit.htm">StrSplit</a>-Funktion.</p>
<pre class="Syntax"><span class="func">StringSplit</span>, AusgabeArray, EingabeVar <span class="optional">, Trennzeichen, WegzulassendeZeichen</span></pre>

<h2 id="Parameters">Parameter</h2>
<dl>

  <dt>AusgabeArray</dt>
  <dd>
    <p>Name des <a href="../misc/Arrays.htm#pseudo">Pseudo-Arrays</a>, in der jede extrahierte Teilzeichenkette von <em>EingabeVar</em> gespeichert werden soll. Wenn zum Beispiel MeinArray angegeben ist, wird der Befehl die Anzahl der erzeugten Teilzeichenketten (0, wenn keine) in MeinArray0 speichern, die erste Teilzeichenkette in MeinArray1, die zweite in MeinArray2 und so weiter.</p>
    <p>Um innerhalb einer <a href="../Functions.htm">Funktion</a> ein Pseudo-Array global statt lokal zu machen, <a href="../Functions.htm#Global">deklarieren</a> Sie MeinArray0 als globale Variable, bevor Sie diesen Befehl verwenden (das Gegenteil davon gilt für <a href="../Functions.htm#AssumeGlobal">Assume-Global</a>-Funktionen). Oft ist es auch notwendig, jedes Element dieses Pseudo-Arrays einzeln zu deklarieren, da ein <a href="../Functions.htm#ArrayConfusion">häufiger Anlass zu Verwirrung</a> vorliegt. Für weitere Details, siehe <a href="../Functions.htm#PseudoArrays">Funktionen</a>.</p>
  </dd>

  <dt>EingabeVar</dt>
  <dd>
    <p>Name der Variable, deren Inhalt geparst werden soll. Umschließen Sie den Namen nicht mit Prozentzeichen, es sei denn, Sie wollen den <em>Inhalt</em> der Variable als Namen verwenden.</p>
    <p class="note"><strong>Hinweis</strong>: <em>EingabeVar</em> darf keine Variable von <em>AusgabeArray</em> sein.</p>
  </dd>

  <dt>Trennzeichen</dt>
  <dd>
    <p>Wenn dieser Parameter weggelassen wird oder leer ist, wird jedes Zeichen in <em>EingabeVar</em> als einzelne Teilzeichenkette behandelt.</p>
    <p>Ansonsten kann <em>Trennzeichen</em> ein oder mehrere Zeichen enthalten (Groß-/Kleinschreibung-sensitiv), um zu bestimmen, wo die Abgrenzungen zwischen den Teilzeichenketten in <em>EingabeVar</em> erfolgen sollen. Da die Trennzeichen nicht zu den Teilzeichenketten gehören, werden sie nie in <em>AusgabeArray</em> kopiert. Befindet sich außerdem nichts zwischen einem Paar von Trennzeichen innerhalb von <em>EingabeVar</em>, wird das entsprechende Array-Element leer sein.</p>
    <p>Zum Beispiel: <code>`,</code> (ein escapezeichenversehenes Komma) würde die Zeichenkette jeweils bei einem Komma teilen. Ebenso würde %A_Tab%%A_Space% jedes Mal ein neues Array-Element erstellen, wenn ein Leer- oder Tabulatorzeichen in <em>EingabeVar</em> vorkommt.</p>
    <p>Um eine Zeichenkette anstelle eines Zeichens als Trennung zu verwenden, verwenden Sie zunächst <a href="StrReplace.htm">StrReplace()</a> oder <a href="StringReplace.htm">StringReplace</a>, um alle Vorkommen der Zeichenkette mit einem einzelnen Zeichen zu ersetzen, das nie im Text genutzt wird. Das folgende Beispiel zeigt, wie die Zeichenkette &lt;br&gt; als Trennung verwendet werden kann:</p>
<pre>StringReplace, NeueHTML, HTMLZkette, &lt;br&gt;, ``, All  <em>; Ersetzt jedes &lt;br&gt; mit einem umgekehrten Häkchen.</em>
StringSplit, MeinArray, NeueHTML, ``  <em>; Teilt die Zeichenkette jeweils bei einem umgekehrten Häkchen.</em></pre>
  </dd>

  <dt>WegzulassendeZeichen</dt>
  <dd>
    <p>Eine optionale Liste von Zeichen (Groß-/Kleinschreibung-sensitiv), die jeweils am Anfang und Ende eines Array-Elements weggelassen werden sollen. Wenn <em>WegzulassendeZeichen</em> beispielsweise <code>%A_Space%%A_Tab%</code> wäre, wird bei jedem abgerufenen Element Leer- oder Tabulatorzeichen am Anfang und Ende (aber nicht in der Mitte) entfernt.</p>
    <p>Wenn <em>Trennzeichen</em> leer ist, gibt <em>WegzulassendeZeichen</em> an, welche Zeichen das Array nicht enthalten soll.</p>
    <p>Im Gegensatz zum letzten Parameter der meisten anderen Befehle müssen Kommas in <em>WegzulassendeZeichen</em> mit einem Escapezeichen versehen werden (`,).</p>
  </dd>

</dl>

<h2 id="Remarks">Bemerkungen</h2>
<p>Falls die Array-Elemente bereits vorhanden sind, wird der Befehl die Werte nur von den ersten N Elementen ändern - N ist dabei die Anzahl der Teilzeichenketten in <em>EingabeVar</em>. Alle bereits vorhandenen Elemente über N bleiben unverändert. Daher sollte man am besten das 0-Element (MeinArray0) verwenden, um festzustellen, wie viele Elemente tatsächlich mit diesem Befehl erstellt worden sind.</p>
<p>Leerraumzeichen wie Leer- und Tabulatorzeichen werden beibehalten, sofern sie selbst keine Trennzeichen sind oder in <em>WegzulassendeZeichen</em> vorkommen. Leer- und Tabulatorzeichen können an beiden Enden einer Variable via Selbstzuweisung entfernt werden, während <a href="AutoTrim.htm">AutoTrim</a> aktiv ist (Standardeinstellung). Zum Beispiel: <code>MeinArray1 = %MeinArray1%</code>.</p>
<p>Um eine Zeichenkette im CSV-Format (kommagetrennte Werte) zu splitten, können Sie eine <a href="LoopParse.htm">parsende Schleife</a> verwenden, weil sie nativ mit CSV umgehen kann.</p>
<p>Um die Felder vor dem Splitten anders anzuordnen, verwenden Sie den <a href="Sort.htm">Sort</a>-Befehl.</p>
<p>Wenn die Teilzeichenketten nicht dauerhaft im Arbeitsspeicher vorhanden sein müssen, sollten Sie in Betracht ziehen, eine <a href="LoopParse.htm">parsende Schleife</a> zu verwenden. Sie könnten dadurch viel Speicherplatz sparen, vor allem, wenn <em>EingabeVar</em> sehr groß ist. Zum Beispiel:</p>
<pre>Farben := "rot,grün,blau"
Loop, Parse, Farben, `,
    MsgBox Farbnummer %A_Index% ist %A_LoopField%.</pre>

<h2 id="Related">Siehe auch</h2>
<p><a href="StrSplit.htm">StrSplit()</a>, <a href="LoopParse.htm">parsende Schleife</a>, <a href="../misc/Arrays.htm">Arrays</a>, <a href="Sort.htm">Sort</a>, <a href="SplitPath.htm">SplitPath</a>, <a href="IfInString.htm">IfInString</a>, <a href="StringGetPos.htm">StringGetPos</a>, <a href="StringMid.htm">StringMid</a>, <a href="StringTrimLeft.htm">StringTrimLeft</a>, <a href="StringTrimLeft.htm">StringTrimRight</a>, <a href="StringLen.htm">StringLen</a>, <a href="StringLower.htm">StringLower</a>, <a href="StringLower.htm">StringUpper</a>, <a href="StringReplace.htm">StringReplace</a></p>

<h2 id="Examples">Beispiele</h2>
<div class="ex" id="ExSpace">
<p><a class="ex_number" href="#ExSpace"></a> Teilt einen Satz in ein Array von Wörtern auf und meldet das vierte Wort.</p>
<pre>TestZkette := "Das ist ein Test."
StringSplit, wort_array, TestZkette, %A_Space%, .  <em>; Punkte weglassen.</em>
MsgBox, Das vierte Wort ist %wort_array4%.</pre>
</div>

<div class="ex" id="ExComma">
<p><a class="ex_number" href="#ExComma"></a> Teilt eine kommagetrennte Liste von Farben in ein Array von Teilzeichenketten auf und geht diese einzeln durch.</p>
<pre>Farben := "rot,grün,blau"
StringSplit, FarbenArray, Farben, `,
Loop, %FarbenArray0%
{
    diese_Farbe := FarbenArray%A_Index%
    MsgBox, Farbnummer %A_Index% ist %diese_Farbe%.
}</pre>
</div>

</body>
</html>
