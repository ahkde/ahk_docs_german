<!DOCTYPE HTML>
<html lang="de">
<head>
<title>Funktionsobjekte - Definition &amp; Verwendung | AutoHotkey</title>
<meta name="description" content="Funktionsobjekte sind entweder Referenzen zu Func-Objekten, die tatsächliche Funktionen repräsentieren, oder Objekte, die wie Funktionen aufgerufen werden können." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
<script src="../static/ga4.js" type="text/javascript"></script>
</head>
<body>

<h1>Funktionsobjekte</h1>

<p>"Funktionsobjekt" bedeutet in der Regel folgendes:</p>
<ul>
  <li>Eine Referenz zu einem <a href="Func.htm">Func-Objekt</a>, das eine tatsächliche <a href="../Functions.htm">Funktion</a> repräsentiert; entweder eine interne oder im Skript definierte Funktion.</li>
  <li>Ein benutzerdefiniertes Objekt, das wie eine Funktion aufgerufen werden kann. Dies bezeichnet man manchmal auch als "Funktor".</li>
  <li>Jedes andere Objekt, das wie eine Funktion aufgerufen werden kann, wie z. B. ein <a href="#BoundFunc">BoundFunc-Objekt</a> oder ein JavaScript-Funktionsobjekt, zurückgegeben von einer COM-Methode.</li>
</ul>
<p>Funktionsobjekte können in Verbindung mit folgenden Dingen verwendet werden:</p>
<ul>
  <li><a href="../commands/Gui.htm#label">Gui-Steuerelement-Ereignisse</a> (g-Labels)</li>
  <li><a href="../commands/Hotkey.htm#Functor">Hotkey</a></li>
  <li><a href="../commands/Menu.htm#Functor">Menu</a></li>
  <li><a href="../commands/OnClipboardChange.htm#function">OnClipboardChange()</a></li>
  <li><a href="../commands/OnExit.htm#function">OnExit()</a></li>
  <li><a href="../commands/OnMessage.htm">OnMessage()</a></li>
  <li><a href="../commands/SetTimer.htm#Functor">SetTimer</a></li>
</ul>

<h2 id="User-Defined">Benutzerdefiniert</h2>
<!-- TODO: Explain how a user-defined object could be useful -->
<p>Benutzerdefinierte Funktionsobjekte sollten diesem allgemeinen Muster folgen:</p>
<pre>class MeineKlasseName {
    Call(a, b) {  <em>; Deklariere Parameter je nach Bedarf, oder ein <a href="../Functions.htm#Variadic">Array*</a>.</em>
        <em>;...</em>
    }
    __Call(Methode, args*) {
        if (Methode = "")  <em>; Für <a href="../Functions.htm#DynCall">%fn%()</a> oder fn.()</em>
            return this.Call(args*)
        if (IsObject(Methode))  <em>; Wenn dieses Funktionsobjekt als Methode verwendet wird.</em>
            return this.Call(Methode, args*)
    }
    <em>;...</em>
}
</pre>
<p>Welche Teile genau benötigt werden, hängt von der Nutzung ab:</p>
<ul>
  <li><code>Methode</code> ist eine leere Zeichenkette, wenn das Skript <code><a href="../Functions.htm#DynCall">%this%()</a></code> oder <code>this.()</code> verwendet.</li>
  <li>Verwendet man das Objekt als eine Methode, wird <code>IsObject(Methode)</code> einen Wert ungleich 0 zurückgeben und <code>Methode</code> eine Referenz zum Zielobjekt enthalten. Wenn <code>x.y</code> sich beispielsweise auf das Funktionsobjekt <code>this</code> bezieht, <code>x.y()</code> → <code>this[x]()</code> → <code>this.__Call(x)</code> → <code>this.Call(x)</code>.</li>
  <li><span class="ver">[v1.1.20+]:</span> Wenn das Objekt von einem der internen Funktionen verwendet wird, die eine Callback-Funktion akzeptieren, wie z. B. OnMessage() oder SetTimer, dann ist nur die Call-Methode erforderlich.</li>
</ul>
<p>Die Arbeit kann auch direkt in __Call erfolgen. Allerdings wird das Weiterleiten von __Call nach Call empfohlen, um den Übergang zu <a href="https://www.autohotkey.com/v2/">AutoHotkey v2</a> zu erleichtern, weil in dieser Version das Verhalten von <code>%this%()</code> und Methodenaufrufen geändert wird, um die Call-Methode direkt aufzurufen.</p>
<h3 id="User-Defined-Examples">Beispiele</h3>
<p>Wenn Sie mehrere Funktionsobjekttypen definieren, sollte der Standardcode auf eine Base-Klasse übertragen werden (aber sollten Sie jemals Ihren Code mit einem fremden Code kombinieren, müssen Sie eventuell mit Konflikten rechnen). Zum Beispiel:</p>
<pre id="class_FunctionObject">class FunktionObjekt {
    __Call(Methode, args*) {
        if (Methode = "")
            return this.Call(args*)
        if (IsObject(Methode))
            return this.Call(Methode, args*)
    }
}</pre>
<p>Das folgende Beispiel definiert ein Funktions-Array, das aufgerufen werden kann; wenn man das Array aufruft, wird es jedes seiner Elemente nacheinander aufrufen.</p>
<pre><em>; Dieses Beispiel benötigt die <a href="#class_FunctionObject">FunktionObjekt-Klasse</a> von oben, um zu funktionieren.</em>
class FunkArrayTyp extends FunktionObjekt {
    Call(obj, params*) {
        <em>; Ruft eine Liste von Funktionen auf.</em>
        Loop % this.Length()
            this[A_Index].Call(params*)
    }
}

<em>; Erstellt ein Array mit Funktionen.</em>
FunkArray := new FunkArrayTyp
<em>; Fügt einige Funktionen in das Array ein (kann jederzeit gemacht werden).</em>
FunkArray.Push(Func("Eins"))
FunkArray.Push(Func("Zwei"))
<em>; Erstellt ein Objekt, das das Array als Methode benutzt.</em>
obj := {Methode: FunkArray}
<em>; Ruft die Methode auf.</em>
obj.Methode("foo", "bar")

Eins(param1, param2) {
    ListVars
    MsgBox
}
Zwei(param1, param2) {
    ListVars
    MsgBox
}</pre>

<h2 id="BoundFunc">BoundFunc-Objekt <span class="ver">[v1.1.20+]</span></h2>
<p>Verhält sich wie eine Funktion, aber übergibt nur vordefinierte Parameter an eine andere Funktion.</p>
<p>Es gibt zwei Möglichkeiten, wie BoundFunc-Objekte erstellt werden können:</p>
<ul>
  <li>Durch Aufrufen der <a href="Func.htm#Bind">Func.Bind()</a>-Methode, die Parameterwerte an eine Funktion bindet.</li>
  <li>Durch Aufrufen der <a href="../commands/ObjBindMethod.htm">ObjBindMethod()</a>-Funktion, die Parameterwerte und Methodennamen an ein Zielobjekt bindet.</li>
</ul>
<p>Im unteren Beispiel wird gezeigt, wie BoundFunc-Objekte aufgerufen werden können. Anderen Methoden werden nicht unterstützt. Wenn das BoundFunc-Objekt aufgerufen wird, ruft es die Funktion oder Methode auf, an der es gebunden wurde, und übergibt alle gebundenen Parameter, gefolgt von denen, die vom Aufrufer übergeben wurden. Zum Beispiel:</p>
<pre>fn := Func("EchteFn").Bind(1)

%fn%(2)    <em>; Zeigt "1, 2"</em>
fn.Call(3) <em>; Zeigt "1, 3"</em>

EchteFn(a, b) {
    MsgBox %a%, %b%
}</pre>
<p>Mit <a href="../commands/ObjBindMethod.htm">ObjBindMethod()</a> kann eine Methode mit einem Objekt verbunden werden, wenn eine Referenz zu der Methode selbst nicht abgerufen werden kann. Zum Beispiel:</p>
<pre>File := FileOpen(A_ScriptFullPath, "r")
ZeileAbrufen := ObjBindMethod(File, "ReadLine")
MsgBox % %ZeileAbrufen%()  <em>; Zeigt die erste Zeile dieser Datei.</em></pre>
<p>Ein komplexeres Beispiel finden Sie bei <a href="../commands/SetTimer.htm#ExampleClass">SetTimer</a>.</p>

</body>
</html>
