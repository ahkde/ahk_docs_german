<!DOCTYPE HTML>
<html lang="de">
<head>
<title>Änderungen und neue Features | AutoHotkey</title>
<meta name="description" content="Änderungen und neue Features, eingeführt durch den aktuellen Entwicklungszweig von AutoHotkey (auch bekannt als AutoHotkey_L)." />
<meta name="ahk:equiv-v2" content="ChangeLog.htm" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="static/theme.css" rel="stylesheet" type="text/css" />
<script src="static/content.js" type="text/javascript"></script>
<script src="static/ga4.js" type="text/javascript"></script>
</head>

<body>
<h1>Änderungen und neue Features</h1>
<p>Änderungen und neue Features, eingeführt durch den aktuellen Entwicklungszweig von AutoHotkey (auch bekannt als AutoHotkey_L), sind nachfolgend aufgelistet.</p>
<p>Ältere Änderungen können in <a href="ChangeLogHelp.htm">Archivierte Änderungen</a> gefunden werden.</p>

<!--new revisions go here-->
<h2 id="v1.1.34.04">1.1.34.04 - 23. August 2022</h2>
<p>Behoben: Callback-Funktionen wurden nicht in den Aufrufstapel des Debuggers aufgenommen.</p>
<p>Behoben: MsgBox-Zeitlimit wurde als "OK" gemeldet, wenn es innerhalb von 100 ms nach dem Start angezeigt wurde.</p>
<p>Behoben: Edit-Steuerelement ignoriert nun <code>+WantTab</code>, während <code>+ReadOnly</code> aktiv ist.</p>
<p>Behoben: property_get gab eine lokale Variable zurück, obwohl <code>-d</code> dies verhindern sollte.</p>
<p>Behoben: RegRead unterstützt nun REG_MULTI_SZ-Werte, die leere Einträge enthalten.</p>
<p>Behoben: <code>x[,y]:=z</code> führte zu undefiniertem Verhalten.</p>

<h2 id="v1.1.34.03">1.1.34.03 - 5. Juni 2022</h2>
<p>Behoben: Doppeltes Backspacing bei Unicode-Ergänzungszeichen in Hotstrings.</p>
<p>Behoben: <code>a::</code> wurde nicht ausgelöst, wenn <code>a up::</code> und <code>a &amp; b::</code> vorhanden sind.</p>
<p>Behoben: MinSize/MaxSize wurden nicht korrekt vor dem ersten Aufruf von Gui Show angewendet.</p>
<p>Behoben: Der Hook-Thread bleibt nicht mehr in einer Endlosschleife stecken, wenn ein gestopptes InputHook zu früh neu gestartet wird.</p>
<p>Behoben: Keine Abstürze oder undefiniertes Verhalten mehr, wenn ein leerer Parameter an FileCopy, FileMove, FileCopyDir, FileMoveDir oder FileRemoveDir übergeben wird.</p>
<p>Behoben: Tote Tasten wurden fälschlicherweise nach der Unterdrückung des letzten Zeichens eines Hotstrings (z. B. bei <code>:?*:ò::ó</code>) vom Tastatur-Hook neu belegt.</p>

<h2 id="v1.1.34.02">1.1.34.02 - 13. Mai 2022</h2>
<p>Behoben: Bugs, welche via v1.1.34.00 entstanden sind:</p>
<ul>
  <li>Befehlszeilenparameter für eingebettetes Skript #1 behoben.</li>
  <li><code>Alt::</code>, <code>Ctrl::</code> und <code>Shift::</code> verhalten sich nicht mehr wie normale Tasten, sondern werden erst wie dokumentiert beim Loslassen ausgelöst.</li>
  <li><code>~a &amp; b::</code> (wenn mit #If deaktiviert) führt nicht mehr dazu, dass <code>a::</code> beim Loslassen ausgelöst wird, auch dann nicht, wenn eine andere Kombo aktiviert wird.</li>
</ul>

<h2 id="v1.1.34.01">1.1.34.01 - 7. Mai 2022</h2>
<p>Behoben: Bugs, welche via v1.1.34.00 entstanden sind:</p>
<ul>
  <li><code>a up::</code> wurde beim Drücken und nicht beim Loslassen ausgelöst, wenn er der erste Hotkey ist und <code>~a &amp; b::</code> vorhanden ist.</li>
  <li><code>a::</code> unterdrückte die Taste nicht, wenn <code>~a &amp; b::</code> ebenfalls vorhanden ist, es sei denn, <code>a::</code> ist der erste Hotkey.</li>
  <li><code>CapsLock::</code> funktionierte nicht, wenn <code>CapsLock &amp; x::</code> ebenfalls vorhanden ist, was auch für NumLock und ScrollLock gilt.</li>
</ul>

<h2 id="v1.1.34.00">1.1.34.00 - 5. Mai 2022</h2>
<p>Hinzugefügt: AutoHotkey.exe kann jetzt als Basis für kompilierte Skripte verwendet werden - dies ermöglicht kompilierten Skripten, externe Dateien auszuführen, wenn ihnen die Befehlszeilenoption <code>/script</code> übergeben wird.</p>
<p>Hinzufügt: Am Anfang eines Skripts kann jetzt implizit Code eingebunden werden - entweder durch Einbetten einer Ressource in AutoHotkey.exe oder durch Nutzung der Befehlszeilenoption /include.</p>
<p>Geändert: Menu NoMainWindow/MainWindow kann jetzt in unkompilierten Skripten verwendet werden.</p>
<p>Geändert: <code>~x &amp; y::</code> hat keinen Einfluss mehr auf die Unterdrückung von <em>x</em>, wenn es via #If deaktiviert ist.</p>
<p>Verbessert: Bei FileCopyDir kann das Quellverzeichnis jetzt auch eine ZIP-Datei sein, sofern dies vom Betriebssystem unterstützt wird; in diesem Fall wird der Inhalt extrahiert.</p>
<p>Behoben: Ausführung mehrerer Run-Once-Timer im selben Tick [fehlerhaft seit v1.1.33.11].</p>
<p>Behoben: Bugs beim Positionieren oder Ändern der Größe von Tooltips.</p>
<ul>
  <li>Der Versuch, einen Tooltip über der Taskleiste zu positionieren, führte dazu, dass er in Windows 10 und 11 stattdessen am oberen Rand des Bildschirms angezeigt wurde.</li>
  <li>Tooltips waren auch dann auf die Breite des primären Bildschirms beschränkt, wenn sie auf einem sekundären Bildschirm erscheinen sollten. Dies konnte dazu führen, dass sie nicht auf dem entsprechenden Bildschirm angezeigt wurden (falls sie zu breit waren).</li>
  <li>Die maximale Breite war aufgrund des OS-Verhaltens <code>A_ScreenDPI/96</code>-mal größer, als sie eigentlich sein sollte; dies wird nun berücksichtigt.</li>
</ul>
<p>Optimiert: ToolTip wurde für Situationen optimiert, wo sich der Text nicht ändert, um Flackern zu reduzieren und die Geschwindigkeit zu erhöhen.</p>
<p>Behoben: Taste-Oben-Hotkeys wurden nicht ausgeführt, wenn sie nach (aber nicht vor) dem Drücken der Taste eingeschaltet werden und wenn diese Taste zudem als benutzerdefinierte Präfixtaste mit dem Tilde-Präfix verwendet wird (z. B. interferierte die Aktivierung von <code>~a &amp; b::</code> mit <code>a up::</code>).</p>
<p>Behoben: Benutzerdefinierte Kombinations-Hotkeys, bei denen die Präfixtaste einen Hook-Reset auslöst, wie z. B. <code>~RButton &amp; WheelUp::</code>, wenn <code>RButton::</code> den einzigen Tastatur-Hook-Hotkey des Skripts aktiviert oder deaktiviert.</p>

<h2 id="v1.1.33.11">1.1.33.11 - 20. April 2022</h2>
<p>Behoben: <code>Format(n)</code> gibt nicht länger einen leeren Wert zurück, wenn <code>n</code> ein rein numerischer Ausdruck ist.</p>
<p>Behoben: Der Debugger konnte <code>obj.&lt;base&gt;.&lt;base&gt;</code> nicht abfragen.</p>
<p>Geändert: Debugger-Schritte/Haltepunkte überspringen nun Try/Catch/Finally/Case.</p>
<p>Behoben: <code>Switch {</code> löste fälschlicherweise einen Ladezeitfehler aus.</p>
<p>Behoben: Debugger stack_get meldete "falsche Zeile" nach OnError.</p>
<p>Behoben: Debugger stack_get meldete "falsche Zeile" beim Auto-Execute-Thread.</p>
<p>Behoben: Auto-Env-Abruf und A_ComVar erlauben nun auch Variablen, die größer als das offizielle Limit sind [PR #259 von mikeblas].</p>
<p>Behoben: A_EventInfo in Verbindung mit Mausrad-Hotkeys [fehlerhaft seit v1.1.33.05].</p>
<p>Behoben: ControlClick wandelt die Koordinaten für Mausradmeldungen nun korrekt um.</p>
<p>Behoben: Die IDispatch-Implementierung für AutoHotkey-Objekte behält die Groß-/Kleinschreibung für Eigenschaftsnamen nun bei.</p>
<p>Behoben: #Warn StdOut verwendet nun standardmäßig Zeichensatz 0, wenn /ErrorStdOut nicht verwendet wird.</p>
<p>Behoben: Es kommt nicht mehr zu Abstürzen, wenn die __delete()-Metafunktion eines Timers den nächsten Timer löscht.</p>

<h2 id="v1.1.33.10">1.1.33.10 - 29. August 2021</h2>
<p>Behoben: Laden von JPG/GIF-Dateien, die bereits zum Lesen geöffnet sind.</p>
<p>Behoben: if-var-is hatte digits/xdigits falsch identifiziert.</p>
<p>Hinzugefügt: Sicherheitsüberprüfung für "ControlGet Selected", falls es mit einem Nicht-Edit-Steuerelement verwendet wird.</p>
<p>Behoben: Variablen wurden in bestimmten seltenen Fällen auf NULL gesetzt, was zu Abstürzen führte. Dies trat auf (der einzige bestätigte Fall), wenn eine Zeichenkette länger als 63 Zeichen von einer Funktion zurückgegeben und einer Variable zugewiesen wurde, während AutoHotkey als Windows-Store-App ausgeführt wurde.</p>
<p>Behoben: InputHook-Callbacks schlugen fehl, nachdem die Eingabeerfassung gestoppt und neu gestartet wurde.</p>

<h2 id="v1.1.33.09">1.1.33.09 - 8. Mai 2021</h2>
<p>Behoben: Absturz beim Laden, wenn eine AltTab-Aktion in einem Tasten-Oben/Unten-Paar verwendet wird.</p>
<p>Behoben: Undefinierter Fehlertext, wenn die Hauptskriptdatei nicht geöffnet werden kann.</p>
<p>Entfernt: "Error at line 0" aus Fehlermeldungen entfernt, was vor dem Lesen der ersten Zeile erschienen ist.</p>
<p>Behoben: Der Fokus wurde beim Wiederherstellen einer minimierten GUI zurückgesetzt.</p>
<p>Behoben: Der Fokus wurde nicht gespeichert, wenn eine GUI mit Gui Show minimiert wurde.</p>

<h2 id="v1.1.33.08">1.1.33.08 - 23. April 2021</h2>
<p>Behoben: SendLevel-Ereignisse ungleich Null wurden fälschlicherweise in Fällen unterdrückt, die nicht von dem v1.1.33.07-Fix abgedeckt wurden:</p>
<ul>
  <li>Wenn es einen übereinstimmenden kontextabhängigen Hotkey mit einem höheren #InputLevel und keiner aktivierten globalen Variante gibt.</li>
  <li>Wenn es keinen übereinstimmenden Taste-Unten-Hotkey, aber einen Taste-Oben-Hotkey mit einem höheren #InputLevel gibt.</li>
</ul>

<h2 id="v1.1.33.07">1.1.33.07 - 21. April 2021</h2>
<p>Behoben: Das Tray-Symbol wird nicht mehr einfrieren und unscharf werden, wenn sich die DPI des Bildschirms ändert.</p>
<p>Behoben: Hotkeys, die via #InputLevel deaktiviert sind, werden nicht mehr fälschlicherweise unterdrückt.</p>

<h2 id="v1.1.33.06">1.1.33.06 - 14. März 2021</h2>
<p>Behoben: Ein mit v1.1.33.05 entstandener Bug führte dazu, dass bestimmte Hotkeys ignoriert wurden. Dazu gehören Joystick-Hotkeys und alle Hotkeys, auf die #MaxThreadsBuffer oder die B-Option angewendet wird.</p>

<h2 id="v1.1.33.05">1.1.33.05 - 10. März 2021</h2>
<p>Behoben: Bugs bei Hotkey-Varianten mit unterschiedlichen #InputLevels.</p>
<ul>
  <li>Hotkey-Varianten wurden trotz zu niedriger Sendestufe ausgeführt, da eine globale Variante einen niedrigeren #InputLevel hatte.</li>
  <li>Hotkey-Varianten wurden nicht ausgeführt, weil eine vorherige Variante aufgrund von #InputLevel nicht zulässig war.</li>
</ul>
<p>Behoben: Ctrl/Shift/Alt (ohne L/R) als Hook-Hotkeys.</p>

<h2 id="v1.1.33.04">1.1.33.04 - 2. März 2021</h2>
<p>Entfernt: Abhängigkeit von der POPCNT-Instruktion entfernt, da diese von alten CPUs (z. B. Core 2) nicht unterstützt wird.</p>

<h2 id="v1.1.33.03">1.1.33.03 - 1. März 2021</h2>
<p>Behoben: Das Programm stürzte ab, wenn ein leeres SafeArray enumeriert wurde.</p>
<p>Behoben: Die Höhe hat sich bei einem Button/CheckBox/Radio-Steuerelement mit -Wrap nicht automatisch erweitert.</p>
<p>Behoben: WM_DESTROY umging das Freigeben von Objekten in globalen/statischen Variablen.</p>
<p>Behoben: Der zweite Versuch von WinMenuSelectItem, eine Übereinstimmung zu finden, wird nun korrekt mit dem &amp;-Zeichen umgehen. Insbesondere werden Menüpunkte mit tatsächlichem Text wie "a &amp;&amp; b", die als "a &amp; b" erscheinen, nun mit "a &amp; b" statt mit "a&nbsp; b" übereinstimmen.</p>
<p>Behoben: Ein Haltepunkt auf einer Case/Default-Zeile führt dazu, dass am Ende des vorherigen Case angehalten wurde.</p>
<p>Behoben: SoundBeep ignoriert nun die Dauer, wenn sie negativ ist, anstatt wegen Überlauf auf einen großen positiven Wert zu wechseln.</p>
<p>Behoben: Maus-Hotkeys mit "!" maskieren nun Alt-Oben nach Tastenwiederholung, wenn möglich.</p>
<p>Behoben: Mehrere Probleme mit überlappenden Hotkeys.</p>
<ul>
  <li>Taste-Oben-Hotkeys wurden falsch ausgelöst, wenn es einen weiteren Hotkey gab, der überlappende, aber unterschiedliche Anforderungen hat, wie z. B. <code>&lt;^a up</code>, das mit STRG-RECHTS+A ausgelöst werden konnte, weil es noch <code>^a</code> gibt; oder <code>*^c up</code>, das mit UMSCHALT+C ausgelöst werden konnte, weil es noch <code>*+c</code> gibt, außerdem konnten beide mit STRG+UMSCHALT+C ausgelöst werden.</li>
  <li>Unvorhersehbare Priorisierung von Hotkeys mit denselben Modifikatoren, aber unterschiedlichen L/R-Varianten, oder unterschiedlichen Modifikatoren, wenn keiner der beiden eine perfekte Teilmenge des anderen ist. Die Priorität wurde bis zu einem gewissen Grad von der Reihenfolge der Definition beeinflusst, veränderte sich aber unvorhersehbar, wenn Hotkeys hinzugefügt oder entfernt wurden.</li>
</ul>

<h2 id="v1.1.33.02">1.1.33.02 - 17. Juli 2020</h2>
<p>Behoben: InputHook.EndKey wird nun jedes vk gegenüber sc000 bevorzugen.</p>
<p>Behoben: <code>InputHook.KeyOpt("{sc000}", Flags)</code>.</p>
<p>Behoben: #Warn Unreachable kennzeichnete Case/Default als unerreichbar.</p>

<h2 id="v1.1.33.01">1.1.33.01 - 13. Juli 2020</h2>
<p>Behoben: Modifikator-Taste-Oben-Hotkeys wie <code>LShift up::</code> unterdrücken das Taste-Oben nicht länger, es sei denn, ein entsprechender Taste-Unten-Hotkey ist definiert.</p>
<p>Behoben: Ein Symbol, das aus einer DLL/EXE geladen wurde, verwendet nicht länger die am ehesten passende Größe, wenn sie die erste in der Symbolgruppe ist [fehlerhaft seit v1.1.33.00].</p>
<p>Behoben: <code>a up::</code> hatte fälschlicherweise Vorrang vor <code>b &amp; a up::</code>, wenn <code>a::</code> definiert ist, aber nicht <code>b &amp; a::</code>.</p>
<p>Behoben: <code>b &amp; a up::</code> wird <code>a</code> nicht länger unterdrücken, wenn <code>a::</code> definiert, aber via #If deaktiviert ist und <code>b &amp; a::</code> nicht definiert ist.</p>

<h2 id="v1.1.33.00">1.1.33.00 - 30. Juni 2020</h2>
<p>Hinzugefügt: <em>Codierung</em>-Parameter für <a href="commands/_ErrorStdOut.htm">#ErrorStdOut</a>.</p>
<p>Hinzugefügt: Befehlszeilenparameter <a href="Scripts.htm#ErrorStdOut">/ErrorStdOut=<em>Codierung</em></a>.</p>
<p>Hinzugefügt: <a href="commands/_Warn.htm#Unreachable">#Warn Unreachable</a> (Warnungsmodus).</p>
<p>Hinzugefügt: <a href="commands/_Requires.htm">#Requires AutoHotkey v<em>Version</em></a> (Direktive).</p>
<p>Hinzugefügt: Erkennung von programmterminierenden SEH-Ausnahmen - es wird ein Fehlerdialogfenster angezeigt.</p>
<p>Implementiert: Zahlreiche Verbesserungen für Ahk2Exe, die von fincs, TAC109, Joe DF und Ben Allred entwickelt wurden.</p>
<p>Behoben: Send verursachte unerwünschte Hotkey-Pufferung.</p>
<p>Behoben: Ein Bug konnte dazu führen, dass Input sich undefiniert verhielt. [PR #159 von Helgef] </p>
<p>Behoben: WinKill kann nun mehr als WinClose.</p>
<p>Behoben: A_WinDir gibt nun immer das Windows-Verzeichnis des Systems zurück.</p>
<p>Behoben: FileGetShortcut/FileCreateShortcut erhöhen/verringern nicht länger negative Symbolindexnummern (Ressourcen-IDs).</p>
<p>Behoben: Die Locale-Option von InputBox bewirkt nicht länger, dass die Abbrechen-Schaltfläche fokussiert wird.</p>
<p>Behoben: Die Tastaturkurzbefehle einer Menüleiste funktionierten nicht, wenn die GUI keine Steuerelemente hatte.</p>
<p>Behoben: LoadPicture verwendet nun 256x256-Grafiken, wenn sie in einer DLL/EXE vorhanden sind.</p>
<p>Behoben: Der DBGp-stderr-Kopiermodus unterdrückt nicht länger Fehlerdialogfenster.</p>
<p>Behoben: ControlGet Line setzt ErrorLevel nun auf 1, wenn die Zeile gerade leer ist.</p>

<h2 id="v1.1.32.00">1.1.32.00 - 24. November 2019</h2>
<p>Geändert: Befehle und Funktionen mit einem FensterTitel-Parameter behandeln getarnte Fenster nun als versteckt.</p>
<p>Hinzugefügt: Die Suchrichtung von PixelSearch kann im Fast-Modus nun umgekehrt werden. [PR #156 von changyuheng]</p>
<p>Hinzugefügt: OnKeyUp-Callback für InputHook.</p>
<p>Behoben: GroupDeactivate wird in Windows 10 (und vermutlich auch in Windows 8) den Desktop ab sofort ignorieren.</p>
<p>Behoben: Switch hatte Zeichenketten immer als True behandelt.</p>
<p>Behoben: A_PriorKey war leer, nachdem Unicode-Zeichen gesendet wurden.</p>
<p>Behoben: WinActivate geht nicht mehr davon aus, dass NULL-Vordergrundfenster == Taskleiste.</p>
<p>Behoben: <code>Send {Del}</code> hat AltGr nach dem Loslassen nicht mehr wiederhergestellt.</p>
<p>Behoben: vk13 und sc045 als Neubelegungszieltasten.</p>
<p>Geändert: Unnötige Überprüfungen für Control und Sleep in einzeiligen Hotkeys entfernt.</p>
<p>Geändert: Veralteter Windows 9x/NT4-Support-Code entfernt und andere Wartungsarbeiten durchgeführt.</p>

<h2 id="v1.1.31.01">1.1.31.01 - 14. Oktober 2019</h2>
<p>Behoben: <code>Switch %v%</code>, <code>Case %v%</code> und <code>Throw %v%</code>.</p>
<p>Behoben: <code>Case 2,,:</code> zeigt nun eine Fehlermeldung an, statt einen Programmabsturz zu verursachen.</p>
<p>Behoben: AltTab-Hotkeys [fehlerhaft seit v1.1.31.00].</p>
<p>Behoben: Die X-Option von Hotstring erlaubt nun Leerraumzeichen nach <code>::</code>.</p>
<p>Behoben: Einzeilige Hotkeys verbieten nun mehrzeilige Anweisungen wie IF.</p>

<h2 id="v1.1.31.00">1.1.31.00 - 28. September 2019</h2>
<p>Hinzugefügt: <a href="commands/Switch.htm">Switch</a>.</p>
<p>Hinzugefügt: <a href="commands/InputHook.htm">InputHook</a>.</p>
<p>Hinzugefügt: <code>Locale</code>-Option für InputBox, um die Namen der Schaltflächen in der Sprache des aktuellen Benutzers darzustellen. [PR #143 von Ragnar-F]</p>
<p>Geändert: Unterstützung für <a href="misc/LongPaths.htm">lange Pfade</a> verbessert.</p>
<p>Allgemeine Hotkey-Verbesserungen:</p>
<ul>
  <li>Unterstützung für überlappende Hotkeys verbessert, wie z. B. <code>&lt;^a</code> und <code>^a</code> mit <code>#If</code>. Wenn alle Varianten eines Hotkeys via #If deaktiviert sind, kann ein allgemeinerer Hotkey ausgelöst werden. Mit anderen Worten verhält sich die Deaktivierung von Hotkeys via #If nun eher wie, als würde man diese ausschalten oder aus dem Skript entfernen.</li>
  <li>Erkennung von falschen Modifikatortastenzuständen via Hook verbessert.</li>
  <li>Die Platzhalter-Hotkey-Selektion ignoriert nun via Send durchgeführte Modifikatoränderungen.</li>
</ul>
<p>AltGr-Fehlerbehebungen:</p>
<ul>
  <li>Hotkeys wurden fälschlicherweise nach <code>Send <i>xy</i></code>, wenn <i>x</i> AltGr benötigt, ausgelöst.</li>
  <li>Ein LCtrl wurde unnötigerweise nach <code>Send <i>x</i></code>, wenn <i>x</i> AltGr benötigt, gesendet.</li>
  <li>AltGr-Erkennung in Unicode-32-Bit-Versionen bei einem 64-Bit-Betriebssystem behoben.</li>
  <li>Das Senden von AltGr-Kombinationen, während RCtrl unten ist, behoben.</li>
</ul>
<p>Umschalt-Ziffernblock-Fehlerbehebungen:</p>
<ul>
  <li>Interaktion zwischen Send und Umschalt-Ziffernblock behoben, was dazu führte, dass Umschalt hängen blieb. Dies behebt sporadisch auftretende Probleme mit Hotkeys wie <code>Numpad1::Send +1</code>.</li>
  <li>Erkennung von gefälschten Umschalt-Ereignissen, die vom systeminternen Ziffernblock-Handling erzeugt werden, optimiert.</li>
  <li>Ein gefälschtes RShift wurde als physisch angesehen, was inkonsistent mit LShift ist.</li>
</ul>
<p>Behoben: Die Slider-Option <code>+TickInterval</code> funktioniert nun auch, wenn <code>Range</code> nicht gesetzt ist.</p>
<p>Behoben: Die Slider-Option <code>+TickInterval0</code> setzt das Intervall nun auf 0 zum Deaktivieren der Teilstriche.</p>
<p>Behoben: Menü- und GUI-Ereignisse haben in einigen Fällen Schleifen verursacht, die die CPU voll ausgelastet haben. Insbesondere wenn eine modale Meldungsschleife läuft und das Skript unterbrechungsfrei ist, wurden Menü- und GUI-Ereignismeldungen wiederholt neu gesendet. Diese werden nun verworfen, da sie nicht behandelt oder in der Warteschlange gehalten werden können. Dies ist konsistent mit Hotkeys, etc.</p>
<p>Behoben: Kritische DllCall-Fehler werden nun immer beendet und das OnExit-Ergebnis ignoriert.</p>
<p>Behoben: <code>ExitApp 2</code> hat Objektfreigaben in globalen/statischen Variablen umgangen.</p>
<p>Geändert: ComObjCreate verwendet nun CLSIDFromProgID für GUID-fremde Zeichenketten. Dies behebt <code>ComObjCreate("Microsoft.Windows.ActCtx")</code> und möglicherweise auch andere, die nicht in der Registry zu finden sind, aber mit VBScript und JScript funktionieren.</p>

<h2 id="v1.1.30.03">1.1.30.03 - 4. April 2019</h2>
<p>Behoben: Debugger context_get kann #Warn UseUnset nicht mehr auslösen.</p>
<p>Behoben: Direkte Modifikator-Hotkeys wie Shift:: funktionieren wieder (fehlerhaft seit v1.1.30.02).</p>

<h2 id="v1.1.30.02">1.1.30.02 - 1. April 2019</h2>
<p>Behoben: Menu Rename erlaubt nun Duplikate und nicht-operative bzw. Groß-/Kleinschreibung-bezogene Umbenennungen.</p>
<p>Behoben: X-Option von Hotstring(). [PR #132 von Helgef]</p>
<p>Behoben: __init/__delete verursachte irreführende Fehlerzeile/Stacktrace.</p>
<p>Behoben: #If-Ausdrücke blieben im Sleep-Modus stecken und Ähnliches.</p>
<p>Behoben: Benutzerdefinierte Tastenkombos wurden falsch ausgelöst, nachdem eine benutzerdefinierte Tastenkombo sich selbst suspendiert hatte.</p>

<h2 id="v1.1.30.01">1.1.30.01 - 11. November 2018</h2>
<p>Geändert: TV_Add/TV_Modify erlauben nun Angaben wie "Bold1" und "Bold0".</p>
<p>Behoben: Hotkey-Paare mit einem #InputLevel ungleich 0 blockierten gesendete Ereignisse.</p>
<p>Behoben: <code>Control Choose</code> sendet nun auch WM_COMMAND, wenn die ID des Steuerelements 0 ist.</p>
<p>Behoben: Heap Corruption in Skripten mit Tastatur-Hook aber ohne Hotkeys.</p>
<p>Behoben: Escapesequenzen in einzeiligen Hotstrings mit der X-Option.</p>
<p>Behoben: <code>``</code>-Escapesequenz, die vor einer <code>;</code>-Kommentarmarkierung steht.</p>
<p>Behoben: <code>finally</code> korrumpierte den Wert von einem ausstehenden <code>return</code>.</p>
<p>Behoben: MsgBox erkennt Timeouts auch dann, wenn der Thread unterbrochen ist.</p>
<p>Behoben: Ahk2Exe unterstützt nun mehr interne Variablen in #Include.</p>

<h2 id="v1.1.30.00">1.1.30.00 - 22. August 2018</h2>
<p>Behoben: SendInput/SendPlay stellt DownR/neubelegte Modifikatoren wieder her.</p>
<p>Geändert: Die Anzahl der Hotkeys pro Skript wurde von 1000 auf 32762 erhöht.</p>
<p>Geändert: Befehle, die On/Off/Toggle akzeptieren, akzeptieren auch 1/0/-1 (wo dokumentiert).</p>
<p>Verbesserungen bei der Debugger-Unterstützung (DBGp):</p>
<ul>
  <li>Unterstützung für die Option -d (Stack Depth) hinzugefügt.</li>
  <li>Die Pseudo-Eigenschaft .&lt;base&gt; (nur für DBGp) hinzugefügt, um Mehrdeutigkeiten zu beseitigen.</li>
  <li>Debugger behoben, um nicht-unterstützte Wiedereintritte während des Break-Zustands zu vermeiden.</li>
  <li>DBGp-Befehls-Parser behoben, um in Anführungszeichen gesetzte Parameter zu unterstützen.</li>
</ul>

<h2 id="v1.1.29.01">1.1.29.01 - 2. Juni 2018</h2>
<p>Behoben: WinMove verursacht in einigen Fällen einen Programmabsturz [fehlerhaft seit <span class="ver">v1.1.29.00</span>].</p>
<p>Behoben: <code>Gui x:Default</code> funktionierte nicht, wenn keine Gui erstellt wurde [fehlerhaft seit <span class="ver">v1.1.29.00</span>].</p>

<h2 id="v1.1.29.00">1.1.29.00 - 25. Mai 2018</h2>
<p>Hinzugefügt: <code>Objekt.Count()</code> und <code>ObjCount(Objekt)</code>.</p>
<p>Hinzugefügt: <code>ObjGetBase(Objekt)</code> und <code>ObjSetBase(Objekt, Basis)</code>.</p>
<p>Hinzugefügt: <code>ObjRawGet(Objekt, Schlüssel)</code>.</p>
<p>Hinzugefügt: <code>OnError(Func [, HinzufügenEntfernen])</code>.</p>
<p>Ausnahmebehandlung überarbeitet:</p>
<ul>
  <li>Wenn eine Ausnahme unbehandelt ist, wird eine Fehlermeldung angezeigt und/oder OnError aufgerufen, <em>bevor</em> der Stapel abgearbeitet ist (um Ausnahmen konsistent mit Laufzeitfehlern zu machen).</li>
  <li>__Delete wurde behoben, das Befehle dazu veranlasste, auch bei Nichtbenutzung von Try eine Ausnahme auszulösen.</li>
  <li>Es wurde der Fehler behoben, dass COM-Clients interne Skriptfehler nicht abfangen konnten.</li>
</ul>
<p>Entfernt: Die maximale Anzahl benutzerdefinierter Modifikatoren für jede Taste.</p>
<p>Geändert: <code>Send {Text}</code> wird nicht mehr die Feststelltaste umschalten oder auf Win+L warten.</p>
<p>Behoben: #Warn ClassOverwrite gibt keine Warnung mehr für A_Args aus.</p>
<p>Verbessert: Der DBGp-Befehl <code>source</code> wandelt nun korrekt zwischen dem Zeichensatz der Datei und UTF-8 um, und reduziert die Codegröße.</p>
<p>Sonstige Optimierungen der Codegröße und triviale Anpassung des Codes.</p>

<h2 id="v1.1.28.02">1.1.28.02 - 7. April 2018</h2>
<p>Behoben: <code>Control ChooseString</code> und <code>ControlGet FindString</code> ignorierten die ersten zwei Listeneinträge.</p>
<p>Behoben: <code>Control ChooseString</code> senden nun auch WM_COMMAND, wenn das Steuerelement eine ID von 0 hat.</p>
<p>Behoben: WinActivate stellt nun das aktive Fenster wieder her, wie ursprünglich für <span class="ver">[v1.1.20.00]</span> vorgesehen.</p>

<h2 id="v1.1.28.01">1.1.28.01 - 31. März 2018</h2>
<p>Behoben: Thread behandelte weggelassene Parameter als 0.</p>
<p>Behoben: Text via FileAppend zur Standardfehlerausgabe (stderr; **) senden.</p>
<p>Behoben: <code>break Label</code> war in der Lage, zu einer fremden Schleife zu springen.</p>
<p>Das Hotstring-Reset-Verhalten wurde auf den Zustand vor v1.1.28.00 zurückgesetzt.</p>
<p>Hinzugefügt: <code>Hotstring("Reset")</code> zum manuellen Zurücksetzen des Hotstring-Erkenners.</p>

<h2 id="v1.1.28.00">1.1.28.00 - 11. Februar 2018</h2>
<p><strong>Änderungen:</strong></p>
<ul>
<li>Geändert: __Delete wird bei Aufruf ab sofort Ausnahmen abfangen und melden, während ein Objekt-Cleanup durchgeführt wird. Zuvor hatte es den (fehlerhaften) Effekt, die Ausnahme solange "hinauszuzögern", bis die nächste Funktion aufgerufen wird oder das Ende des Try-Blocks/Threads erreicht ist.</li>
<li>Geändert: Der Hotstring-Erkenner wird nun zurückgesetzt, wenn sich der Fokus ändert, und nicht nur, wenn sich das aktive Fenster ändert.</li>
<li>Geändert: WinMenuSelectItem behandelt <code>0&amp;</code> nun als Systemmenü des Fensters.</li>
</ul>

<p><strong>Neue Features:</strong></p>
<ul>
<li>Hinzugefügt: Alle internen Variablen können nun im Pfad enthalten sein, den man an #Include übergeben kann.</li>
<li>Hinzugefügt: <a href="Variables.htm#TimeIdleKeyboard">A_TimeIdleKeyboard</a> und <a href="Variables.htm#TimeIdleMouse">A_TimeIdleMouse</a>.</li>
<li>Hinzugefügt: <a href="Variables.htm#ListLines">A_ListLines</a>.</li>
<li>Hinzugefügt: <a href="Variables.htm#ComSpec">A_ComSpec</a> (als Alternative für ComSpec).</li>
<li>Hinzugefügt: <a href="commands/LoopFile.htm#LoopFileFullPath">A_LoopFilePath</a> (als Alternative für A_LoopFileFullPath, das eine Fehlbenennung ist).</li>
<li>Hinzugefügt: <a href="Hotstrings.htm#X">X-Option</a> für Hotstrings, um eine Aktion in der gleichen Zeile auszuführen, anstatt den Hotstring automatisch zu ersetzen.</li>
<li>Hinzugefügt: <a href="commands/Hotstring.htm">Hotstring()</a>.</li>
<li>Hinzugefügt: <a href="Hotstrings.htm#Function">Funktions-Hotstrings</a>.</li>
<li>Hinzugefügt: MaxParts-Parameter für <a href="commands/StrSplit.htm">StrSplit</a>.</li>
<li>Verbessert: <a href="commands/_MenuMaskKey.htm">#MenuMaskKey</a> erlaubt die Angabe von VK und SC, oder vk00sc000.</li>
</ul>

<p><strong>Fehlerbehebungen:</strong></p>
<ul>
<li>Behoben: #MenuMaskKey behandelte einige gültige Tasten (z. B. Del) als ungültig.</li>
<li>Optimiert: Die Erkennung von AltGr in Unicode-Versionen. Diese Optimierung verhindert, dass eine Verzögerung auftritt, wenn das Skript gestartet wird (seit v1.1.27.00) oder wenn Send das erste Mal für jedes Ziel-Tastaturlayout (vor v1.1.27.00) aufgerufen wird.</li>
<li>Behoben: Irreführende naheliegende Zeilen bei einem <code>x up::y</code>-Neubelegungsfehler.</li>
<li>Behoben: <code>Menu Tray, Icon, HICON:%hicon%</code> nutzt nun das <em>hicon</em>, ohne es größer/kleiner zu machen.</li>
</ul>

<h2 id="v1.1.27.07">1.1.27.07 - 21. Januar 2018</h2>
<p>Behoben: Die Standardgröße von Gui in Verbindung mit +Parent ist nicht mehr durch das übergeordnete Fenster eingeschränkt [fehlerhaft seit v1.1.27.05].</p>
<p>Behoben: Steuerelemente wurden nicht neu gezeichnet, wenn ein separates Tab-Steuerelement sichtbar/unsichtbar gemacht wurde, nachdem das Tab-Steuerelement für ungültig erklärt worden ist (z. B. wenn man mehrere Steuerelemente gleichzeitig sichtbar/unsichtbar macht).</p>

<h2 id="v1.1.27.06">1.1.27.06 - 16. Januar 2018</h2>
<p>Behoben: Hotstrings/Input bewirkten, dass tote Tasten hängen blieben (fehlerhaft seit v1.1.27.05).</p>

<h2 id="v1.1.27.05">1.1.27.05 - 16. Januar 2018</h2>
<p>Behoben: Sichtbare Input-Endungstasten bewirkten, dass eine bevorstehende tote Taste zweimal losgelassen wurde.</p>
<p>Behoben: Die Auswirkung von Hotstrings/Input darüber, wie Tab/Esc in einer toten Tastenfolge agieren sollen.</p>
<p>Behoben: A_IconFile gab einen falschen Pfad zurück, wenn eine DLL genutzt wurde.</p>
<p>Behoben: Gui in Verbindung mit +Parent wird nun innerhalb der übergeordneten GUI in Bezug auf dem Bildschirm korrekt zentriert.</p>
<p>Behoben: Input/Hotstring-Erkennung von toten Tastenfolgen in UWP-Anwendungen (Universal Windows Platform).</p>
<p>Behoben: <code>&lt; &amp; v</code> und <code>&gt; &amp; v</code> wurden als Duplikate angesehen, und andere ähnliche Fälle. Dies betrifft benutzerdefinierte Kombinationen, wo die Präfixtaste auch ein Modifikatorsymbol ist. Zudem werden Hotkeys, die nur aus Modifikatorsymbolen und einem Leerzeichen am Ende bestehen, wie z. B. <code>+ ::</code>, ab sofort als Fehler behandelt, anstatt das Leerzeichen zu ignorieren (Hotkeys erlauben kein Leerzeichen am Ende).</p>

<h2 id="v1.1.27.04">1.1.27.04 - 10. Januar 2018</h2>
<p>Behoben: #Warn ClassOverwrite gab fehlerhafte Warnungen aus.</p>

<h2 id="v1.1.27.03">1.1.27.03 - 6. Januar 2018</h2>
<p>Verbessert: <code>Menu x, NoStandard</code> und <code>Menu x, DeleteAll</code> funktionieren nun, ohne dass der Versuch unternommen wird, das darunterliegende Win32-Menü zu zerstören. Dies macht sie funktionsfähig, sobald x eine Menüleiste oder ein Untermenü einer Menüleiste ist.</p>
<p>Der Umgang mit <code>vkXXscYYY</code> wurde überarbeitet:</p>
<ul>
  <li>GetKeyVK und GetKeyName behandeln vkXXscYYY nun als vk00scYYY.</li>
  <li>Send ist nun strenger mit {vk...} und ungültigen Suffixen, um konsistent mit den ähnlichen Änderungen von <span class="ver">[v1.1.27.00]</span> zu sein (aber sc wird weiterhin unterstützt).</li>
  <li>Codegröße reduziert.</li>
</ul>
<p>Behoben: Numerische Schlüssel außerhalb des 32-Bit-Bereichs (aber innerhalb des 64-Bit-Bereichs) bei einigen selten auftretenden Fällen in 64-Bit-Versionen werden nun korrekt behandelt. Dies betrifft nur Klassen, die solche Nummern als Namen verwenden (aus mehreren Gründen nicht empfohlen), und einem Array-Zugriff via IDispatch mit solchen Nummern als Schlüssel-/Elementnamen.</p>

<h2 id="v1.1.27.02">1.1.27.02 - 1. Januar 2018</h2>
<p>Behoben: Das Laden von .bmp-Dateien als Symbole in Originalgröße.</p>
<p>Behoben: Verbundzuweisungen wie <code>Test.Eigenschaft[1] += 1</code> (fehlerhaft seit v1.1.27.01).</p>

<h2 id="v1.1.27.01">1.1.27.01 - 31. Dezember 2017</h2>
<p>Behoben: <code>++X</code> oder <code>--X</code> verursachten in Skripten ohne #NoEnv einen Programmabsturz (fehlerhaft seit v1.1.27.00).</p>
<p>Behoben: #Warn ClassOverwrite gab fälschlicherweise eine Warnung für <code>++MeineKlasse.X</code> aus.</p>
<p>Behoben: Neubelegung erlaubt nun benutzerdefinierte Tastenkombinationen wie <code>a &amp; b::c</code>.</p>
<p>Behoben: Send/Hotstrings/Input passen sich nun an das Tastaturlayout des fokussierten Steuerelements an und nicht nur an das aktive Fenster. Dies betrifft insbesondere UWP-Anwendungen wie Microsoft Edge.</p>
<p>Behoben: Hook-Hotkeys unterdrücken nun die Aktivierung des Startmenüs, die auftritt, wenn ein isoliertes "Ctrl/Shift Up" erfolgt. "Ctrl Up" kann erzeugt werden, wenn eine Umschaltung von einem Tastaturlayout mit AltGr zu einem Tastaturlayout ohne AltGr erfolgt (z. B. von UK zu US) und Ctrl währenddessen nicht gedrückt gehalten wird. Dies behebt Hotkeys wie z. B. <code>$#z::WinActivate x</code>, wenn die entsprechende Änderung solche Bedingungen verursacht.</p>
<p>Behoben: Input sammelte keine Zeichen, wenn beide UMSCHALT-Tasten unten sind.</p>
<p>Behoben: Input nutzt nun "sc" und "vk" statt "Sc" und "Vk" für Endungstasten in ErrorLevel (verursacht durch v1.1.20).</p>
<p>Behoben: <code>GetKeyName/VK/SC("vkXXscYYY")</code>, wobei YYY mit A-F beginnt (fehlerhaft seit v1.1.26).</p>

<h2 id="v1.1.27.00">1.1.27.00 - 25. Dezember 2017</h2>
<p><strong>Änderungen:</strong></p>
<p>AU3_Spy.exe wurde durch WindowSpy.ahk ersetzt.</p>
<ul>
  <li>AU3_Spy.exe wird immer noch gestartet, wenn WindowSpy.ahk nicht gefunden wird.</li>
  <li>Es folgt nun standardmäßig dem fokussierten Steuerelement und verfügt über eine Checkbox, um Fenster und Steuerelement zu veranlassen, der Maus zu folgen.</li>
  <li>Es nimmt nicht länger einen globalen Hotkey (WIN+A) in Anspruch. Halten Sie stattdessen STRG oder UMSCHALT gedrückt, um Aktualisierungen zu pausieren (lassen Sie sie nach dem Fokussieren von Window Spy wieder los).</li>
  <li>Es ist nun in Windows 10 möglich, mit ALT+TAB zu Window Spy zu wechseln, ohne dass sich die Inhalte der GUI ändern.</li>
</ul>
<p>Geändert: <a href="commands/Send.htm#AZ">a-z bedeutet nun vk41-vk5A</a>, wenn sie im Tastaturlayout fehlen, außer im Raw-Modus oder beim Senden einzelner unveränderter Zeichen. Dadurch können Hotkeys und gesendete Tastaturkurzbefehle intuitiver mit bestimmten nicht-englischen Tastaturlayouts umgehen.</p>
<p>Geändert: Send nutzt in den ANSI-Versionen nun <a href="http://msdn.microsoft.com/de-de/library/ms646310">SendInput()</a> anstelle von Alt+nnnnn, um <a href="commands/Send.htm#characters">spezielle Zeichen</a> zu senden.</p>
<p>Geändert: Es gelten nun andere Regeln zum <a href="commands/_MenuMaskKey.htm">Maskieren von ALT/WIN</a> nach dem Drücken eines Hook-Hotkeys:</p>
<ul>
  <li>Explizit gesendetes "Alt/Win Up" kann maskiert werden. Dies behebt Neubelegungen wie z. B. <code>AppsKey::RWin</code>, allerdings ist es möglich, dass Hotkeys, die zum Aktivieren des Startmenüs gedacht sind, neue Workarounds erfordern könnten.</li>
  <li>Wenn ALT/WIN logisch, aber nicht physisch unten ist, verursachen nur Hotkeys, die ALT/WIN erfordern (z. B. <code>#a::</code>, nicht <code>*a::</code>), eine Maskierung. Auf diese Weise kann eine Neubelegung oder ein Platzhalter-Hotkey das Tasten-Oben-Ereignis senden, ohne dass es maskiert werden muss.</li>
  <li>Nicht unterdrückte Hotkeys wie z. B. <code>~#a::</code> verursachen keine Maskierung mehr, da das nicht unterdrückte Taste-Unten-/Tasten-Oben-Ereignis ausreicht, um ein Menü zu verhindern. Maus-Hotkeys wie <code>~*MButton::</code> unterdrücken das Startmenü nicht mehr, wenn sie mit der WIN-Taste kombiniert werden. Es kann manuell mit <code>Send {Blind}{vk07}</code> oder ähnlichem unterdrückt werden.</li>
  <li>Der Tastatur-Hook verfolgt nun Ereignisse in Bezug auf ALT/WIN, so dass die Maskierungstaste nicht mehr gesendet werden muss, wenn ALT/WIN bereits durch ein anderes Ereignis (physisch oder gesendet) maskiert wurde.</li>
</ul>
<p class="warning">Die Hotkeys <code>~LWin::</code> und <code>~RWin::</code> unterdrücken das Startmenü nicht mehr. Weitere Informationen und ein Workaround finden Sie unter <a href="commands/_MenuMaskKey.htm">#MenuMaskKey</a>.</p>
<p>Hinzugefügt: VK- oder SC-Tastennamen werden nun korrekt validiert, damit Namen wie "sc01ungültig" nicht mehr als Tasten erkannt werden.</p>
<p class="warning">Skripte, die Hotkeys im Format <code>VKnnSCnnn::</code> enthalten, müssen korrigiert werden, indem man <code>SCnnn</code> entfernt, das zuvor ignoriert wurde.</p>
<p>Hilfedatei: Die Seitenleiste des HTML Help Viewer wurde durch die neue HTML5-Seitenleiste ersetzt, die von Ragnar-F entwickelt wurde.</p>

<p><strong>Neue Features:</strong></p>
<ul>
<li>Interne Funktionen <a href="commands/Math.htm#Min">Min</a>/<a href="commands/Math.htm#Max">Max</a> hinzugefügt. [PR #84 von Ragnar-F]</li>
<li><a href="Variables.htm#Args">A_Args</a> als Alternative zu den nummerierten Variablen hinzugefügt.</li>
<li><a href="Functions.htm#ForceLocal">Force-Local-Modus</a> für Funktionen hinzugefügt.</li>
<li><a href="commands/_Warn.htm#ClassOverwrite">#Warn ClassOverwrite</a> hinzugefügt.</li>
<li><a href="commands/Send.htm#SendText">{Text}-Modus</a> für Send und <a href="Hotstrings.htm#T">T-Option</a> für Hotstrings hinzugefügt. Dieser Modus ist so ähnlich wie der Raw-Modus, nur zuverlässiger.</li>
<li><a href="commands/Send.htm#DownR">{<em>Taste</em> <strong>DownR</strong>}</a> hinzugefügt, das nun von der Neubelegung genutzt wird, um Probleme mit <code>AppsKey::RWin</code> und ähnlichem zu beheben.</li>
</ul>

<p><strong>Fehlerbehebungen:</strong></p>
<ul>
<li>Beim Laden von Symbolen wird nicht mehr standardmäßig ID 0 verwendet, wenn die Indexnummer ungültig ist.</li>
<li>VK-zu-SC- und SC-zu-VK-Umbelegung von PrintScreen behoben. SC-zu-VK war bereits unter Vista und höher korrekt.</li>
<li>Hotkey-Steuerelement behoben, das in einigen Fällen nicht den Namen, sondern scXXX zurückgab.</li>
<li>ListVars-Absturz behoben, wenn ein ByRef-Parameter auf eine Variable verweist, die ein Objekt enthält. [PR #86 von HotKeyIt]</li>
<li>Einige (sehr unwahrscheinliche) Speicherlecks behoben.</li>
<li>Menü-Handles werden nun freigegeben, wenn nur die voreingestellten Menüpunkte genutzt werden.</li>
<li>Der Standard-Menüpunkt wird nun in fetter Schrift dargestellt, wenn er ein Untermenü und einen Win32-Menü-Handle hat.</li>
<li>Send verwendet nun den korrekten Modifikatorstatus bei Unicode-Zeichen.</li>
<li><code>ControlSend {u n}</code> behoben, wenn u Unicode ist, das n-mal gesendet werden soll, nicht nur 1-mal.</li>
<li>Inkonsistentes ALTGR-Verhalten zwischen verschiedenen Betriebssystemversionen behoben. Insbesondere <code>RAlt::</code>, das wiedereinmal das System unter Windows 10 dazu veranlasste, die linke STRG-Taste "loszulassen", wie es vor v1.1.26.01 der Fall war (aber im Gegensatz zu den alten Versionen verhindert es, dass das Taste-Oben-Ereignis der rechten ALT-Taste das aktive Fenster erreicht). Diese Änderung sollte sich nicht auf Layouts ohne ALTGR auswirken.</li>
<li><code>Menu Tray, Icon</code>, SB_SetIcon und LoadPicture mit einer Symbol-Option ungleich 0 erlauben nun Bitmaps (aber wandeln diese um, falls nötig).</li>
<li>Menüpunkte verschwinden nicht mehr, wenn ein Cursor als Menüpunktsymbol gesetzt ist.</li>
<li>Das Starten von Window Spy und der Hilfedatei verbessert:
<ul>
  <li>Wenn AutoHotkey installiert ist, aber die aktuelle EXE-Datei sich in einem anderen Verzeichnis befindet (also portabel genutzt wird), wird die installierte Datei nicht mehr bevorzugt, da es sich um die falsche Version handeln kann. Es kann immer noch als Fallback verwendet werden.</li>
  <li>Wenn die Datei nicht gestartet werden kann, wird die Fehlermeldung im Dialogfenster angezeigt, nicht in der Titelleiste.</li>
</ul></li>
<li>Einzeilige Hotkeys mit Ausdrücken behoben, die mit <code>sc</code> oder <code>vk</code> beginnen.</li>
<li>Die Hotkey-Modifikatoren <code>&gt;</code>/<code>&lt;</code> ermöglichen es nicht mehr, dass beide Tasten gedrückt werden können. Zum Beispiel konnte <code>&lt;^A</code> fehlerhaft durch LCtrl+RCtrl+A ausgelöst werden, wodurch der Hotkey <code>&lt;&gt;^A</code> nicht funktionieren konnte.</li>
<li>Automatisch-ersetzende Hotstrings behoben, die in einigen Fällen den direkt geschriebenen Text "{Raw}" eingefügt haben (insbesondere, wenn der Ersatztext <code>{Raw}</code> enthält und die Optionen O, R und * nicht verwendet wurden).</li>
<li>Hotkeys verwenden nun den Hook, auch wenn sie von einem Platzhalter-Hotkey überdeckt werden, abhängig von der Reihenfolge der Definition.</li>
<li>Taste-Unten-Hotkeys werden nun auf "reg" zurückgesetzt, wenn sie wegen eines entsprechenden Taste-Oben-Hotkeys, der inzwischen deaktiviert wurde, nur "k-hook" sind. (Vor v1.1.07.03 war das bereits der Fall, aber der Taste-Unten-Hotkey wurde nie auf "k-hook" gesetzt, wenn er nach dem Taste-Oben-Hotkey definiert wurde.)</li>
<li>Hook-Hotkeys ignorieren nun Modifikatoränderungen, die mit <code>Send !^+#{Taste}</code> oder beim Senden von Unicode-Zeichen vorgenommen wurden. Dies stellt Send wieder her, wie es vor v1.1.06 bei SendLevel 0 war, behält aber das v1.1.06+ Verhalten bei SendLevel &gt;= 1 bei, so dass Send die richtigen Hotkeys auslösen kann.</li>
<li>Die Chancen wurden erhöht, dass Send von einem "reg"-Hotkey wie <code>^m::Send x</code> den Status des Modifikators wiederherstellt, wenn Send zum ersten Mal aufgerufen wird. Dadurch ist es unwahrscheinlicher, dass beim erstmaligen Drücken ein anderes (und unerwartetes) Ergebnis erzeugt wird, wie z. B. xmmm statt xxxx.</li>
</ul>

<h2 id="v1.1.26.01">1.1.26.01 - 16. Juli 2017</h2>
<p>Behoben: RegDelete (ohne Parameter) schlug fehl, wenn A_LoopRegSubKey leer ist, z. B. beim Enumerieren von Schlüsseln direkt unter dem Root-Schlüssel.</p>
<p>Behoben: <code>RAlt/LAlt::</code> konnte manchmal die Aktivierung des Menüs nicht verhindern, nachdem der Benutzer mit Alt-Tab das Fenster verließ und es reaktivierte.</p>
<p>Behoben: Die SC-zu-VK-Konvertierung für Multimediatasten, PrintScreen, Pause, LWin und RWin funktioniert nun korrekt, mit der Ausnahme, dass Multimediatasten, PrintScreen und CtrlBreak unter Windows 2000 und XP immer noch fehlerhaft konvertiert werden.</p>
<p>Behoben: Die VK-zu-SC-Konvertierung für Multimediatasten, CtrlBreak und Pause funktioniert nun korrekt.</p>
<p>Behoben: Wartende Befehle wie RunWait protokollieren nur noch Zeilen für ListLines, wenn gezeigt werden muss, dass sie noch immer warten; also wenn sie nach einer Unterbrechung fortgesetzt werden, die andere Zeilen protokolliert hat.</p>

<h2 id="v1.1.26.00">1.1.26.00 - 10. Juni 2017</h2>
<p>Geändert: ListVars zeigt Variablen, die Objekte enthalten, ab sofort in einem anderen Format an. Der Klassenname des Objekts wird nicht angezeigt.</p>
<p>Hinzugefügt: "Class" und "CLSID" Modi für ComObjType().</p>
<p>Geändert: Die vom Debugger angezeigten Klassennamen überarbeitet und deutlich die Codegröße im Prozess reduziert.</p>
<p>Geändert: FileSetAttrib, FileSetTime und FileDelete überarbeitet, um die Codegröße zu reduzieren. Deren Funktionsweise sollte sich nicht geändert haben.</p>
<p>Andere kleinere Optimierungen an der Codegröße gemacht.</p>
<p>Behoben: GetKeySC() funktioniert nun korrekt mit den Tastennamen Esc, Escape, ScrollLock und PrintScreen.</p>
<p>Behoben: Die Hotstring-Worterkennung funktioniert nun korrekt mit Wörtern, die Nonspacing Marks enthalten, wie z. B. arabische diakritische Zeichen.</p>

<h2 id="v1.1.25.02">1.1.25.02 - 13. Mai 2017</h2>
<p>Behoben: GUI-Optionszeichenketten waren nach einer Fehlermeldung permanent gekürzt.</p>
<p>Behoben: Namen von Eigenschaften und Klassenuntervariablen können nun ASCII-fremde Zeichen enthalten.</p>
<p>Behoben: Der Operator <code>new</code> wurde behoben, so dass __New als Ausnahme ausgelöst oder via Exit beendet werden kann.</p>

<h2 id="v1.1.25.01">1.1.25.01 - 5. März 2017</h2>
<p>Behoben: Send ermöglicht es nun anderen Skripten, auf Änderungen des Modifikatorzustands zu reagieren, die direkt danach ein Sonderzeichen haben, wie z. B. beim Loslassen von UMSCHALT in <code>Send Mört</code>.</p>

<h2 id="v1.1.25.00">1.1.25.00 - 4. März 2017</h2>
<p>Hinzugefügt: <a href="commands/Hotkey.htm#IfFn">Hotkey, If, % FunktionObjekt</a>.</p>
<p>Behoben: Website-Adresse im Help-Menü.</p>

<h2 id="v1.1.24.05">1.1.24.05 - 3. Februar 2017</h2>
<p>Behoben: WinSet AlwaysOnTop/Trans/TransColor funktioniert nun bei Fenstern mit einem erweiterten Style von 0.</p>

<h2 id="v1.1.24.04">1.1.24.04 - 17. Dezember 2016</h2>
<p>Behoben: <code>File.Read<i>Num</i>()</code> hat wiederholt alte Daten gelesen, wenn ein vorheriges <code>File.Read()</code> am Ende des Pufferspeichers aufgehört hat zu lesen.</p>
<p>Geändert: Bessere Pufferspeichernutzung, wenn <code>File.Read()</code> das Ende der gepufferten Daten erreicht hat.</p>
<p>Behoben: <code>GuiControl +Password</code> verwendet in Windows XP und höher nun standardmäßig den schwarzen Punkt als Maskierungszeichen.</p>
<p>Behoben: <code>GuiControl +/-Password</code> wird das Steuerelement nun sofort neu zeichnen.</p>

<h2 id="v1.1.24.03">1.1.24.03 - 19. November 2016</h2>
<p>Behoben: COM-Ausnahmefehlermeldungen enden nicht mehr mit <code>`r</code>.</p>
<p>Behoben: <code>{U+x}</code> unterstützt nun Ergänzungszeichen (x &gt; 0xFFFF).</p>
<p>Behoben: Klasseneigenschaften ohne get{} geben nicht mehr das interne Property-Objekt, sondern einen leeren Wert zurück, wenn die Klasse eine Basis hat, die keinen Wert für die Eigenschaft definiert. Eigenschaften in basislosen Klassen verhielten sich bereits korrekt.</p>
<p>Behoben: Die Hintergrundfarbe von Steuerelementen innerhalb eines Tab3-Steuerelements war falsch, wenn die visuellen Styles im System deaktiviert sind (z. B. Windows Classic).</p>
<p>Behoben: Handhabung von Threadbeendigungen in Funktionen, die direkt von einem Ereignis aufgerufen werden (z. B. OnExit-Funktionen). Dieser Bug hatte, außer im v2-alpha-Entwicklungszweig, keine nennenswerte Auswirkung.</p>
<p>Behoben: Der Debugger erkennt eine Verbindungstrennung nun sofort (also wenn ein Client terminiert, ohne Stop/Detach aufzurufen).</p>
<p>Behoben: Der Debugger behandelt <code>property_get -m 0</code> nun als "unlimitiert", gemäß der DBGp-Spezifikation.</p>
<p>Behoben: Der Debugger erwartet nun base64 bei <code>property_set -t integer/float</code>, gemäß der DBGp-Spezifikation.</p>

<h2 id="v1.1.24.02">1.1.24.02 - 13. Oktober 2016</h2>
<p>Hinzugefügt: Option <a href="Program.htm#Installer_uiAccess">Run with UI Access</a> (mit UI-Access ausführen) für den Installer.</p>
<p>Hinzugefügt: Dokumentation für die <a href="commands/GuiControls.htm#Tab_Autosize">automatische Größenanpassung</a> von Tab3.</p>
<p>Folgende Tab3-Bugs wurden behoben:</p>
<ul>
<li>Die automatische Größenanpassung wurde nicht beim ersten Aufruf von <a href="commands/Gui.htm#Show">Gui Show</a> ausgelöst, wenn die <code>AutoSize</code>-Option oder <code>w</code>- und <code>h</code>-Option benutzt wurden.</li>
<li>Wenn ein Tab3-Steuerelement bei der automatischen Größenanpassung leer ist, behält es nun die Standardgröße bei, anstatt unbrauchbar zu werden.</li>
<li>Die automatische Größenanpassung erfolgt nun unmittelbar vor dem Erstellen eines weiteren Tab-Steuerelements, als hätte man <a href="commands/GuiControls.htm#TabCmd">Gui Tab</a> aufgerufen.</li>
<li>Die automatische Größenanpassung schlug fehl, wenn das Tab-Steuerelement negative Bildschirmkoordinaten hat.</li>
<li>Wenn ein Tab3-Steuerelement via GuiControl versteckt wird, wird nun auch dessen Dialog/Hintergrund versteckt.</li>
</ul>
<p>Behoben: OnMessage wird lParam bei 32-Bit nun als vorzeichenlos übergeben.</p>
<p>Behoben: <code>Gui Name :</code> erlaubt nun Leerzeichen vor dem Doppelpunkt.</p>
<p>Behoben: GUI-Fenster und -Steuerelemente konnten nicht mit negativen HWND-Nummern identifiziert werden.</p>
<p>Behoben: ComObject unterdrückt nun Fehler, die durch <a href="commands/ComObjConnect.htm">Trennung von Ereignissen</a> ausgelöst werden, nachdem das Skript das Objekt freigegeben hat.</p>
<p>Behoben: Gui Show hat das Fenster veranlasst, kleiner zu werden, wenn es eine mehrzeilige Menüleiste hat.</p>
<p>Behoben: <code>LV_InsertCol(n, Breite)</code> hat nicht dazu geführt, dass der ListView-Scrollbalken auf einigen OS-Versionen aktualisieren wurde.</p>
<p>Geändert: Codegröße von FileRecycleEmpty optimiert.</p>

<h2 id="v1.1.24.01">1.1.24.01 - 2. August 2016</h2>
<p>Geändert: <code>Hotkey, If, Ausdruck</code> löst nun einen Fehler aus, wenn der ungenutzte dritte Parameter nicht leer ist.</p>
<p>Behoben: <code>&amp;&amp;</code>, <code>||</code> und der ternäre Operator werden nun jedes als Bedingung verwendete Objekt freigeben, wie in <code>if (a.Unterobjekt &amp;&amp; b)</code>.</p>
<p>Behoben: Gui/GuiControl konnte Radio-Buttons innerhalb eines Tab3-Steuerelements nicht einschalten.</p>
<p>Behoben: Ab sofort sind in Windows 10 relative Pfade für den Verknüpfung-Parameter von FileCreateShortcut möglich.</p>
<p>Behoben: Ein Tab3-Steuerelement im aktuellen Windows-Design wird die benutzerdefinierte Textfarbe aller untergeordneten Steuerelemente nicht mehr überschreiben.</p>
<p>Behoben: Der Debugger hat Fortsetzungsbefehle in bestimmten Fällen nicht korrekt behandelt.</p>

<h2 id="v1.1.24.00">1.1.24.00 - 22. Mai 2016</h2>
<p><strong>Gravierende Änderungen:</strong></p>
<p>Der Versuch, eine leere Variable oder einen Ausdruck, der einen leeren Wert ergibt, an den <a href="commands/SetTimer.htm#Label"><em>Label</em></a>-Parameter von SetTimer zu übergeben, wird ab sofort als Fehler eingestuft. Dieser Parameter darf weder leer sein noch <a href="commands/SetTimer.htm#OmitLabel">weggelassen werden</a>.</p>
<p><a href="commands/SetTimer.htm#once">Einmalig laufende Timer</a> werden nach ihrem Durchlauf automatisch gelöscht, wenn sie mit einem via Skript erstellten Objekt verbunden sind. Dadurch kann das Objekt freigegeben werden, wenn es vom Skript nicht länger benötigt wird, aber das bedeutet auch, dass die <em>Periode</em> und <em>Priorität</em> des Timers verworfen werden.</p>
<p>SetTimer, Hotkey, GuiControl und Menu überprüfen nun die minimale Parameteranzahl von Funktionen, die via Referenz übergeben wurden (nicht nur via Namen, wie in früheren Versionen). Wenn die Funktion zu viele Parameter benötigt, wird ein Fehler ausgelöst oder ErrorLevel gesetzt (je nach Bedarf).</p>
<p><strong>Abwärtskompatible Änderungen:</strong></p>
<p>Wenn der <a href="commands/SetTimer.htm#Label"><em>Label</em></a>-Parameter von SetTimer <a href="commands/SetTimer.htm#OmitLabel">weggelassen</a> wird und <a href="Variables.htm#ThisLabel">A_ThisLabel</a> leer ist, wird der aktuelle Timer (sofern vorhanden) verwendet.</p>
<p><strong>Neue Features:</strong></p>
<p><a href="commands/GuiControls.htm#Tab">Tab3-Steuerelement</a> hinzugefügt, das eine Reihe von Problemen mit Tab-Steuerelementen behebt.</p>
<p><strong>Fehlerbehebungen:</strong></p>
<p>GuiControl wird Steuerelemente nun beim Hinzufügen/Löschen von Tabs aktualisieren. Konkret heißt das:</p>
<ul>
  <li>Die Auswahl eines neuen Tabs mit <code>||</code> funktioniert nun korrekt.</li>
  <li>Das Löschen aller Tabs wird nun die Steuerelemente des früheren Tabs verstecken.</li>
</ul>
<p><code>+Disabled</code>/<code>+Hidden</code> werden ihren Effekt auf die Steuerelemente innerhalb eines Tabs nicht mehr verlieren.</p>
<p>Deaktivierte Tab-Steuerelemente werden STRG+TAB nun ignorieren.</p>
<p><code>Gui Tab</code> ohne Parameter beginnt nun eine neue Radiogruppe, falls zutreffend. <code>Gui Tab</code> mit Parametern hatte bereits diesen Effekt.</p>
<h2 id="v1.1.23.07">1.1.23.07 - 20. Mai 2016</h2>
<p>Behoben: <code>Menu x, Insert, y, z, % Objekt</code> wird das Objekt nun verwenden statt ignorieren.</p>
<p>Behoben: <code>Menu x, Add, :item text, % Objekt</code> verwendet nun das Objekt, anstatt nach einem Untermenü zu suchen.</p>

<h2 id="v1.1.23.06">1.1.23.06 - 15. Mai 2016</h2>
<p>Behoben: <code>break label</code> hat das Programm zum Absturz gebracht, wenn es direkt in dessen Zielschleife verschachtelt war.</p>

<h2 id="v1.1.23.05">1.1.23.05 - 27. März 2016</h2>
<p>Behoben: InputBox, MsgBox, FileSelectFile und FileSelectFolder haben ein ungewolltes ALT-Up gesendet, wenn ALT unten ist. Schuld daran war der in v1.1.22.01 hinzugefügte STRG/UMSCHALT-Workaround.</p>
<p>Geändert: Der STRG/UMSCHALT-Workaround wurde verbessert, um zu verhindern, dass die WIN-Taste unnötig "maskiert" wird, wenn gleichzeitig auch STRG, UMSCHALT oder ALT unten ist.</p>

<h2 id="v1.1.23.04">1.1.23.04 - 26. März 2016</h2>
<p>Behoben: Bei LV_Modify können die Optionen nun weggelassen werden, wie in <code>LV_Modify(r,, Spalte1)</code>.</p>

<h2 id="v1.1.23.03">1.1.23.03 - 12. März 2016</h2>
<p>Behoben: __Delete Meta-Funktionen haben Ausnahmen fehlerhaft unterdrückt oder vorzeitig erneut ausgelöst, wenn sie während der Ausnahmepropagierung aufgerufen wurden.</p>
<p>Behoben: Erkennung von Funktionsaufrufen mit einem leeren Pflichtparameter beim Laden des Skripts, z. B. <code>fn(x,,y)</code>.</p>

<h2 id="v1.1.23.02">1.1.23.02 - 12. März 2016</h2>
<p>Behoben: RegDelete hat den kompletten Schlüssel anstelle des Standardwerts gelöscht.</p>
<p>Codepflege; kleine Verbesserung an der Codegröße.</p>

<h2 id="v1.1.23.01">1.1.23.01 - 24. Januar 2016</h2>
<p>Behoben: Ein theoretisches Problem beim Laden von Skripten mit merkwürdigen/sehr langen Pfaden behoben.</p>
<p>Ahk2Exe: Unicode in kompilierten Skripten behoben (fehlerhaft seit v1.1.23.00).</p>

<h2 id="v1.1.23.00">1.1.23.00 - 16. Januar 2016</h2>
<p>Hinzugefügt: Unterbefehl <a href="commands/Menu.htm#Insert">Menu Insert</a>.</p>
<p>Hinzugefügt: <a href="commands/MenuGetHandle.htm">MenuGetHandle()</a>.</p>
<p>Hinzugefügt: <a href="commands/MenuGetName.htm">MenuGetName()</a>.</p>
<p>Hinzugefügt: Menüpunktoptionen: Radio, Right, Break und BarBreak.</p>
<p>Geändert: Der Menu-Befehl wurde verbessert, um Menüpunkte anhand ihrer Position zu identifizieren: <code>1&amp;</code></p>
<p>Hinzugefügt: <a href="commands/LoadPicture.htm">LoadPicture()</a>.</p>
<p>Hinzugefügt: <a href="misc/ImageHandles.htm">hicon/hbitmap: Syntax</a>, mit der Handles an Befehlen übergeben werden können, die normalerweise Bilder aus einer Datei laden.</p>
<p>Hinzugefügt: Neue interne Variablen: A_CoordModeToolTip/Pixel/Mouse/Caret/Menu, A_DefaultGui, A_DefaultListView, A_DefaultTreeView, A_KeyDelayPlay, A_KeyDuration/Play, A_MouseDelayPlay, A_SendLevel, A_SendMode und A_StoreCapsLockMode.</p>
<p>Hinzugefügt: Hotkey-Option <code>I</code> zum Setzen einer Eingabestufe für die Hotkey-Variante.</p>
<p>Geändert: Das Picture-Steuerelement wurde verbessert, um BackgroundTrans in Verbindung mit Symbolen zu unterstützen.</p>
<p>Geändert: Das Picture-Steuerelement wurde verbessert, um das Flackern beim Laden von großen Bildern zu reduzieren.</p>
<p>Kleine Optimierungen am Menu-Code und beim Nachschlagen von internen Variablen.</p>
<p>Behoben: Umwandlungen von Menüpunkten zu Trennlinien, und umgekehrt.</p>
<p>Behoben: A_ThisMenuItemPos unterstützt nun doppelt vorhandene Menüpunktnamen.</p>
<p>Behoben: Untermenüs wurden manchmal nicht neu erstellt, nachdem ein Menü gelöscht wurde.</p>
<p>Behoben: AutoHotkeyXXX.exe öffnet nun AutoHotkey.chm, nicht AutoHotkeyXXX.chm.</p>

<h2 id="v1.1.22.09">1.1.22.09 - 11. November 2015</h2>
<p>Einige Probleme mit SetTimer Delete behoben.</p>
<ul>
  <li>KeyHistory hat beim Zählen von Timern fälschlicherweise gelöschte Timer mit einbezogen.</li>
  <li>Der Aufruf von KeyHistory innerhalb eines via Timer gestarteten Threads hat das Skript zum Absturz gebracht, wenn der Timer gelöscht, aber nicht ausgeschaltet wurde.</li>
  <li>Das Löschen des neuesten Timers hat danach erstellte Timer unbrauchbar gemacht, es sei denn, ALLE Timer wurden gelöscht.</li>
</ul>

<h2 id="v1.1.22.08">1.1.22.08 - 11. November 2015</h2>
<p>Behoben: Die For-Schleife wird die Kontrolle nun korrekt übergeben, wenn _NewEnum/Next eine Ausnahme auslöst.</p>
<p>Behoben: Finally wird die bevorstehende Ausnahme nun hinauszuzögern, bis dessen Block ausgewertet wurde, nicht nur bis zum Aufruf der ersten internen Funktion.</p>
<p>Behoben: Erkennung von ungültigen Sprüngen aus Finally-Blöcken beim Laden des Skripts (fehlerhaft seit v1.1.20).</p>

<h2 id="v1.1.22.07">1.1.22.07 - 27. September 2015</h2>
<p>Behoben: Die GUI-Steuerelement-Optionen <code>w-1</code> und <code>h-1</code> schlugen fehl, wenn DPI größer gleich 150 % ist und die GUI kein <code>-DPIScale</code> aufweist.</p>
<p>Behoben: <code>~<i>Taste</i> up</code>-Hotkeys werden ab sofort kein automatisches <code>Send {<i>Taste</i> down}</code> mehr durchführen. Diese Problematik trat nur auf, wenn der Hotkey eingeschaltet wurde, nachdem die Taste nach unten gedrückt wurde.</p>
<h2 id="v1.1.22.06">1.1.22.06 - 13. September 2015</h2>
<p>Behoben: Input und Hotstrings erkennen nun Ereignisse mit Zeichen, die vom Typ Unicode oder keine Tasten sind.</p>
<p>Behoben: Die automatische Größenanpassung von Edit-Steuerelementen wird die letzte Zeile nun mit einbeziehen, wenn sie leer ist.</p>
<p>Behoben: Out-of-Memory-Handhabung in ComObj-Funktionen.</p>
<p>Behoben: ComObjArray wird überschüssige Parameter nun ignorieren, statt das Programm zum Absturz zu bringen (gilt nur für dynamische Aufrufe).</p>
<p>Behoben: GuiControl wird Tabs nun wie vorgesehen anfügen statt davorsetzen.</p>
<p>Behoben: XP64-Unterstützung.</p>

<h2 id="v1.1.22.05">1.1.22.05 - 10. September 2015</h2>
<p>Behoben: Symbole mit nicht-numerischen IDs wurden mit suboptimaler Qualität geladen.</p>
<p>Behoben: Gui Destroy hat keine Funktionsobjekte freigegeben, die mit der +g-Option gesetzt wurden.</p>
<p>Behoben: Gui Show wird nicht länger versuchen, eine untergeordnete GUI gewaltsam zu aktivieren.</p>
<p>Behoben: Der Feststell-/Num-/Rollen-Status wurde gesetzt, während die Taste unten war.</p>
<p>Behoben: Gui Color hat eine falsche Textfarbe verursacht (üblicherweise schwarz).</p>
<p>Geändert: Gui Show wurde geändert, um die Chancen zu verbessern, dass GuiSize sofort ausgeführt wird.</p>
<p><em>Für Entwickler:</em></p>
<ul>
	<li>Projekt-Config wurde modifiziert, um mehr VC++-Versionen zu unterstützen.</li>
	<li>Einige Build-Warnungen in VC++ 2015 behoben.</li>
	<li>64-Bit-Binaries werden nun mit VC++ 2015 erstellt. 32-Bit-Binaries verwenden weiterhin VC++ 2010.</li>
</ul>
<h2 id="v1.1.22.04">1.1.22.04 - 19. August 2015</h2>
<p>Behoben: ObjRawSet() kann ab sofort nichts zurückgeben.</p>
<p>Hinzugefügt: Win10-supportedOS-Tag zum EXE-Manifest hinzugefügt (verhindert einige Probleme mit dem Programmkompatibilitätsassistenten und ähnlichem).</p>
<p>Hinzugefügt: Erkennung von Syntaxfehlern nach ")" in einer Funktionsdeklaration.</p>

<h2 id="v1.1.22.03">1.1.22.03 - 12. Juli 2015</h2>
<p>Behoben: A_EndChar gab einen gekürzten Wert für Unicode-Endungszeichen zurück.</p>
<p>Kleine Implementierungsänderungen:</p>
<ul>
	<li>A_Language verwendet nun GetSystemDefaultUILanguage().</li>
	<li>Das Starten von Window Spy/der Hilfe-Datei über das Tray-Menü wurde umgestaltet, um die Wiederverwendung von Code zu verbessern.</li>
	<li>Handhabung von Gui/Menu/Hotkey/Hotstring/OnClipboard-Meldungen geringfügig optimiert.</li>
</ul>

<h2 id="v1.1.22.02">1.1.22.02 - 27. Mai 2015</h2>
<p>Behoben: TreeView wird nicht länger <code>*</code>-Ereignisse bei unbekannten Benachrichtigungen auslösen.</p>
<p>Behoben: Kein Absturz/schlechtes Verhalten mehr, wenn ein Timer sich selbst löscht.</p>
<p>Behoben: RWin-up wurde in einigen seltenen Fällen <a href="commands/_MenuMaskKey.htm">maskiert</a>, wo LWin-up es nicht gewesen wäre.</p>
<h2 id="v1.1.22.01">1.1.22.01 - 24. Mai 2015</h2>
<p>Behoben: Größenanpassungen von Text/Edit/Button-Steuerelemente kompensieren nun hinausragende Zeichen.</p>
<p>Behoben: Registry-Befehle erlauben nun ein <code>:</code> in UnterSchlüssel, wenn in Kombination mit RootSchlüssel.</p>
<p>Behoben: Hotkey-Priorisierung berücksichtigt nun Modifikatoren.</p>
<p>Geändert: Else/Try/Catch/Finally-Handhabung wurde umgestaltet, um so etwas wie <code>hotkey::try cmd</code> zu unterstützen.</p>
<p>Hinzugefügt: Eine Übergangslösung für Skript-Dialogfenster, die so taten, als wurde STRG oder UMSCHALT gedrückt, nachdem sie vom Tastatur-Hook blockiert wurden.</p>

<h2 id="v1.1.22.00">1.1.22.00 - 1. Mai 2015</h2>
<p>Hinzugefügt: Ab sofort wird SetErrorMode(SEM_FAILCRITICALERRORS) beim Starten des Programms aufgerufen, um Fehlermeldungen auf Systemebene wie "Es befindet sich kein Datenträger im Laufwerk" zu unterdrücken. Der Aufruf von Drive oder DriveGet hat nicht länger Einfluss auf den Fehlermodus des Prozesses.</p>
<p>Geändert: MonthCal-Steuerelemente haben standardmäßig nun Tabstopp in Windows Vista oder höher.</p>
<p>Geändert: ComObjConnect wurde verbessert und verwendet nun IProvideClassInfo, sofern verfügbar.</p>
<p>Behoben: Einige Probleme mit Methoden-/Eigenschaftsdefinitionen nach einer geschweiften Endklammer auf selber Zeile behoben.</p>
<p>Behoben: Die automatischen Größenanpassungen von Text/Link-Steuerelementen kompensieren nun den +Border-Style (WS_BORDER).</p>
<p>Behoben: <code>Break <i>N</i></code> funktioniert nun korrekt, wenn Loop direkt unter einer If/Else/Try/Catch-Anweisung verwendet wird.</p>

<h2 id="v1.1.21.03">1.1.21.03 - 12. April 2015</h2>
<p>Behoben: Erkennung von Namenskonflikten zwischen Eigenschaften und Methoden.</p>

<h2 id="v1.1.21.02">1.1.21.02 - 4. April 2015</h2>
<p>Behoben: <code>OnMessage(meld, fnobj, 0)</code> wird nichts mehr tun, wenn <em>fnobj</em> noch nicht registriert ist.</p>

<h2 id="v1.1.21.01">1.1.21.01 - 3. April 2015</h2>
<p>Behoben: Bei StrReplace() kann ErsatzText nun weggelassen werden.</p>
<p>Behoben: Die Namen der Klassenvariablen können nun ASCII-fremde Zeichen enthalten.</p>

<h2 id="v1.1.21.00">1.1.21.00 - 28. März 2015</h2>
<p>Hinzugefügt: <a href="commands/LoopReg.htm">Loop, Reg, RootSchlüssel[\Schlüssel, Modus]</a>.</p>
<p>Hinzugefügt: <a href="commands/LoopFile.htm">Loop, Files, DateiMuster [, Modus]</a>.</p>
<p>Geändert: <em>EingabeVar</em>-Parameter können ab sofort <a href="Variables.htm#percent-space">% Ausdruck</a> enthalten (außer bei If-Befehlen).</p>
<p><a href="objects/Object.htm">Objektmethoden</a> überarbeitet:</p>
<ul>
  <li>Objekt.InsertAt(), Objekt.Push() und ObjRawSet() hinzugefügt.</li>
  <li>Objekt.Delete(), Objekt.RemoveAt() und Objekt.Pop() hinzugefügt.</li>
  <li>Objekt.Length() hinzugefügt.</li>
</ul>
<p>Hinzugefügt: <a href="commands/Ord.htm">Ord()</a>; außerdem unterstützt Chr() nun Ergänzungszeichen (&gt;0xFFFF).</p>
<p>Hinzugefügt: <a href="commands/StringReplace.htm">StrReplace()</a>.</p>
<p>Entfernt: Der veraltete und undokumentierte 5-Parameter-Modus von RegRead, der exklusiv für die AutoIt-v2-Kompatibilität bestimmt war (der zusätzliche Parameter wurde nicht verwendet).</p>
<p>Geändert: Die Parameter RootSchlüssel und UnterSchlüssel von <a href="commands/RegRead.htm">RegRead</a>, <a href="commands/RegWrite.htm">RegWrite</a> und <a href="commands/RegDelete.htm">RegDelete</a> können nun kombiniert werden.</p>

<h2 id="v1.1.20.03">1.1.20.03 - 21. März 2015</h2>
<p>Behoben: MouseGetPos (AusgabeVarSteuerelement), GuiContextMenu und GuiDropFiles (A_GuiControl) ignorieren nicht länger deaktivierte Steuerelemente [fehlerhaft seit v1.1.20.00].</p>

<h2 id="v1.1.20.02">1.1.20.02 - 11. März 2015</h2>
<p>Behoben: Add-First-Modus von OnMessage.</p>
<p>Behoben: A_OSVersion bei unbekannten Betriebssystemen in x64-Versionen.</p>
<p>Behoben: ExitApp wird den pausierten Zustand des Skripts nun aufheben, bevor Objekte freigegeben werden, falls eine __Delete-Metafunktion aufgerufen wird.</p>
<p>Geändert: Triviale Optimierungen und Codeanpassung.</p>

<h2 id="v1.1.20.01">1.1.20.01 - 10. März 2015</h2>
<p>Die in v1.1.20.00 vorgenommenen Änderungen bzgl. der Speicherung und Wiederherstellung von ErrorLevel bei Thread-Unterbrechung wurden rückgängig gemacht, um unbeabsichtigte Folgen entgegenzuwirken.</p>
<ul>
  <li>ErrorLevel wird nicht zurückgesetzt oder gelöscht, wenn ein neuer Thread startet. Stattdessen behält es den Wert bei, den es im unterbrochenen Thread hatte, wie in v1.1.19 und älter.</li>
  <li>Wenn ErrorLevel ein Objekt enthält und der Thread unterbrochen wird, wird das Objekt beim Fortsetzen des Threads mit einer leeren Zeichenkette ersetzt, wie in v1.1.19 und älter.</li>
  <li>Wenn ErrorLevel eine Zeichenkette länger als 127 Zeichen enthält, wird sie beim Fortsetzen des Threads gekürzt, wie in v1.1.19 und älter.</li>
</ul>
<p>Behoben (erneut): Timer haben manchmal bewirkt, dass ErrorLevel als hexadezimal formatiert wurde.</p>
<p>Behoben: Klassenmethoden behalten eine gezählte Referenz zur Klasse.</p>

<h2 id="v1.1.20.00">1.1.20.00 - 8. März 2015</h2>
<p><strong>Neue Features:</strong></p>
<p>Hotkey, Menu, SetTimer, Gui und Gui-Steuerelement-Ereignisse akzeptieren nun <a href="misc/Labels.htm#Functions">eine Funktion anstelle eines Labels</a>, wenn kein Label gefunden wird.</p>
<p>Hotkey, Menu, SetTimer, Gui und Gui-Steuerelement-Ereignisse akzeptieren nun ein <a href="objects/Functor.htm">Funktionsobjekt</a>. Delete-Unterbefehl für SetTimer hinzugefügt, um die Freigabe des Objekts zu ermöglichen.</p>
<p><a href="commands/OnMessage.htm">OnMessage()</a> verbessert, um einer beliebigen Anzahl von Funktionen oder Funktionsobjekten die Überwachung einer einzigen Meldung zu ermöglichen.</p>
<p><a href="commands/OnExit.htm#function">OnExit()</a> und <a href="commands/OnClipboardChange.htm#function">OnClipboardChange()</a> hinzugefügt, die einen Funktionsnamen oder ein Funktionsobjekt akzeptieren.</p>
<p>Möglichkeit hinzugefügt, <a href="Hotkeys.htm#Function">Hotkey-Label auf eine Funktionsdefinition zu verweisen</a>.</p>
<p><a href="commands/Format.htm#ULT">U/L/T-Modifikatoren</a> hinzugefügt, um Groß-/Kleinschreibung-Umwandlungen mit Format() durchzuführen.</p>
<p><a href="commands/Input.htm#E">E-Option</a> für den Input-Befehl hinzugefügt, um Endungszeichen als Zeichen statt als Tastencode zu behandeln.</p>
<p>** (stderr) für FileAppend hinzugefügt.</p>
<p><a href="commands/ObjBindMethod.htm">ObjBindMethod(obj, method, args*)</a> und <a href="objects/Func.htm#Bind">Func.Bind(args*)</a> hinzugefügt.</p>

<p><strong>Änderungen:</strong></p>
<p>Standardverhalten hinsichtlich dessen geändert, was passiert, wenn das Hauptskript nicht gefunden wird:</p>
<ul>
  <li>Wenn kein Skript angegeben wurde und keine Standard-Skript-Dateien gefunden wurden, wird die neue <a href="Welcome.htm">Willkommensseite</a> in der Hilfe-Datei angezeigt.</li>
  <li>Wenn ein Skript angegeben wurde oder wenn die Hilfe-Datei fehlt (oder einen anderen Namen hat als die EXE-Datei), wird nur eine Fehlermeldung angezeigt.</li>
</ul>
<p>WinActivate wird das Fenster nun wiederherstellen, wenn es bereits aktiv, aber minimiert ist.</p>
<p>WinActivate sucht nun nach einem sichtbaren Fenster, um es zu aktivieren, wenn DetectHiddenWindows ausgeschaltet und das aktive Fenster versteckt ist, anstatt nichts zu tun.</p>
<p>A_CaretX/A_CaretY verwendet nun eine andere Methode zum Abrufen der Position der Texteinfügemarke.</p>
<ul>
  <li>Dadurch wird häufiger ein leerer Wert zurückgegeben, wenn die echte Position der Texteinfügemarke nicht ermittelt werden kann, anstatt die obere linke Position des aktiven Fensters zurückzugeben.</li>
  <li>Dadurch wird die Chance verringert, dass Nebeneffekte auftreten.</li>
  <li>Dadurch funktioniert es auch in Konsolenfenstern.</li>
</ul>
<p>A_OSVersion verwendet nun <a href="https://msdn.microsoft.com/de-de/library/ff561910">RtlGetVersion()</a>, um Windows 10 und hoffentlich auch zukünftige Versionen erkennen zu können.</p>
<p>A_OSVersion gibt nun eine Versionsnummer im Format "Haupt.Neben.Build" zurück, wenn kein vordefinierter Name für das Betriebssystem vorliegt.</p>
<p>Objekte unterstützen nun <code>x[,y]</code>, <code>x.y[,z]</code> und <code>x[](y)</code>.</p>
<ul>
  <li>Benutzerdefinierte Objekte können das nutzen, indem man Standardwerte für Parameter von Eigenschaften und Metafunktionen angibt. Bei __Call wird der erste Parameter weggelassen, wie in <code>x.__Call(,y)</code>.</li>
  <li>COM-Objekte rufen DISPID_VALUE auf, wenn der Elementname weggelassen wird. Zum Beispiel würde <code>x[]</code> die Standardeigenschaft von x abrufen, und mit <code>fn[]()</code> könnte man JScript-Funktionen aufrufen.</li>
</ul>
<p>Änderungen, die Fehler beheben, Codegröße reduzieren oder die Leistung verbessern, einschließlich:</p>
<ul>
  <li>Änderungen am Vorab-Parsen von #If und statischen Variableninitialisierern.</li>
  <li>Änderungen am Vorab-Parsen von { Blöcken }.</li>
</ul>

<p><strong>Fehlerbehebungen:</strong></p>
<p>VK-zu-Tastenname-Umwandlungen für die Tasten A bis Z berücksichtigen nun das Tastaturlayout.</p>
<ul>
  <li>Betrifft: GetKeyName, Hotkey-Steuerelement, A_PriorKey, KeyHistory und Input EndKey ErrorLevel (außer wo die UMSCHALT-Taste benötigt wird).</li>
  <li>Alle anderen Tasten, einschließlich solcher, die ASCII-fremde Buchstaben erzeugen, wurden bereits gemäß dem aktuellen Tastaturlayout von AutoHotkey übersetzt.</li>
</ul>
<p>Beim Senden von Text zur Standardausgabe via FileAppend (*) wird nun der Codierung-Parameter berücksichtigt, anstatt immer einen ANSI-Text auszugeben.</p>
<p>Die automatische Größenanpassung von GUI-Fenstern mit nur einem Scrollbalken wird nun korrekt durchgeführt.</p>
<p><code>Exception(m, n)</code> wird nicht mehr abstürzen, wenn n zu weit außerhalb der Grenzen liegt.</p>
<p>GuiContextMenu setzt A_GuiEvent nun korrekt in x64.</p>
<p>FileGetSize hat manchmal ein unklares Ergebnis geliefert, wenn die Datei nicht vorhanden ist oder nicht geöffnet werden kann.</p>
<p>Thread-Unterbrechungen speichern und stellen ErrorLevel in detaillierterer Form wieder her [wurde in v1.1.20.01 aufgrund von unbeabsichtigten Folgen rückgängig gemacht].</p>
<p>ControlClick-Pos-Modus ignoriert nun deaktivierte Steuerelemente.</p>
<p>Gui +MaxSize kleiner als +MinSize verhält sich nicht mehr merkwürdig.</p>
<p>GuiControl/Get benötigen nicht mehr einen Gui-Namen, wenn eine Steuerelement-HWND-Nummer angegeben wurde.</p>
<p>Metafunktionen beeinflussen nicht mehr die von Exception() gemeldete Zeilennummer.</p>

<h2 id="v1.1.19.03">1.1.19.03 - 11. Februar 2015</h2>
<p>Geändert: Die Neubelegung wurde verbessert, um <code>scXXX::Y</code> zu erlauben, wenn das aktuelle Tastaturlayout das <code>ScXXX</code> keinem VK-Code zugeordnet hat. Allerdings muss <code>Y</code> noch auf dem aktuellen Tastaturlayout vorhanden sein.</p>
<p>Behoben: <code>break n</code> funktioniert nun korrekt, wenn <code>until</code> vorhanden ist, anstatt den Thread zu terminieren.</p>
<p>Behoben: ControlGetFocus hat die Möglichkeit des Benutzers gestört, einen Doppelklick durchzuführen (Danke an HotKeyIt).</p>
<p>Behoben: ListView wurde korrigiert, um zu verhindern, dass das g-Label des Steuerelements bei nicht-unterstützten (und bisher unbekannten) Benachrichtigungen wie z. B. LVN_GETEMPTYMARKUP aufgerufen wird.</p>
<p>Behoben: <code>#Include *i &lt;X&gt;</code> beendet das Programm nun wie vorgesehen, wenn X einen Syntaxfehler enthält.</p>
<p>Behoben: <code>for Var in <i>Ausdruck</i></code> hat das Programm manchmal zum Absturz gebracht, wenn <i>Ausdruck</i> eine via Skript definierte Funktion aufruft.</p>

<h2 id="v1.1.19.02">1.1.19.02 - 25. Januar 2015</h2>
<p>Entfernt: Die für Win9x/Win2k genutzten Symbole mit einer Farbtiefe von 16 Bit.</p>
<p>Entfernt: Die separaten Tray-Symbol-Ressourcen.</p>
<p>Geändert: Verbesserungen am Auswahlverfahren von Symbolgrößen beim Laden von Symbolen aus DLL/EXE-Dateien.</p>
<ul><li>Kurz gesagt, es wird eher nach unten statt nach oben skaliert. Diese Änderung ist besonders bei Systemen mit einer DPI-Einstellung von 125 % oder 150 % hilfreich, wenn die systeminternen Symbolgrößen 20/40 oder 24/48 statt 16/32 sind. Wenn die Symbolressource all diese Größen aufweist, spielt diese Änderung keine Rolle.</li></ul>
<p>Behoben: Einige Probleme im Zusammenhang mit der Hotkey-Validierung beim Laden des Skripts.</p>
<ul>
	<li>Ungültige Hotkeys wie foo:: werden ab sofort immer als Fehler behandelt, anstatt eine irreführende Warnung über das Tastaturlayout anzuzeigen.</li>
	<li>Hotkeys wie ^!ä::, die aufgrund des aktuellen Tastaturlayouts inaktiv sind, dürfen eine Aktion auf gleicher Zeile haben, außerdem wird das Label nun korrekt registriert (also als "^!ä" und nicht als "^!ä:"). Bei der Befehlszeilenoption /iLib wird die Warnung unterdrückt.</li>
	<li>Neubelegungen, die aufgrund des aktuellen Tastaturlayouts inaktiv sind, zeigen zwei Warnungen anstelle eines nicht-behebbaren Fehlers an.</li>
	<li>Ein Mausrad-Hotkey als Präfixtaste verursacht nur eine statt zwei Fehlermeldungen und respektiert /ErrorStdOut.</li>
</ul>
<p>Behoben: /iLib schreibt die Datei nun auch bei einem Syntaxfehler.</p>
<p>Behoben: Return/Break/Continue/Goto innerhalb von Try..<a href="commands/Finally.htm">Finally</a>.</p>

<h2 id="v1.1.19.01">1.1.19.01 - 5. Januar 2015</h2>
<p>Behoben: Der Hotkey-Befehl hat das Programm zum Absturz gebracht bei dem Versuch, neuen Varianten bereits vorhandener Hotkeys zu erstellen (fehlerhaft seit v1.1.19.00).</p>
<p>Geändert: Kleine Optimierungen am Hotkey-Befehl und an A_TimeIdle im Zusammenhang mit dem Wegfall der Win9x-Unterstützung vorgenommen.</p>

<h2 id="v1.1.19.00">1.1.19.00 - 4. Januar 2015</h2>
<p>Hinzugefügt: Ein Name für <code>Func.Call()</code>. <code>Func.()</code> funktioniert immer noch, aber veraltet.</p>
<p>Behoben: Einige Probleme mit <code>X.Y</code> und <code>X.Y(Z)</code> in VBScript/JScript/C#:</p>
<ul>
  <li>Wenn <code>X.__Call</code> den <em>Namen</em> einer Funktion enthielt, wurde dieser zurückgegeben statt aufgerufen.</li>
  <li>Wenn <code>X.Y(Z)</code> einen Wert zurückgab, wurde Z ignoriert. Nun verhält es sich wie <code>X.Y[Z]</code>, sofern X.Y keine Funktion ist.</li>
</ul>
<p>Behoben: Der Hotkey-Befehl hat das Tilde-Präfix (~; ursprüngliche Tastenfunktion nicht blockieren) ignoriert, wenn <em>Label</em> weggelassen wurde.</p>
<p>Behoben: Der Hotkey-Befehl hat das Dollar-Präfix ($; Hook nutzen) ignoriert, wenn die Hotkey-Variante bereits ohne Dollar-Präfix vorhanden war.</p>
<p>Behoben: Die Syntax <code>%Fn%()</code> funktioniert ab sofort auch mit JavaScript-Funktionsobjekten.</p>
<p>Behoben: Das EXE-Manifest wurde geändert, um UAC-Erkennungsheuristiken beim Installer zu umgehen (fehlerhaft seit v1.1.17).</p>
<p>Geändert: Die Art und Weise, wie Threads auf dem Aufrufstapel des Debuggers dargestellt werden, wurde verbessert.</p>
<ul>
  <li>Es wird nicht der Labelname, sondern der Typ des Threads angezeigt (den Labelnamen findet man im nächsten Stapeleintrag). Bei Hotkeys wird stattdessen der Hotkey angezeigt.</li>
  <li>Es wird die Zeilennummer der Subroutine oder Funktion angezeigt, die vom Thread gestartet wurde, nicht die Zeile, auf der sich das Skript befand, bevor der Thread gestartet wurde.</li>
</ul>

<h2 id="v1.1.18.00">1.1.18.00 - 30. Dezember 2014</h2>
<p>Geändert: IDispatch-Implementierung für AutoHotkey-Objekte verbessert:</p>
<ul>
  <li><code>X.Y</code> in VBScript und C# gibt nun X.Y zurück, wenn es KEIN Func-Objekt ist; früher hat es versucht, X.Y() unabhängig vom Typ aufzurufen.</li>
  <li><code>X(Y)</code> in VBScript, JScript und C# gibt nun X[Y] zurück, es sei denn, X ist ein Func-Objekt, dann wird es genauso wie früher aufgerufen.</li>
  <li><code>X[Y]</code> in C# gibt nun X[Y] zurück, wenn X KEIN Func-Objekt ist; früher hat es versucht, X[Y]() unabhängig vom Typ aufzurufen.</li>
  <li><code>X.Y()</code> in C# gibt nun X.Y zurück, wenn es KEIN Func-Objekt ist, da es in der C#-Dispatch-Implementierung mehrdeutig ist.</li>
  <li>Unbehandelte Ausnahmen werden nun in IDispatch-Ausnahmen umgewandelt.</li>
</ul>
<p>Hinzugefügt: Unterstützung für das Erstellen neuer Eigenschaften in IE-DOM-/JavaScript-Objekten.</p>
<p>Behoben: <code>FileAppend, %VarMitClipboardAll%, Datei</code> führte zum Absturz des Programms.</p>

<h2 id="v1.1.17.01">1.1.17.01 - 28. Dezember 2014</h2>
<p>Behoben: COM-Ereignishandler haben den letzten Objekt-Parameter nicht erhalten.</p>

<h2 id="v1.1.17.00">1.1.17.00 - 27. Dezember 2014</h2>
<p><strong>Neue Features:</strong></p>
<p><a href="commands/Format.htm">Format()</a> hinzugefügt.</p>
<p><a href="commands/FileOpen.htm">FileOpen()</a> kann nun genutzt werden, um Daten aus stdin zu lesen oder Daten in stdout oder stderr zu schreiben, indem man <code>"*"</code> oder <code>"**"</code> als Dateiname übergibt. <code>AutoHotkey.exe *</code> kann genutzt werden, um Skriptcode auszuführen, der via Piping von einem anderen Prozess übergeben wurde. Ein Beispiel dazu finden Sie unter <a href="commands/Run.htm#ExecScript">ExecScript()</a>.</p>
<p>Unterstützung hinzugefügt, dass AutoHotkey-Objekte an COM-APIs als IDispatch übergeben werden können.</p>
<p>Unterstützung für VT_BYREF in ComObject-Wrappern hinzugefügt. Mit <code>obj[]</code> kann auf den verwiesenen Wert zugegriffen werden.</p>
<p><strong>Fehlerbehebungen:</strong></p>
<p>Kompletter Systemabsturz in Win XP SP2 behoben.</p>
<p>Im Besitz befindliche ComObjArrays werden nicht via Pointer, sondern via Wert zurückgegeben. Das heißt, dass eine Kopie des Arrays, nicht ein Pointer, der auf ein Array verweist, das bald gelöscht werden soll, zurückgegeben wird.</p>
<p>Im Skript, das automatisch bei erstmaliger Ausführung von AutoHotkey erstellt wird, wurde die URL geändert.</p>
<p><code>sc15D</code> entspricht nun <code>vk5D</code>/AppsKey (Send, GetKeyName, etc.).</p>
<p>Edit-Steuerelemente behandeln ALTGR+A nicht mehr als STRG+A.</p>
<p>Statische Klassenvariablen dienen nicht mehr als Ziel für Label, die unmittelbar vor der Klasse stehen.</p>

<h2 id="v1.1.16.05">1.1.16.05 - 28. September 2014</h2>
<p>Behoben: x.y/[]/{} wurde manchmal inkorrekt als variadisch gekennzeichnet.</p>

<h2 id="v1.1.16.04">1.1.16.04 - 16. September 2014</h2>
<p>Behoben: Das Programm stürzte ab, wenn der Versuch unternommen wurde, eine schreibgeschützte Eigenschaft zu überschreiben.</p>
<p>Behoben: Das Programm stürzte ab, wenn ein RegExMatch-Objekt mit nicht-erfassten Teilsuchmustern während eines RegEx-Callouts erstellt wurde.</p>

<h2 id="v1.1.16.03">1.1.16.03 - 11. September 2014</h2>
<p>Behoben: Einige schlechte Verhaltensweisen in Abs() und Mod(), die durch eine fehlerhafte Fehlerbehebung in v1.1.16.01 verursacht wurden.</p>

<h2 id="v1.1.16.02">1.1.16.02 - 11. September 2014</h2>
<p>Behoben: #Include kann nun innerhalb einer Klasse verwendet werden (fehlerhaft seit a6ea27f).</p>
<p>Behoben: Clipboard gab binäre CF_HDROP-Daten in einigen Fällen zurück.</p>
<p>Geändert: Genauigkeit von FileGetSize im Zusammenhang mit noch offenen Dateien verbessert.</p>
<p>Geändert: For-Loop-Kompatibilität im Zusammenhang mit COM-Objekten verbessert.</p>

<h2 id="v1.1.16.01">1.1.16.01 - 10. September 2014</h2>
<p>Hinzugefügt: Syntax zum Definieren von dynamischen <a href="Objects.htm#Custom_Classes_property">Eigenschaften</a> innerhalb von Klassen.</p>
<p>Hinzugefügt: Die Optionen x+m und y+m zum Positionieren von GUI-Steuerelementen.</p>
<p>Hinzugefügt: Der #InputLevel von jedem Hotkey wird nun in ListHotkeys angezeigt (wenn ungleich 0).</p>
<p>Geändert: RegExMatch wurde im Zusammenhang mit O-Option (Objekt) optimiert; das Erfassen von Bereichen einer langen Zeichenkette erfolgt nun in einigen Fällen wesentlich schneller als zuvor.</p>
<p>Behoben: Objekte überprüfen nun, ob nach einem abgeschlossenen __Call neue Methoden verfügbar sind (um mit __Set und __Get gleichzuziehen).</p>
<p>Behoben: Es wurden einige undefinierte Verhaltensweisen behoben, die nach einem gescheiterten VarSetCapacity auftraten.</p>
<p>Behoben: FileRead meldet bei Dateien über 4 GB nun einen Fehler, anstatt die gelesenen Daten ungewollt zu kürzen.</p>
<p>Behoben: FileRead *c wird nun korrekt mit Null terminieren, wenn die Byte-Länge ungerade ist.</p>
<p>Behoben: Einige ClipboardAll-Probleme inklusive Verhaltensänderungen:</p>
<ul>
  <li><a href="commands/_ClipboardTimeout.htm">#ClipboardTimeout</a> wird für GetClipboardData() ignoriert, da es nie wirklich funktionierte und Probleme verursachte. Dadurch werden Zeitlimits und Datenverluste behoben, wenn sich eine Datei in der Zwischenablage befindet (eine Datei in Windows 8, oder eine Datei in einer ZIP-Datei oder ähnliches).</li>
  <li>Für Zwischenablageelemente mit einer Länge von Null, die in die Zwischenablage wiederhergestellt werden, wird Speicher in Höhe von 1 Byte reserviert, weil das Setzen eines Elements mit einer Länge von Null scheinbar immer fehlschlägt.</li>
  <li>MSDEVColumnSelect/MSDEVLineSelect bleibt nun erhalten, wenn es von Scintilla gesetzt wird, während alle von VS gesetzten Daten verworfen werden.</li>
  <li>Beim direkten Schreiben von ClipboardAll in eine Datei wird nun Unicode bevorzugt (andere Verwendungen von ClipboardAll haben dieses Verhalten bereits seit v1.1.08).</li>
  <li>ClipboardAll und FileRead *c in Unicode-Versionen werden ungerade Längen nun aufrunden. Dies erhöht die gemeldete StrLen um 1, wodurch eine mögliche Kürzung des letzten Bytes vermieden wird.</li>
</ul>
<p>Behoben: A_EventInfo bei TreeView-Elementen mit negativen Bildschirmkoordinaten.</p>
<p>Behoben: Ein mögliches Problem im Zusammenhang mit dem Filtern von ListView/TreeView-Meldungen.</p>
<p>Behoben: A_LineFile/A_LineNumber in #If-Ausdrücken.</p>
<p>Behoben: #If fügt sich nun selbst zu ListLines hinzu (aber als "If").</p>
<p>Behoben: <code>Abs(["-"]*)</code> und ähnliches führte zum Absturz des Programms.</p>
<p>Behoben: <code>} funcdef(){</code>, das global verwendet wird, und <code>}}</code>, das eine Methode/Eigenschaft/Klasse beendet.</p>
<h2 id="v1.1.15.04">1.1.15.04 - 12. August 2014</h2>
<p>Behoben: Leistungsproblem im Zusammenhang mit <code>&amp;var_mit_langer_zkette_von_ziffern</code>.</p>
<p>Behoben: Interne Variablen korrumpierten den Speicher, wenn ihnen ein Objekt zugewiesen wurde.</p>
<p>Behoben: Der Parser kann <code>continue</code> gegebenenfalls verbieten, selbst wenn die aktuelle Funktion innerhalb einer Schleife definiert ist.</p>
<p>Behoben: <code>File.Encoding := x "-RAW"</code> führte dazu, dass die Codierung/Decodierung von ASCII-fremden Zeichen nicht mehr korrekt war. Das Suffix <code>-RAW</code> wird ab sofort ignoriert.</p>

<h2 id="v1.1.15.03">1.1.15.03 - 2. August 2014</h2>
<p>Behoben: Metafunktionen beenden den Thread nach einem Exit oder Throw nun korrekt.</p>
<p>Behoben: FileInstall verwendet nun A_WorkingDir, wenn Ziel in einem unkompilierten Skript relativ ist.</p>

<h2 id="v1.1.15.02">1.1.15.02 - 7. Juli 2014</h2>
<p>Behoben: Debuggen von negativen Integer-Schlüsseln in Objekten.</p>

<h2 id="v1.1.15.01">1.1.15.01 - 30. Juni 2014</h2>
<p>Geändert: Interne Fehler- und Warnungsdialogfenster sind nun immer im Vordergrund.</p>
<p>Behoben: <code>Until</code> konnte nicht aus einer rekursiven Datei-/Registry-Schleife ausbrechen.</p>

<h2 id="v1.1.15.00">1.1.15.00 - 4. Mai 2014</h2>
<p>Hinzugefügt: <code>WIN_8.1</code> als möglicher Wert für A_OSVersion.</p>
<p>Geändert: Der Hotkey-Befehl wird das Durchreicheverhalten bei vorhandenen Hotkey-Varianten nun anwenden/entfernen, je nachdem, ob das <a href="Hotkeys.htm#Tilde">Tilde-Präfix (~)</a> vorhanden ist.</p>
<p>Geändert: Das EXE-Manifest wurde geändert, damit <a href="https://msdn.microsoft.com/de-de/library/windows/desktop/ms724439">GetVersion</a>/<a href="https://msdn.microsoft.com/de-de/library/windows/desktop/ms724451">GetVersionEx</a> die Windows-Version 8.1 erkennen kann.</p>

<h2 id="v1.1.14.04">1.1.14.04 - 25. April 2014</h2>
<p>Behoben: DllCall() wird das Skript nicht mehr zum Absturz bringen, wenn für <em>Funktion</em> eine reine 0 angegeben ist.</p>
<p>Behoben: <code>IsFunc("ComObj(")</code> wird 0 (false) zurückgeben, anstatt eine Ausnahme auszulösen.</p>
<p>Behoben: ControlClick kann nun korrekt XButton1/XButton2 senden.</p>

<h2 id="v1.1.14.03">1.1.14.03 - 14. Februar 2014</h2>
<p>Behoben: Ein Speicherleck in <code>new X</code>, wenn <code>X.__Init</code> den Thread abbricht.</p>
<p>Behoben: Haltepunkte werden nicht länger auf Klassenvariableninitialisierer verschoben, wenn sie mit Methodendefinitionen durchsetzt sind.</p>

<h2 id="v1.1.14.02">1.1.14.02 - 30. Januar 2014</h2>
<p>Behoben: <code>x::</code> und <code>x up::</code> wurden beide beim Loslassen ausgelöst, wenn der Zustand der Modifikatortasten das Auslösen von x beim Drücken verhindert hat. Seit v1.1.14 ist es eigentlich beabsichtigt, dass beide Hotkeys beim Loslassen ausgelöst werden, wenn x zudem in einer benutzerdefinierten Tastenkombination wie <code>x &amp; y::</code> verwendet wird.</p>

<h2 id="v1.1.14.01">1.1.14.01 - 15. Januar 2014</h2>
<p>Behoben: Try hat ohne Catch/Finally das Programm zum Absturz gebracht, wenn keine Ausnahme ausgelöst wurde.</p>

<h2 id="v1.1.14.00">1.1.14.00 - 15. Januar 2014</h2>
<p>Hinzugefügt: <a href="commands/Finally.htm">Finally</a>-Anweisung zum Durchführen von Säuberungsaktionen nach Try/Catch. [fincs]</p>
<p><b>Geändert</b>: Das Verhalten des <a href="Hotkeys.htm#Tilde">Tilde-Präfixes (~)</a> im Zusammenhang mit benutzerdefinierten Tastenkombos wurde geändert, um es intuitiver zu machen.</p>
<p>Behoben: <code>x &amp; y::</code> wird sowohl <code>x::</code> als auch <code>x up::</code> auslösen, wenn x im losgelassenen Zustand ist.</p>
<p>Behoben: ImageSearch setzt ErrorLevel nun auf 2 statt 0, wenn ein GDI-Aufruf fehlschlägt.</p>
<p>Behoben: EnvGet hat das Programm zum Absturz gebracht, wenn die Variable länger als 32767 Zeichen ist.</p>
<p>Behoben: Ein kleiner fehlerbehandlungsbezogener Bug in Zusammenhang mit ErrorLevel von StatusBarWait.</p>
<p>Behoben: Potenzielle Heap-Corruption in Zusammenhang mit FileRead *c in ANSI-Versionen.</p>
<p>Behoben: Die Übergabe von lokalen Variablen an variadischen Funktionen bei rekursiven Aufrufen.</p>
<p>Behoben: Skripte konnten nicht geladen werden, wenn die erste Zeile ein in Klammern gesetzter Ausdruck ist.</p>
<p>Behoben: Der Fast-Modus von PixelSearch wird AusgabeX/Y nur noch bei Erfolg setzen.</p>

<h2 id="v1.1.13.01">1.1.13.01 - 11. Oktober 2013</h2>
<p>Behoben: Variadische Funktionsaufrufe im Zusammenhang mit benannten Werten als Pflichtparameter.</p>

<h2 id="v1.1.13.00">1.1.13.00 - 27. August 2013</h2>
<p>Hinzugefügt: <a href="commands/StrSplit.htm">StrSplit()</a> von v2 alpha.</p>

<h2 id="v1.1.12.00">1.1.12.00 - 14. August 2013</h2>
<p>Hinzugefügt: Optionale Parameter können nun durch Angabe von zwei aufeinanderfolgenden Kommas weggelassen werden, wie z. B. in <code>InStr(a, b,, 2)</code>. Im Gegensatz zu früheren Versionen funktioniert diese Vorgehensweise auch für Objekte (inklusive COM-Objekte) und interne Funktionen. <code>[a,,b]</code> kann genutzt werden, um ein lückenhaftes Array zu erzeugen.</p>
<p>Hinzugefügt: Objekteigenschaften können nun mithilfe der variadischen Syntax gesetzt werden, wie z. B. in <code>x[y*]:=z</code>, wo y ein Array mit Schlüsseln/Indizes oder Parametern enthält.</p>

<h2 id="v1.1.11.02">1.1.11.02 - 28. Juli 2013</h2>
<p>Behoben: GuiControl/Get akzeptiert nun die ClassNN-Bezeichnung des untergeordneten Eingabefeldes einer ComboBox. Zur Identifizierung der ComboBox konnte man bereits die HWND-Nummer des entsprechenden Eingabefeldes angeben.</p>

<h2 id="v1.1.11.01">1.1.11.01 - 25. Juni 2013</h2>
<p>Behoben: Vordefinierte Breite und Höhe der InputBox wiederhergestellt (fehlerhaft seit v1.1.11.00 - Commit <a href="https://github.com/Lexikos/AutoHotkey_L/commit/7373cc6443">7373cc6443</a>).</p>
<p>Behoben: Die DllCall-Argumenttypenvalidierung behandelt SYM_OBJECT nun zuverlässig, und berücksichtigt #Warn UseUnset (wenn ein Variablenname ein ungültiger Typ ist).</p>
<p>Geändert: VarSetCapacity(var) wird nicht mehr vor nicht-initialisierten Variablen warnen.</p>

<h2 id="v1.1.11.00">1.1.11.00 - 21. Juni 2013</h2>
<p>Hinzugefügt: Unterstützung für <code>%A_LineFile%</code> in <a href="commands/_Include.htm">#Include</a>.</p>
<p>Geändert: Die Dateigröße von AutoHotkeySC.bin wurde durch Verringern der Auflösung des (selten verwendeten) Dateitypsymbols reduziert.</p>
<p>Behoben: <code>class X extends Y</code> wurde behoben, damit Y nach X definiert werden kann.</p>
<p>Entwickelt von fincs: AutoHotkey richtet sich nun nach der DPI. Die Gui-Befehle passen sich automatisch an, falls die DPI ungleich 96 ist. Siehe <a href="commands/Gui.htm#DPIScale">Gui -DPIScale</a>.</p>
<h2 id="v1.1.10.01">1.1.10.01 - 17. Mai 2013</h2>
<p>Geändert: RegRead wurde verbessert, um REG_BINARY-Werte größer als 64 KB zu unterstützen.</p>
<p>Geändert: RegWrite wurde verbessert, um REG_BINARY/REG_MULTI_SZ-Werte größer als 64 KB zu unterstützen.</p>
<p>Behoben: Process Close (und möglicherweise andere Dinge) in Windows XP.</p>

<h2 id="v1.1.10.00">1.1.10.00 - 11. Mai 2013</h2>
<p>Hinzugefügt: Grundlegende Unterstützung für <a href="commands/GuiControls.htm#Custom">Custom-Steuerelemente</a>.</p>
<p>Geändert: <a href="commands/SoundSet.htm">SoundSet</a>, <a href="commands/SoundGet.htm">SoundGet</a> und ...WaveVolume-Befehle wurden überarbeitet, um eine bessere Unterstützung für Windows Vista und höher zu gewährleisten.</p>
<p>Behoben: <code>Run "&lt;Datei&gt;" &lt;Parameter&gt;</code> übergibt das Leerzeichen nicht länger als Teil des Parameters.</p>
<p>Behoben: Einige Probleme beim Lesen der Konsoleneingabe (CONIN$).</p>

<h2 id="v1.1.09.04">1.1.09.04 - 14. März 2013</h2>
<p>Behoben: GUI-Menü-Accelerator-Keys funktionierten nicht, wenn die GUI selbst (nicht ein Steuerelement) den Fokus hatte.</p>

<h2 id="v1.1.09.03">1.1.09.03 - 9. Februar 2013</h2>
<p>Behoben: <a href="https://www.autohotkey.com/board/index.php?showtopic=89624">Zwei Bugs</a>, die sich auf Zuweisungen auswirkten, deren Zielvariable eine nicht geflushte Binärzahl enthält, aber eine Kapazität von 0 hat.</p>
<p>Behoben: GuiControl und GuiControlGet haben mit dem falschen Steuerelement agiert, wenn eine HWND-Nummer angegeben wurde, die nicht zur aktuellen GUI gehört. Stattdessen wird der Zustand als Fehler behandelt.</p>
<p>Behoben: OnMessage-Funktionen setzen A_Gui und A_GuiControl nun korrekt, wenn die Ziel-GUI ein untergeordnetes Fenster ist.</p>

<h2 id="v1.1.09.02">1.1.09.02 - 24. Dezember 2012</h2>
<p>Behoben: MsgBox wird nun eine Fehlermeldung anzeigen, wenn ungültige Optionen angegeben sind, anstatt den kompletten Thread stillschweigend zu beenden.</p>
<p>Behoben: Syntaxfehler in Klassenvariableninitialisierern haben dazu geführt, dass das Programm ohne korrekte Fehlermeldung abstürzte.</p>

<h2 id="v1.1.09.01">1.1.09.01 - 15. Dezember 2012</h2>
<p>Behoben: AND/OR nach einer Mehrfachanweisung wie <code>((x, y) and z)</code>.</p>
<p>Behoben: RegExReplace kann nun korrekt mit doppelt vorhandenen Teilsuchmusternamen umgehen.</p>
<p>Behoben: Objekt.Remove() hat Zeichenketten-Schlüssel nicht freigegeben.</p>
<p>Behoben: base.Invoke() ist nicht mehr von der dynamischen Variablenauflösung abhängig.</p>

<h2 id="v1.1.09.00">1.1.09.00 - 7. November 2012</h2>

<p><strong>Gravierende Änderungen:</strong></p>
<p><a href="misc/AutoIt2Compat.htm">.aut-Datei-Kompatibilität</a> und #AllowSameLineComments entfernt.</p>
<p>Undokumentierte AutoIt-v2-Befehle entfernt.</p>

<p><strong>Abwärtskompatible Änderungen:</strong></p>
<p>Optionale Parameter können nun mit <code>:=</code> statt <code>=</code> deklariert werden, um mit Variablendeklarationen und Ausdrücken gleichzuziehen.</p>
<p>ASCII-fremde Zeichen sind in anführungszeichenlosen Schlüsseln (<code>{<b>Schlüssel</b>: x}</code> und <code>obj.<b>Schlüssel</b></code>) nun erlaubt.</p>
<p>"AutoHotkey_L" in der Versionsinfo zu "AutoHotkey" geändert.</p>

<p><strong>Fehlerbehebungen:</strong></p>
<p>Fehler behoben, dass Warndialogfenster, die während der Evaluation von Befehlsparametern erschienen, zur Instabilität des Programms führten.</p>
<p>Fehler behoben, dass der Fast-Modus von PixelSearch "nicht gefunden" als Fehler behandelt hat.</p>
<p>ahk_exe erlaubt nun nachfolgende ahk_-Kriterien.</p>
<p>Fehler behoben, dass <code>else continue 2</code> und ähnliches geschweifte Klammern um die Schleife herum erforderten.</p>
<p>Fehler behoben, dass RegRead Misserfolg nach erfolgreichem Einlesen von Binärdaten gemeldet hat.</p>
<p><code>File.Length</code> wird nun alle gepufferten Daten kompensieren oder flushen.</p>
<p>Die automatische Größenanpassung einer GUI berücksichtigt nun Scrollbalken, sofern vorhanden.</p>

<p><strong>Debugger:</strong></p>
<p>Unterstützung für asynchrone Befehle hinzugefügt.</p>
<p>Handhabung von Haltepunkten auf Zeilen wie <code>else foo()</code> oder <code>{ bar()</code> verbessert, so dass der Debugger dort halten kann.</p>
<p>Codegröße optimiert, einige Bugs behoben und den Debugger generell robuster gemacht.</p>


<h2 id="v1.1.08.01">1.1.08.01 - 3. August 2012</h2>
<p>Debugger: Fehler behoben, dass max_depth nur halb oder überhaupt nicht limitiert war.</p>

<h2 id="v1.1.08.00">1.1.08.00 - 14. Juli 2012</h2>

<p><strong>Gravierende Änderungen:</strong></p>
<p>Der Standardzeichensatz des Skripts ist nun ANSI, da das vorherige Verhalten ein häufiger Anlass zu Verwirrung war. UTF-8-Dateien müssen nun über eine Byte-Order-Markierung (BOM) verfügen, um korrekt erkannt zu werden. Der Windows-Editor fügt eine BOM zu jeder Datei hinzu, die als UTF-8 gespeichert wird.</p>
<p><code>return x</code> wurde geändert, um die Formatierung von numerischen Zeichenketten beizubehalten; es ist nun äquivalent zu <code>return (x)</code>.</p>
<p><code>Gui, Name: New</code> wurde geändert, um die neue GUI als Standard-GUI-Fenster zu setzen.</p>

<p><strong>Sonstige Änderungen:</strong></p>
<p>ClipboardAll wurde geändert, um CF_UNICODETEXT gegenüber anderen Textformaten zu bevorzugen.</p>
<p>Gui Show wurde geändert, um Floating-Point-Zahlen zu erlauben.</p>
<p>A_OSVersion wird in Windows 8 nun WIN_8 zurückgeben.</p>
<p>Die Dateibeschreibung von AutoHotkey.exe lautet nun "ANSI/Unicode 32/64-bit".</p>
<p>Der Parser wurde geändert, um Zeilen wie <code>new MeinObjekt()</code> ohne Zuweisung zu erlauben.</p>
<p>PCRE wurde auf 8.30 aktualisiert.</p>
<p>Die Formulierungen einiger <a href="commands/_Warn.htm">Warnungen</a> wurden verbessert; der untere Bereich des Warndialogfensters verweist nun auf die Dokumentation.</p>
<p>Verbesserungen am Debugger:</p>
<ul>
  <li>Einfache Unterstützung zum Inspizieren von Func-, ComObject- und RegExMatchObject-Objekten hinzugefügt.</li>
  <li>Die Attach-Debugger-Meldung wurde in einigen Situationen ignoriert. Siehe Commit <a href="https://github.com/Lexikos/AutoHotkey_L/commit/83f0a0e39a0f69fc8861f8c4234690557c4ab347">83f0a0e</a>.</li>
</ul>

<p><strong>Neue Features:</strong></p>
<p>Unterstützung für das PCRE-Konstrukt <code>(*MARK:NAME)</code> via <code>RegExMatchObject.Mark</code> hinzugefügt.</p>
<p>Unterstützung von Zuweisungen wie <code>classvar.x := y</code> in Klassendefinitionen hinzugefügt (nach dem Deklarieren von <em>classvar</em>).</p>
<p><a href="Variables.htm#Is64bitOS">A_Is64bitOS</a> hinzugefügt.</p>
<p><a href="commands/SetRegView.htm">SetRegView</a> und <a href="Variables.htm#RegView">A_RegView</a> hinzugefügt.</p>

<p><strong>Fehlerbehebungen:</strong></p>
<p><code>Func.()</code> wird nun den Funktionsaufruf überspringen, wenn Pflichtparameter weggelassen werden, anstatt den kompletten Thread stillschweigend zu beenden.</p>
<p>Fehler behoben, dass <code>Objekt.Remove()</code> die Objekt-Schlüssel nicht freigegeben hat.</p>
<p>Taste-Unten/Oben-Hotkey-Paare unterdrücken die Eingabe nun korrekt, wenn nur ein Hotkey des Paares aktiviert ist.</p>
<p><code>#Include &lt;Bibl&gt;</code> beeinflusst nicht mehr das von nachfolgenden #Include-Direktiven verwendete Arbeitsverzeichnis.</p>
<p><code>objaddref()</code> agiert nicht mehr wie <code>ObjRelease()</code>, wenn diese Funktion mit einem kleingeschriebenen 'a' aufgerufen wird.</p>
<p>A_AhkPath in 32-Bit-kompilierten Skripten erkennt nun 64-Bit-AutoHotkey-Installationen und umgekehrt.</p>
<p>Fehler behoben, dass TreeView-Steuerelemente mit der <code>-Background</code>-Option in älteren Betriebssystemen falsch gerendert wurden.</p>
<p>Fehlermeldungen, die bei der Ausführung von While/Until angezeigt werden, identifizieren nun korrekt die fehlerhafte Zeile.</p>

<h2 id="v1.1.07.03">1.1.07.03 - 25. März 2012</h2>
<p>Behoben: STRG/ALT/UMSCHALT-Taste-Unten-Hotkeys führen nicht mehr dazu, dass zuvor definierte Taste-Oben-Hotkeys desselben Modifikators unwirksam gemacht werden.</p>
<p>Behoben: Taste-Unten-Hotkeys verwenden nun immer den Hook, wenn sie nach einem Taste-Oben-Hotkey derselben Taste definiert werden. Wenn der Taste-Unten-Hotkey die Methode "reg" verwendet, wird der Hook das Taste-Unten-Ereignis blockieren und nur den Taste-Oben-Hotkey auslösen.</p>
<p>Behoben: Ladezeitüberprüfungen werden Ausdrücke ohne Derefenzierungen nicht mehr als rohen Text interpretieren. Zum Beispiel wurde <code>Gosub % "foo"</code> beim Laden des Skripts in <code>"foo":</code> aufgelöst. Ebenso wurde <code>% ""</code> in verschiedenen Fällen als ungültig angesehen, selbst wenn laut Definition eine leere Zeichenkette möglich war.</p>

<h2 id="v1.1.07.02">1.1.07.02 - 22. März 2012</h2>
<p>Behoben: Ein seltener Absturz, der auftreten konnte, wenn GetClipboardData() fehlschlug.</p>
<p>Behoben: ComObjArray() wird bei Misserfolg nun eine leere Zeichenkette anstelle eines willkürlichen Integers zurückgeben.</p>
<p>Behoben: <code>Objekt.Remove(i, "")</code> hatte Auswirkung auf Integer-Schlüssel, wenn <code>!Objekt.HasKey(i)</code>.</p>

<h2 id="v1.1.07.01">1.1.07.01 - 2. März 2012</h2>
<p>Behoben: FileRead ignoriert nun #MaxMem beim Lesen von UTF-16 in Unicode-Versionen.</p>
<p>Behoben: Dynamische Funktionsaufrufe funktionieren nun mit internen Variablen wie z. B. <code>%A_ThisLabel%()</code>.</p>

<h2 id="v1.1.07.00">1.1.07.00 - 27. Februar 2012</h2>
<p>Geändert: <code><a href="Functions.htm#DynCall">%var%()</a></code> wurde verbessert, um <a href="objects/Functor.htm">Funktionsobjekte</a> und die <a href="Objects.htm#Default_Base_Object">Standard-__Call-Metafunktion</a> zu unterstützen.</p>
<p>Behoben: <a href="commands/ControlGet.htm#List">ControlGet List</a> funktioniert nun mit einer ListView in Fällen, wo das Skript im 32-Bit-Format und der Zielprozess im 64-Bit-Format sind und umgekehrt.</p>
<p>Behoben: <a href="commands/Send.htm#SendEvent">SendEvent</a> funktioniert nun mit einer Tastenverzögerung von 0; eine mit v1.1.05.04 eingeführte Änderung führte dazu, dass SendEvent langsamer als gedacht war.</p>
<p>Behoben: <a href="objects/Object.htm#Remove">Objekt.Remove(i)</a> hat die Schlüssel nicht angepasst, wenn Objekt[i] nicht existierte.</p>
<p>Behoben: <a href="commands/ComObjType.htm">ComObjType()</a> verhält sich nun wie vorgesehen, wenn diese Funktion über einen <a href="commands/ComObjActive.htm#Remarks">alternativen Namen</a> aufgerufen wird.</p>
<p>Behoben: <a href="commands/ExitApp.htm">ExitApp</a> beendet nun den Thread, wenn die Terminierung des Skripts von einer <a href="commands/OnExit.htm#command">OnExit</a>-Subroutine verhindert wird, anstatt die Ausführung nach dem <a href="commands/Block.htm">Block</a>, der ExitApp enthält, fortzusetzen.</p>
<p>Behoben: Ein Funktionsaufruf über ein Objekt verhindert nicht länger, dass der Thread beendet werden kann. Dies hat zur Folge, dass wenn innerhalb einer <a href="Objects.htm#Custom_Classes_method">Klassenmethode</a> <a href="commands/Exit.htm">Exit</a> verwendet wird oder ein Laufzeitfehler auftritt, nicht nur die Funktion, sondern der komplette Thread beendet wird.</p>
<p>Behoben: Der Aufruf einer Basisklassenmethode über <a href="Objects.htm#Custom_Classes_base">base.Methode()</a> oder ähnlichem innerhalb einer Klassendefinition bewirkt nicht länger, dass eine <a href="commands/_Warn.htm">UseUnset</a>-Warnung angezeigt wird, wenn die Methode nicht existiert. Folglich bewirkt die Instanziierung eines Objekts mit <a href="Objects.htm#Custom_Classes_var">Instanzvariablen</a> nicht länger, dass eine Warnung bezüglich der internen Methode <code>base.__Init</code> angezeigt wird, wenn die Basisklasse keine Instanzvariablen hat.</p>

<h2 id="v1.1.06.02">1.1.06.02 - 13. Februar 2012</h2>
<p>Behoben: IniRead wird nicht mehr abstürzen, wenn der Schlüssel-Parameter verwendet und der Sektion-Parameter weggelassen wird.</p>
<p>Behoben: Genauigkeit von FileGetSize im Zusammenhang mit Dateien korrigiert, die 4 GB oder größer sind.</p>

<h2 id="v1.1.06.01">1.1.06.01 - 12. Februar 2012</h2>
<p>Behoben: Die intelligente Kommahandhabung des MsgBox-Befehls benötigt einen numerischen Optionen-Parameter, nicht den Titel-Parameter.</p>

<h2 id="v1.1.06.00">1.1.06.00 - 12. Februar 2012</h2>
<p><strong>Neue Features:</strong></p>
<p><a href="commands/_InputLevel.htm">#InputLevel</a>-Direktive und <a href="commands/SendLevel.htm">SendLevel</a>-Befehl integriert (<a href="https://github.com/Lexikos/AutoHotkey_L/pull/7">entwickelt von Russell Davis</a>).</p>
<p>Unterstützung für <a href="commands/GuiControls.htm#Link">Link</a>-Steuerelemente integriert (<a href="https://github.com/Lexikos/AutoHotkey_L/pull/9">entwickelt von ChrisS85</a>).</p>
<p><strong>Gravierende Änderungen:</strong></p>
<p>Der Befehlsparser wurde geändert, um zu verhindern, dass escapezeichenversehene Zeichen wie <code>`t</code> oder <code>`&nbsp;</code> am Anfang oder Ende eines Parameters entfernt werden.</p>
<p>Die intelligente Kommahandhabung des <a href="commands/MsgBox.htm">MsgBox</a>-Befehls wurde geändert, um ihn flexibler und konsistenter mit anderen Befehlen zu machen.</p>
<ul>
  <li><code>%</code> kann nun genutzt werden, um für die Parameter Optionen und Zeitlimit einen Ausdruck anzugeben.</li>
  <li>Wenn der erste Parameter ein Ausdruck ist, bewirken escapezeichenlose Kommas, die nicht mit Anführungszeichen oder geschweiften/eckigen/runden Klammern umschlossen sind, dass der Mehrfachparametermodus verwendet wird. Bisher wurden solche Kommas innerhalb des ersten Parameters (Text) im Einzelparametermodus als Mehrfachanweisungsoperator interpretiert.</li>
  <li>Wenn der Titel-Parameter ein Ausdruck ist, sind escapezeichenlose Kommas innerhalb des Ausdrucks nicht mehr in der Lage, die intelligente Kommahandhabung zu stören.</li>
  <li>Wenn exakt zwei Parameter vorhanden sind und der erste Parameter leer oder ein Integer ist, wird der Mehrfachparametermodus verwendet. Bisher wurden beide Parameter zu einem einzelnen Parameter (Text) zusammengeführt.</li>
  <li>Der Zeitlimit-Parameter kann eine direkt geschriebene Zahl oder eine einzelne Derefenzierung sein (und optional ein Teil einer Zahl; zum Beispiel <code>%Zeitlimit%.500</code>). Bisher wurden, anders als dokumentiert, die meisten Fälle, die mit <code>%</code> beginnen, als Ausdrücke (mit einer Doppeldereferenzierung) interpretiert.</li>
  <li>Der Titel-Parameter kann ein Ausdruck sein, selbst wenn die Parameter Text und Optionen weggelassen werden.</li>
</ul>
<p>A_IsUnicode und A_IsCompiled sind in ANSI-Versionen bzw. unkompilierten Skripten nicht mehr undefiniert, sondern enthalten eine leere Zeichenkette. Dadurch können sie ohne Auslösen von <a href="commands/_Warn.htm">#Warn</a>-Warnungen geprüft werden. Nebeneffekte sind:</p>
<ul>
  <li>Der Versuch, A_IsCompiled oder A_IsUnicode etwas direkt zuzuweisen, erzeugt immer einen Ladezeitfehler. Dynamische Zuweisungen schlagen immer fehl, je nach Situation entweder stillschweigend oder über ein Fehlerdialogfenster. Bisher waren solche Zuweisungen in unkompilierten/Unicode-fremden Skripten erlaubt.</li>
  <li>Der Versuch, die Adresse von A_IsCompiled oder A_IsUnicode zu verwenden, wird immer fehlschlagen.</li>
  <li>A_IsCompiled und A_IsUnicode erscheinen nicht länger in ListVars, wenn sie von einem unkompilierten bzw. Unicode-fremden Skript verwendet werden.</li>
</ul>
<p><a href="commands/Send.htm">Send</a> und verwandte Befehle respektieren nun <a href="commands/_MenuMaskKey.htm">#MenuMaskKey</a> beim Ändern von Modifikatortastenzuständen.</p>
<p><strong>Sonstige Änderungen:</strong></p>
<p><a href="commands/GuiControl.htm#Choose">GuiControl Choose</a> wird nun alle ausgewählten Listeneinträge einer ListBox/ComboBox/DDL abwählen, wenn N=0.</p>
<p><a href="commands/RegisterCallback.htm">RegisterCallback</a> kann nun anstelle eines Namens ein <a href="objects/Func.htm">Func-Objekt</a> verwenden.</p>
<p><a href="commands/ListLines.htm">ListLines</a> zeigt nun Dateinamen an (nur bei einem unkompilierten Skript).</p>
<p><a href="commands/Run.htm">Run</a> wurde verbessert, um im Zusammenhang mit ShellExecuteEx eine Prozess-ID zurückzugeben, wenn möglich.</p>
<p><strong>Fehlerbehebungen:</strong></p>
<p>Handle-Leaks in RegRead behoben.</p>
<p><code>x.y++</code> und ähnliches weist nun eine leere Zeichenkette zu, wenn x.y nicht-numerisch ist.</p>
<p>Fehler behoben, dass die WIN+L-Übergangslösung von SendInput dazu führte, dass die WIN-Taste im gedrückten Zustand "hängen blieb".</p>
<p>Fehler behoben, dass Ahk2Exe automatisch die falsche Datei eingebunden hat, wenn eine automatische Einbindung über <a href="commands/_Include.htm">#Include &lt;Bibl&gt;</a> erfolgte.</p>

<h2 id="v1.1.05.06">1.1.05.06 - 31. Dezember 2011</h2>
<p>Behoben: Inkrement (++) und Dekrement (--) haben keinen Effekt, wenn sie mit Objektelementen verwendet werden, die Zeichenketten enthalten.</p>
<p>Behoben: Inkrement (++) und Dekrement (--) zeigen eine Warnmeldung an, wenn sie mit nicht-initialisierten Variablen verwendet werden.</p>

<h2 id="v1.1.05.05">1.1.05.05 - 17. Dezember 2011</h2>
<p>Behoben: <code>continue <i>n</i></code> verhält sich nun korrekt, wenn eine innere Schleife keine geschweiften Klammern nutzt.</p>
<p>Behoben: <code>RegExMatchObject[Name]</code> funktioniert nun korrekt mit doppelt vorhandenen Namen.</p>

<h2 id="v1.1.05.04">1.1.05.04 - 5. Dezember 2011</h2>
<p>Behoben: Der Selected-Unterbefehl von ControlGet war in der x64-Version unzuverlässig.</p>
<p>Behoben: CPU wird nicht mehr voll ausgelastet, wenn ein darunterliegender Thread ein modales Dialogfenster anzeigt (und wahrscheinlich auch in anderen Fällen).</p>

<h2 id="v1.1.05.03">1.1.05.03 - 30. November 2011</h2>
<p>Behoben: <code>Loop ... Until VarMitObjekt</code>.</p>

<h2 id="v1.1.05.02">1.1.05.02 - 20. November 2011</h2>
<p>Behoben: Beim Laden eines kompilierten Skripts wurde das EOF (End of File) in einigen Fällen falsch erkannt.</p>
<p>Behoben: SendInput wird Modifikatortasten beim Senden von Sonderzeichen oder {U+xxxx} automatisch loslassen (fehlerhaft seit v1.1.00.01).</p>
<p>Behoben: ComObjConnect wird Non-Dispatch-Schnittstellen herausfiltern, anstatt das Skript abstürzen zu lassen.</p>
<p>Behoben: <code>new %VarMitKlasseName%()</code>.</p>

<h2 id="v1.1.05.01">1.1.05.01 - 16. Oktober 2011</h2>
<p>Behoben: Klassendeklarationen erlauben nun Direktiven wie z. B. #Include.</p>

<h2 id="v1.1.05.00">1.1.05.00 - 8. Oktober 2011</h2>
<p>Hinzugefügt: Neuer Koordinatenmodus <a href="commands/CoordMode.htm">Client</a>.</p>
<p>Hinzugefügt: <a href="commands/RegExMatch.htm#ObjectMode">Objekt-Ausgabemodus</a> für RegExMatch und RegEx-Callouts.</p>
<p>Hinzugefügt: <a href="Functions.htm#SuperGlobal">Superglobale</a> Deklarationen, um zu verhindern, dass globale Deklarationen wiederholt durchgeführt werden müssen.</p>
<p><strong>Gravierende Änderung:</strong> Klassendeklarationen wie <code>class c</code> erzeugen nun eine superglobale anstelle einer gewöhnlichen globalen Variable.</p>
<p>Hinzugefügt: Es werden mehr Details im Fehlerdialogfenster bezüglich unbehandelter Ausnahmen angezeigt.</p>
<p>Geändert: <code><a href="commands/Gui.htm#Owner">Gui +Owner</a></code> wurde angepasst, damit es auch nach Erstellung der GUI funktioniert.</p>
<p>Geändert: Instanzvariablendeklarationen in Klassendefinitionen wurden angepasst, um zu vermeiden, dass leere Schlüssel-Wert-Paare im Klassenobjekt verbleiben.</p>
<p>Geändert: Bei Misserfolg verwendet #Include nun das Standardfehlermeldungsformat (mehr Details; berücksichtigt auch ErrorStdOut).</p>
<p>Geändert: <a href="commands/Throw.htm">Throw</a> ohne Parameter löst nun standardmäßig ein Exception-Objekt aus.</p>
<p>Geändert: Format von Laufzeitfehlermeldungen wurde etwas angepasst, um die Konsistenz zu erhöhen und Codegröße zu verringern.</p>
<p>Geändert: PCRE verwendet in Unicode-Versionen nun UTF-16 für eingehende Zeichenketten, um die Leistung zu erhöhen.</p>
<p>Geändert: PCRE auf 8.13 aktualisiert.</p>
<p>Behoben: Threads wurden nicht wie vorgesehen beendet, wenn eine Zuweisung in einem Ausdruck fehlschlug.</p>
<p>Behoben: #MaxMem hat verhindert, dass man Variablen, die keine Erweiterung erfordern, etwas zuweisen kann.</p>
<p>Behoben: Try/Catch konnte keine COM-Fehler abfangen.</p>
<p>Behoben: GuiControlGet hat Parameter #2 in einigen Fällen fälschlicherweise als ungültig angesehen.</p>
<p>Behoben: Eingabevariablen wurden zu früh aufgelöst, was dazu führte, dass sie später von einem anderen Ausdruck auf derselben Zeile ungültig gemacht wurden.</p>
<p>Behoben: RegEx-Callouts führten dazu, dass die Übereinstimmungssuche abgebrochen wurde, wenn eine Ausnahme ausgelöst wurde.</p>
<p>Behoben: DllCall hat ErrorLevel auf -4 statt -3 gesetzt.</p>
<p>Behoben: While erschien beim ersten Durchlauf zweimal in ListLines.</p>
<p>Behoben: Bei Try/Catch kann nun If/Loop/For/While ohne umschließenden Block verwendet werden.</p>
<p>Behoben: Enumerator-Objekte wurden nicht freigegeben, wenn Until zum Unterbrechen einer For-Schleife verwendet wurde.</p>

<h2 id="v1.1.04.01">1.1.04.01 - 15. September 2011</h2>
<p>Behoben: FileRemoveDir hat ErrorLevel nicht korrekt gesetzt.</p>

<h2 id="v1.1.04.00">1.1.04.00 - 11. September 2011</h2>
<p class="warning"><strong>Warnung</strong>: Diese Version enthält eine Vielzahl von Änderungen, die die Funktionsweise eines Skripts unerwartet ändern können.</p>
<p>Hinzugefügt: Ausnahmebehandlung via <a href="commands/Try.htm">Try</a>/<a href="commands/Catch.htm">Catch</a>/<a href="commands/Throw.htm">Throw</a> und <a href="commands/Throw.htm#Exception">Exception()</a>.</p>
<p>Hinzugefügt: StdOut-Modus für <a href="commands/_Warn.htm">#Warn</a>.</p>
<p>Hinzugefügt: Option <a href="commands/Gui.htm#GuiHwndOutputVar">Gui +HwndVARNAME</a>.</p>
<p>Hinzugefügt: <a href="commands/Gui.htm#New">Gui, New [, Optionen, Titel]</a>.</p>
<p>Hinzugefügt: Automatische Unterstützung für Keyboard Accelerators (z. B. CTRL+O) in <a href="commands/Gui.htm#Menu">Gui-Menüs</a>.</p>
<p>Geändert: Die Handhabung von <code>#Include &lt;Bibl&gt;</code> im Zusammenhang mit der Befehlszeilenoption "/iLib", um ein <a href="https://github.com/fincs/Ahk2Exe/issues/4">Problem</a> bei Ahk2Exe zu lösen.</p>
<p>Geändert: GuiControl wird den aktuellen Wert des Progress-Steuerelements nun beibehalten, wenn dessen Style geändert wird.</p>
<p>Geändert: GuiControl und GuiControlGet erlauben eine HWND-Nummer im <em>SteuerelementID</em>-Parameter.</p>
<p>Geändert: Die 1GB-Einschränkung von FileRead wurde entfernt.</p>
<p>Fehlererkennung verbessert:</p>
<ul>
  <li><code>Hotkey, If, <i>Ausdruck</i></code> wird, wenn <i>Ausdruck</i> noch nicht als #If-Ausdruck vorhanden ist, beim Laden des Skripts abgefangen, falls möglich.</li>
  <li>Schreibweisen wie <code>Hotkey, If<i>Irgendetwas</i></code> werden, wenn <i>Irgendetwas</i> ungültig ist, beim Laden des Skripts abgefangen.</li>
  <li>Klassendefinitionen ohne geschweifte Klammern werden als Fehler erkannt.</li>
  <li>Ein Funktionsaufruf in der ersten Zeile einer Klassendefinition wird nun korrekt als Fehler behandelt.</li>
  <li>GroupAdd zeigt nun eine Fehlermeldung an, wenn der Gruppenname leer ist, anstatt den kompletten Thread stillschweigend zu beenden.</li>
  <li>Es wurden einige überflüssige "unset var"-Warnungen entfernt, die beim Verwenden des OutputDebug- oder StdOut-Warnungsmodus erschienen.</li>
  <li>Wenn eine unbekannte Option bei <a href="commands/Gui.htm#Options">Gui</a>, <a href="commands/Gui.htm#Show">Gui Show</a>, <a href="commands/Gui.htm#New">Gui New</a> oder <a href="commands/GuiControl.htm">GuiControl</a> verwendet wird, wird eine Fehlermeldung angezeigt und der Thread beendet, es sei denn, <a href="commands/Try.htm">Try</a> wird verwendet. Diese Gültigkeitsprüfung wird aufgrund der Komplexität nicht beim Laden des Skripts durchgeführt (es ist üblich, dass die Optionsparameter Variablenreferenzen enthalten).</li>
  <li>RegRead, RegWrite und RegDelete setzen A_LastError nun auf das Ergebnis der Systemfunktion GetLastError().</li>
  <li><a href="commands/Gui.htm#LastFoundExist">+LastFoundExist</a> wird nun als Fehler behandelt, wenn es mit anderen Optionen kombiniert wird (in diesem Fall sollte <a href="commands/Gui.htm#LastFound">+LastFound</a> verwendet werden).</li>
</ul>
<p>Behoben: Es wurde ein <a href="https://www.autohotkey.com/forum/topic76133.html">Bug</a> im Zusammenhang mit rekursiven variadischen Funktionen behoben.</p>

<h2 id="v1.1.03.00">1.1.03.00 - 28. August 2011</h2>
<p>Hinzugefügt: Unterstützung für GUI-Namen.</p>
<p>Hinzugefügt: GUI-Fenster können nun via HWND-Nummer identifiziert werden.</p>
<p>Hinzugefügt: Gui-Option <code>+Parent%ParentGui%</code>.</p>
<p>Hinzugefügt: GUI-Fenster können mithilfe von <code>+Owner%HWND%</code> einem externen Fenster zugeordnet werden.</p>
<p>Hinzugefügt: Unterbefehl "Name" für GuiControlGet.</p>
<p>Hinzugefügt: Unterstützung für ActiveX-Steuerelemente mithilfe des Gui-Befehls.</p>
<p>Behoben: Leeres Hotkey-Steuerelement hat "vk00" zurückgegeben.</p>
<p>Behoben: Abstürze und Speicherlecks in Bezug auf COM-Ereignisse/ComObjConnect.</p>
<p>Behoben: <code>GuiControlGet AusgabeVar, Unterbefehl, <b>%AusgabeVar%</b></code> schlug immer fehl.</p>
<p>Geändert: Fehlermeldung "Missing (/[/{" zu "Unexpected )/]/}" geändert, um Missverständnissen vorzubeugen.</p>
<p>Geändert: ListLines zeigt nun While- und Until-Zeilen an, die bei jedem Durchlauf ausgeführt werden.</p>
<p>Geändert: Der Operator ~= hat nun eine höhere Priorität als =/!=/&lt;/&gt;/&lt;=/&gt;=, aber eine niedrigere als Verkettung, außerdem wurde er zur Dokumentation hinzugefügt.</p>

<h2 id="v1.1.02.03">1.1.02.03 - 21. August 2011</h2>
<p>Behoben (Debugger): Das numChildren-Attribut hat Objekt.Base nicht mit einbezogen.</p>

<h2 id="v1.1.02.02">1.1.02.02 - 20. August 2011</h2>
<p>Behoben: Die Kapazität von Variablen wurde bei x64-Versionen auf 2 GB begrenzt.</p>
<p>Behoben: Das zuletzt gefundene Fenster wurde nicht von <code>#if WinExist(T)</code> gesetzt.</p>

<h2 id="v1.1.02.01">1.1.02.01 - 13. August 2011</h2>
<p>Geändert: A_PriorKey ignoriert nun die Up-Ereignisse der Tasten.</p>
<p>Behoben: Abrufen von Prozessnamen und -pfaden in bestimmten Fällen, einschließlich:</p>
<ul>
  <li>Name/Pfad eines 64-Bit-Prozesses von einem 32-Bit-Skript heraus abrufen.</li>
  <li>Name/Pfad eines höhergestellten Prozesses von einem nicht-höhergestellten Prozess (UAC) heraus abrufen.</li>
</ul>

<h2 id="v1.1.02.00">1.1.02.00 - 6. August 2011</h2>
<p>Hinzugefügt: TV_SetImageList().</p>
<p>Geändert: Zeichen, die die exotischen Umschaltzustände 16 und 32 erfordern, verwenden nun eine Fallback-Methode, anstatt die falschen Tastendrücke zu erzeugen.</p>
<p>Geändert: Die Handhabung von toten Tasten wurde überarbeitet, um Probleme zu lösen, die auftreten, wenn mehrere Skripte mit Hotstrings aktiv sind.</p>

<h2 id="v1.1.01.00">1.1.01.00 - 30. Juli 2011</h2>
<p>Hinzugefügt: Unterstützung für Instanzvariablen in Klassendefinitionen unter Verwendung einer einfachen Zuweisungssyntax.</p>
<p><b>Entfernt</b>: Das in Klassendefinitionen verwendete Schlüsselwort <code>var</code>; nutzen Sie stattdessen <code>static</code>.</p>
<p>Hinzugefügt: Neue interne Variablen: A_ScriptHwnd und A_PriorKey.</p>
<p>Hinzugefügt: Neue interne Funktionen: GetKeyName(), GetKeyVK(), GetKeySC() und IsByRef().</p>
<p>Hinzugefügt: Neuer Unterbefehl: WinGet, AusgabeVar, ProcessPath.</p>
<p>Hinzugefügt: Ein Fenster kann nun über dessen Prozessnamen oder -pfad identifiziert werden: <code>ahk_exe %Name%.exe</code> oder <code>ahk_exe %VollständigerPfad%</code>.</p>
<p>Geändert: ProcessName-Unterbefehl von WinGet wurde optimiert.</p>
<p>Geändert: SetTimer wird A_ThisLabel verwenden, wenn das Label weggelassen wird.</p>
<p>Geändert: ComObjConnect() wurde aktualisiert, um die Verwendung eines Objekts anstelle eines Funktionsnamenspräfixes zu unterstützen.</p>
<p>Geändert: ComObjConnect() wurde verbessert, so dass das Präfix/Objekt ohne Unterbrechung der Verbindung aktualisiert werden kann.</p>
<p>Geändert: Das Parsen von Fortsetzungsbereichen wurde verbessert, um Ausdrücke wie <code>(x.y)[z]()</code> zu ermöglichen, ohne dass "(" mit einem Escapezeichen versehen werden muss.</p>
<p>Geändert: Die Methode zum Speichern von Skripttext in 32-Bit kompilierten Skripten wurde ersetzt; jetzt konsistent mit 64-Bit.</p>
<p>Behoben: Die Erkennung von ALTGR im Tastaturlayout des aktiven Fensters (bei Unicode-Versionen).</p>
<p>Behoben: SendInput hat irgendwann ein überflüssiges LCTRL-UP nach einem ALTGR-UP durchgeführt.</p>



<h2 id="v1.1.00.01">1.1.00.01 - 17. Juli 2011</h2>
<p>Behoben: Modifikatortasten wurden beim Senden von Sonderzeichen nicht automatisch losgelassen.</p>
<p>Behoben: Konflikte beim Neubelegen mit Scancode/Modifikatortaste wie sc1xx anstelle von ^sc0xx.</p>
<p>Behoben: $ und #UseHook waren unwirksam, wenn sie nur bei der zweiten oder nachfolgenden Instanz(en) eines Hotkeys verwendet wurden.</p>
<p>Behoben: Potentieller Absturz bei der Rückgabe eines Werts von einer __Delete-Metafunktion.</p>
<p>Behoben: Warnungen "Nicht initialisierte Variable" wurden vom Debugger ausgelöst.</p>
<p>Geändert: <code>base.Methode()</code> löst nun nicht mehr eine Standard-Metafunktion oder eine Warnung aus.</p>
<p>Geändert: <code>Gui +(Ex)Style</code> versteckt/zeigt nicht länger das GUI-Fenster.</p>
<p>Geändert: Der Debugger meldet nun type="undefined" für nicht-initialisierte Variablen.</p>
<p>Hinzugefügt: Ab sofort erfolgt eine Überprüfung, um zu verhindern, dass für Zeichen, die die Hankaku-Taste benötigen, die falschen Tastendrücke gesendet werden.</p>
<p>Hinzugefügt: Ab sofort werden Integer als Klassenvariablennamen unterstützt.</p>
<p>Hinzugefügt: Ab sofort können Klassenvariablen mit dem Schlüsselwort "static" deklariert werden.</p>

<h2 id="v1.1.00.00">1.1.00.00 - 1. Mai 2011</h2>
<p><strong>Neue Features:</strong></p>
<p>Einfache <a href="Objects.htm#Custom_Classes">Syntax zum Definieren von Klassen</a> implementiert.</p>
<p>Schlüsselwort <code><a href="Objects.htm#Custom_NewDelete">new</a></code> zum Erstellen eines abgeleiteten Objekts implementiert.</p>
<p><a href="commands/Func.htm">Func()</a> zum Abrufen einer Referenz auf eine existierende Funktion hinzugefügt und <a href="commands/IsFunc.htm">IsFunc</a> zur Erkennung von <a href="Objects.htm#Function_References">Funktionsreferenzen</a> verbessert.</p>
<p><code>++</code> und <code>--</code> können nun mit Objektelementen verwendet werden, wie z. B. <code>x.y[z]++</code>.</p>

<p><strong>Änderungen:</strong></p>
<p>__Delete löst nicht mehr __Call aus.</p>
<p>OnClipboardChange wird AddClipboardFormatListener verwenden, falls verfügbar (also in Windows Vista oder höher), um die Zuverlässigkeit zu verbessern.</p>
<p>Autoverkettung mit <code>(</code> ist selektiver, dadurch werden einige ungültige Ausdrücke wie <code>12(34)</code> nicht länger funktionieren.</p>

<p><strong>Fehlerbehebungen:</strong></p>
<p><code>SetTimer Label, -0</code> wird nun als "einmal ausführen, so früh wie möglich" behandelt.</p>
<p>A_MyDocuments usw. verwendet nun SHGetFolderPath anstelle eines nicht dokumentierten Registry-Schlüssels.</p>
<p>Fehler behoben, dass ein nicht-leerer IgnoriereText-Parameter textlose Fenster ausgeschlossen hat.</p>

<h2 id="v1.0.97.02">1.0.97.02 - 14. April 2011</h2>
<p>Behoben: Ein Komma, das mit <code>{}</code> in einem Ausdruck umschlossen ist, wurde fälschlicherweise als Argument-Trennzeichen interpretiert.</p>
<p>Behoben: Die For-Schleife wird A_Index erst setzen, wenn das <i>Ausdruck</i>-Argument ausgewertet wurde, so dass der Wert der äußeren Schleife verwendet werden kann.</p>
<p>Behoben: Der Standort des Standardskripts basiert nun auf das Verzeichnis der aktuell verwendeten EXE-Datei (wie dokumentiert) und nicht auf das Arbeitsverzeichnis.</p>
<p>Geändert: Die Ladezeitvalidierung wurde verbessert, um ungültige Versuche zu erkennen, mit Goto aus einer Funktion "herauszuspringen".</p>

<h2 id="v1.0.97.01">1.0.97.01 - 2. April 2011</h2>
<p>Behoben: 64-Bit-Versionen werden HWND-Nummern oder SendMessage/PostMessage-Parameter nicht länger auf 32-Bit-Größe kürzen.</p>
<p>Behoben: <code>*/::</code> wurde als ungültiger Hotkey behandelt (fehlerhaft seit L54).</p>
<p>Behoben: Symbole.</p>
<h2 id="v1.0.97.00">1.0.97.00 - 28. März 2011</h2>
<p>Hinzugefügt: <code>{Schlüssel: Wert}</code> als alternative Schreibweise für <code>Object("Schlüssel", Wert)</code>.</p>
<p>Hinzugefügt: <code>[x, y, z]</code> als alternative Schreibweise für <code>Array(x, y, z)</code> (eine neue Funktion äquivalent zu <code>Object(1, x, 2, y, 3, z)</code>).</p>
<p>Hinzugefügt: Geringfügige Optimierung: Referenzen auf True, False, A_PtrSize oder A_IsUnicode innerhalb von Ausdrücken werden beim Laden des Skripts aufgelöst.</p>
<p>Behoben: Hotkey-Parser behandelt <code>x &amp; ^y</code> nun als Fehler, anstatt <code>^</code> zu ignorieren.</p>

<h2 id="v1.0.96.00">1.0.96.00 - 21. März 2011</h2>
<p><strong><b>Neue Features:</b></strong></p>
<p><a href="commands/ComObjQuery.htm">ComObjQuery</a>: Fordert ein Interface oder Service eines COM-Objekts an.</p>
<p><a href="commands/ComObjFlags.htm">ComObjFlags</a>: Ermittelt oder ändert Flags, die das Verhalten eines COM-Wrapper-Objekts kontrollieren.</p>
<p><a href="commands/ComObjCreate.htm">ComObjCreate</a> ermöglicht das Erstellen von Non-Dispatch-Objekten, wenn ein Interface-Identifikator (IID) angegeben ist.</p>
<p><a href="commands/ComObjArray.htm">COM-Arrays</a> unterstützen For-Schleifen und die Clone()-Methode.</p>
<p>ListVars zeigt neben der Wrapper-Adresse den inneren Variantentyp und Wert von jedem COM-Wrapper-Objekt an.</p>
<p><strong><b>Änderungen:</b></strong></p>
<p>Wenn ein direkt geschriebener Integer oder eine Variable, die eine numerische Zeichenkette und einen zwischengespeicherten binären Integer enthält, einem Objektelement zugewiesen wird, wird ein Integer anstelle einer Zeichenkette gespeichert. Dies kommt insbesondere einem Skript zugute, das COM-Methoden aufruft, die nur Integer als Parameter akzeptieren oder je nach Typ des Wertes ein anderes Verhalten aufweisen.</p>
<p>NULL-Werte können nun mit ComObjParameter für die Typen VT_UNKNOWN und VT_DISPATCH verwendet werden.</p>
<p>Verbesserte Unterstützung Common Language Runtime (.NET) Objekte via COM.</p>
<p>FileRecycle zeigt nun eine Warnmeldung an, wenn eine Datei gelöscht wird, die zu groß für den Papierkorb ist.</p>
<p>Wenn ein via ComObjArray erstelltes SafeArray einem Element eines anderen SafeArrays zugewiesen wird, wird eine separate Kopie erstellt. Dadurch wird verhindert, dass das Skript beim zweiten Versuch, das Array zu "zerstören", abstürzt. Mit ComObjFlags kann dieses Verhalten verhindert werden.</p>
<p><strong><b>Fehlerbehebungen:</b></strong></p>
<p>Bei dem Versuch, einem COM-Array des Typs VT_DISPATCH oder VT_UNKNOWN etwas zuzuweisen, stürzte das Skript ab.</p>
<p>Break und Pause wurden manchmal außerhalb von Schleifen toleriert.</p>
<p>Ein alleinstehendes CR-Zeichen (`r) wurde nicht korrekt als Zeilenende interpretiert.</p>
<p>MouseMove hat im SendInput- und SendEvent-Modus falsche negative Koordinaten berechnet.</p>
<p>Das Auswählen von <i>Edit This Script</i> im Tray-Menü oder Verwenden des Edit-Befehls führte zum Absturz des Skripts (fehlerhaft seit v1.0.95).</p>
<p>Fehlerdialogfenster verwiesen manchmal auf irrelevante Codezeilen.</p>

<h2 id="v1.0.95.00">1.0.95.00 - 12. März 2011</h2>
<p>Alle Datei-Eingaben/Ausgaben wurden stark optimiert.</p>
<p><a href="commands/_Warn.htm">#Warn</a> als zusätzliche Möglichkeit zum Debuggen des Skripts hinzugefügt; ursprüngliches Design von ac.</p>
<p>Standardmäßig wird <code>name_var.()</code>, wenn <i>name_var</i> einen Funktionsnamen enthält, die Funktion aufrufen. Dies kann wie gewohnt mithilfe des <a href="Objects.htm#Default_Base_Object">Standardbasisobjekts</a> überschrieben werden.</p>
<p>Run unterstützt nun Verben mit Parametern, wie z. B. <code>Run *RunAs %A_ScriptFullPath% /Param</code>.</p>
<p>Wenn nach einer direkt geschriebenen, in Anführungszeichen gesetzte Zeichenkette ein Operator erfolgt, der entweder einen Operanden (<code>&amp;x</code>) oder zwei <i>numerische</i> Operanden (<code>x &amp; y</code>) akzeptieren kann, wird eine Auto-Verkettung durchgeführt und der Operator nur für den rechten Operanden angewendet. Der Grund dafür ist, dass direkt geschriebene, in Anführungszeichen gesetzte Zeichenketten immer als nicht-numerisch angesehen werden und deshalb keine gültigen Eingabewerte für numerische Operatoren sind. Zum Beispiel funktionieren nun Ausdrücke wie <code>"x" &amp;y</code> und <code>"x" ++y</code>.</p>
<p><b>Behoben:</b></p>
<ul>
<li>Platzhalter-Hotkeys berücksichtigten in Einzelfällen keine Modifikatoren wie <code>^!+</code>.</li>
<li>File.Pos gab bei nicht-suchenden Dateitypen einen falschen Wert zurück; nun gibt es -1 zurück.</li>
<li>File.AtEOF gab in einigen Fällen fälschlicherweise 1 (true) zurück.</li>
<li>COM-Wrapper-Objekte ließen A_LastError in einigen Fällen ungesetzt.</li>
<li>GUI-Untermenü-Symbole funktionierten nicht in Windows 2000/XP/Server 2003.</li>
<li>SplashImage beschnitt das Bild, falls Höhe &gt; Breite war.</li>
<li>ComObjConnect zeigte keine Warnmeldung, wenn der erste Parameter ungültig war.</li>
<li>Aus Kompatibilitätsgründen verwendet SplashImage GDI+ nur noch, wenn die anderen Methoden fehlschlagen.</li>
<li>Das Tilde-Zeichen in <code>~x::</code> beeinflusst <code>x &amp; y::</code> nun auf die gleiche Weise wie <code>~x &amp; z::</code>, anstatt keinen Effekt zu haben.</li>
<li>A_PriorHotkey und A_TimeSincePriorHotkey haben jetzt die erwarteten Werte, wenn diese in Verbindung mit #If verwendet werden.</li>
<li>RegExReplace durchlief die Zeichenkette nach einem Übereinstimmungsfehler nicht richtig, wenn die Zeichenkette ASCII-fremde Zeichen enthält.</li>
</ul>
<h2 id="v1.0.92.02">1.0.92.02 - 19. Januar 2011</h2>
<p>Behoben: Es trat ein Speicherleck auf, wenn der Rückgabewert eines Objektaufrufs oder einer internen Funktion nicht verwendet wurde, also Zeilen wie <code>file.ReadLine()</code> oder <code>SubStr(x,y,z)</code>.</p>
<p>Behoben: Die Fehlerbehebung von v1.0.92.01 wurde verbessert, um zudem <code>k::MsgBox(),x:=y</code> zu beheben und <code>if()</code> wieder funktionsfähig zu machen.</p>
<h2 id="v1.0.92.01">1.0.92.01 - 18. Januar 2011</h2>
<p>Geändert: FileCreateDir setzt nun A_LastError.</p>
<p>Behoben: <code>GuiControl()</code> oder Ähnliches wurde manchmal fälschlicherweise als Befehl interpretiert.</p>

<h2 id="v1.0.92.00">1.0.92.00 - 13. Januar 2011</h2>
<p>Hinzugefügt: Verbundzuweisungen können nun mit Objekten verwendet werden, wie z. B. <code>x.y += z</code>.</p>
<p>Geändert: IniWrite wurde in Unicode-Versionen verbessert, um zu verhindern, dass eine leere Zeile am Anfang einer neuen Datei erscheint.</p>
<p>Geändert: Der Parser wurde verbessert, um toleranter hinsichtlich dessen zu sein, was nach <code>{</code>/<code>}</code>/<code>Else</code> erfolgt, besonders wenn diese kombiniert verwendet werden.</p>

<h2 id="v1.0.91.05">1.0.91.05 - 1. Januar 2011</h2>
<p>Behoben: Der Cleanup-Code in COM-Methode-Aufrufen gab die falschen Parameter frei.</p>
<p>Behoben (ANSI): DllCall setzte eine inkorrekte Länge für WStr-Parameter bei der Ausgabe.</p>
<p>Behoben: Variadische Funktionsaufrufe waren instabil, wenn das Parameterobjekt leer war.</p>

<h2 id="v1.0.91.04">1.0.91.04 - 29. Dezember 2010</h2>
<p>Behoben (Unicode): RegExReplace hat den gesamten Text bis zu StartPos weggelassen (fehlerhaft seit v1.0.90.00).</p>

<h2 id="v1.0.91.03">1.0.91.03 - 27. Dezember 2010</h2>
<p>Behoben: RegEx-Callout-Teilsuchmustervariablen - fehlerhaft seit v1.0.90.00.</p>

<h2 id="v1.0.91.02">1.0.91.02 - 26. Dezember 2010</h2>
<p>COM: Schutz gegen NULL-IDispatch/IUnknown-Pointer hinzugefügt.</p>
<p>COM: QueryInterface für IDispatch wird übersprungen, wenn VT_DISPATCH explizit übergeben wird.</p>
<p>Kleine Fehlerbehebung bezüglich der Wartbarkeit: <code>obj.field := var</code> liefert nun korrekt SYM_STRING, nicht SYM_OPERAND.</p>

<h2 id="v1.0.91.01">1.0.91.01 - 24. Dezember 2010</h2>
<p>Behoben: Unerwartete Ergebnisse mit <code>File.Write(Str)</code> nach Einlesen des Textes.</p>
<p>Behoben: Eine UTF-BOM-Überprüfung führte zu unerwarteten Ergebnissen bei Dateien ohne BOM.</p>
<p>Behoben (ANSI): Parsende Schleifen und <code>File.ReadLine()</code> behandelten <code>Chr(255)</code> als EOF.</p>
<p>Behoben (Unicode): RegExReplace-Fehler, bei denen die UTF-8- und UTF-16-Längen unterschiedlich waren.</p>
<p>Behoben: Die Deaktivierung des letzten Hook-Hotkeys störte Input.</p>
<p>Hinzugefügt: Einfache Optimierungen für RegExMatch/Replace.</p>

<h2 id="v1.0.91.00">1.0.91.00 - 21. Dezember 2010</h2>
<p><i>Alle Änderungen in dieser Version beziehen sich auf COM.</i></p>
<p>Hinzugefügt: <a href="commands/ComObjError.htm">ComObjError</a> gibt nun die vorherige Einstellung zurück.</p>
<p>Hinzugefügt: <a href="commands/ComObjType.htm">ComObjType(co)</a> und <a href="commands/ComObjValue.htm">ComObjValue(co)</a>.</p>
<p>Hinzugefügt: <a href="commands/ComObjActive.htm">ComObjMissing()</a>.</p>
<p>Hinzugefügt: <a href="commands/ComObjArray.htm">ComObjArray()</a> und einfache SAFEARRAY-Unterstützung.</p>
<p>Hinzugefügt: "Besitz ergreifen"-Parameter für <a href="commands/ComObjActive.htm">ComObjParameter()</a>.</p>
<p>Geändert: Werte, die via ComObjParameter an COM-Funktionen übergeben werden, werden nicht länger beim Aufruf der Funktion freigegeben.</p>
<p>Geändert: <code>ComObj.x()</code> greift nun auf PROPERTYGET zurück, wenn das Objektelement 'x' nicht gefunden wird. Dies behebt For-Schleifen-Fehler in Bezug auf einige Objekte.</p>
<p>Geändert: Unbehandelte Variantentypen werden in ein verwendbares Objekt umgewandelt, anstatt einen Integer-Wert zurückzugeben.</p>
<p>Geändert: Standardmäßig wird die Lebensdauer von VT_UNKNOWN / VT_ARRAY automatisch verwaltet.</p>

<h2 id="v1.0.90.00">1.0.90.00 - 27. November 2010</h2>
<p>Behoben: URLDownloadToFile funktioniert nun korrekt in Unicode-Versionen unter Windows &lt; 7.</p>
<p>Behoben: ANSI-Großbuchstaben wurden in der ANSI-Version als ALT+0 gesendet.</p>
<p>Behoben: File.Pos war inkorrekt, nachdem versucht wurde, über EOF hinaus zu lesen.</p>
<p>Behoben: Escapesequenzen in #If-Ausdrücken und statischen Initialisierungen.</p>
<p>Behoben: ClipboardAll hat bei bestimmten Formaten das Skript manchmal zum Absturz gebracht.</p>
<p>Behoben: Transform HTML hat die Länge von &amp;#NNN;-Entitäten falsch berechnet.</p>
<p>Behoben: VarSetCapacity ignoriert nun korrekt #MaxMem bei ByRef-Variablen.</p>
<p>Behoben: <code>FileAppend,,Datei.txt</code> setzte ErrorLevel auf 1, auch bei Erfolg.</p>
<p>Behoben: Übereinstimmungslänge wurde bei RegEx-Callouts mit der P)-Option falsch berechnet.</p>
<p>Geändert: Seans Verbesserungen bzgl. der Handhabung von Zahlen in die COM-Interoperabilität integriert.</p>
<p>Geändert: RegExReplace und RegExMatch in Unicode-Versionen optimiert.</p>

<h2 id="L61">Revision 61 - 3. Oktober 2010</h2>
<p>Hinzugefügt: <code>ObjClone(Objekt)</code> (wurde vergessen, als <code>Objekt.Clone()</code> implementiert wurde).</p>
<p>Hinzugefügt: Unterstützung für RegEx-Unicode-Eigenschaften in Unicode-Versionen. Außerdem wurde PCRE auf 8.10 aktualisiert.</p>
<p>Hinzugefügt: <code>Objekt.Remove(int, "")</code> entfernt <code>Objekt[int]</code>, ohne andere Schlüssel zu beeinflussen.</p>
<p>Geändert: <code>ComObj.xyz()</code> wird nun immer als Methodenaufruf behandelt.</p>
<p>Geändert: <code>Var := 123</code> bleibt nun ein Ausdruck, um die Konsistenz zu bewahren. Dadurch wird sichergestellt, dass <code>Var := 123</code> und <code>Var := (123)</code> äquivalent sind. Vorher wurde mit der ersten Zuweisung nur eine Zeichenkette zugewiesen und mit der zweiten Zuweisung sowohl eine Zeichenkette als auch ein zwischengespeicherter binärer Integer zugewiesen. Insbesondere werden dadurch einige verwirrende Fehler durch Nichtübereinstimmung von Typen bei COM-Objekten verhindert.</p>
<p>Behoben: Dynamische variadische Aufrufe von Funktionen mit Pflichtparametern.</p>
<p>Behoben: Der letzte Parameter einer variadischen Assume-Global-Funktion musste explizit als lokal deklariert werden.</p>
<p>Behoben: Statische Initialisierungen störten das Setzen von Haltepunkten.</p>
<p>Behoben: Pointergrößen-bezogene Fehler bei PCRE-Callouts in x64-Versionen.</p>
<p>Behoben: Input mit der M-Option behandelte STRG+M (<code>`r</code>) als STRG+J (<code>`n</code>).</p>
<p>Behoben: <code>Objekt.Remove(n)</code> gab 0 zurück (nicht ""), wenn <code>Objekt[n]</code> nicht existierte.</p>

<h2 id="L60">Revision 60 - 24. September 2010</h2>
<p>Hinzugefügt: <a href="objects/File.htm#Encoding">File.Encoding</a> zum Ändern oder Abrufen des Zeichensatzes eines File-Objekts.</p>
<p>Hinzugefügt: <a href="Functions.htm#Variadic">Variadische Funktionen und Funktionsaufrufe</a> und <a href="commands/RegisterCallback.htm#Indirect">indirekter Modus</a> für Callbacks.</p>
<p>Hinzugefügt: <a href="objects/Object.htm#Clone">Objekt.Clone()</a></p>
<p>Geändert: ByRef-Parameter benötigen nicht länger den Aufrufer, um eine Variable zu liefern.</p>
<p>Geändert: <code>Obj.foo := ""</code> gibt nun den Inhalt von foo wie vorgesehen frei (aber das Objektelement selbst kann damit nicht entfernt werden).</p>
<p>Geändert: OnMessage-Funktionen tolerieren nun optionale Parameter und ByRef-Parameter.</p>
<p>Geändert: RegisterCallback ermöglicht nun den Zugriff auf Callbacks in 32-Bit-Versionen (was in 64-Bit-Versionen bereits möglich war).</p>
<p>Geändert: RegisterCallback behandelt nun ein explizites ParamAnzahl="" als weggelassen.</p>
<p>Behoben: For-Schleife behandelte Nichtausdruck "0" als wahr für geskriptete Enumeratoren.</p>
<p>Behoben: ComEvent (ComObjConnect) funktionierte nicht in der ANSI-Version.</p>
<p>Behoben: ComEvent (ComObjConnect) konnte lokale Variablen nicht korrekt zwischenspeichern/wiederherstellen, wenn eine bereits laufende Funktion erneut aufgerufen wurde.</p>
<p>Behoben: Ein Pufferspeicherüberlauf in A_EndChar, der auftrat, wenn kein Endungszeichen vorhanden ist.</p>
<p>Behoben: Func-&gt;mNextFunc wurde nicht mit NULL initialisiert (wird nur von LowLevel-Skripten verwendet).</p>
<p>Debugger: Es wurde die Möglichkeit hinzugefügt, den Inhalt des Objekts abzurufen (mit einem Debugger-Client, der dies unterstützt).</p>
<p>Debugger: Es wurden einige Fehler behoben.</p>

<h2 id="L59">Revision 59 - 12. September 2010</h2>
<p>Behoben: #If <i>Ausdruck</i> sollte nun jeden <i>Ausdruck</i> höchstens einmal pro Tastendruck auswerten.</p>
<p>Geändert: SplashImage verwendet gängige Routinen zum Laden von Bildern; es unterstützt nun PNG und ähnliches, aber die Ergebnisse können bei Symboldateien anders ausfallen als zuvor.</p>
<p>Hinzugefügt: <code><a href="commands/For.htm">For</a> x,y in z</code>.</p>
<p>Hinzugefügt: <code>Loop .. <a href="commands/Until.htm">Until</a> <i>Ausdruck</i></code>, das bei jeder Art von Schleife genutzt werden kann.</p>
<p>Hinzugefügt: Benannte Schleifen; <code><a href="commands/Continue.htm">continue</a> äußere_Schleife</code>, <code><a href="commands/Break.htm">break</a> 2</code>, usw.</p>
<p>Debugger: Kodiert stdout- und stderr-Pakete als UTF-8.</p>
<p>Debugger: Der Benutzer kann Abbrechen, <b>Wiederholen</b> oder Ignorieren, wenn die erste Verbindung fehlschlägt.</p>
<p>Debugger: Erlaubt das <a href="Scripts.htm#debug_attach">Verbinden eines Debugger-Clients</a> mit dem Skript durch Senden einer registrierten Fenstermeldung.</p>
<p>Debugger: Die Verbindung zum Debugger-Client kann durch Senden des DBGp-Befehls "detach" getrennt werden.</p>

<h2 id="L58">Revision 58 - 5. September 2010</h2>
<p>Hinzugefügt: <code>static Var := Ausdruck</code>.</p>
<h2 id="L57">Revision 57 - 4. September 2010</h2>
<p>Behoben: DllCall-Rückgabetypen Str*, WStr* und AStr* funktionieren nun wie vorgesehen in x64.</p>
<p>Hinzugefügt: <a href="commands/InStr.htm">InStr</a> wurde auf denselben Stand wie StringGetPos gebracht:</p>
<ul>
  <li>Wenn <i>StartPos</i> negativ ist, erfolgt die Suche von rechts nach links, beginnend beim Offset am Ende.</li>
  <li>Ein zusätzlicher Parameter, der spezifiziert, welches <i>Vorkommen</i> der Zeichenkette gefunden werden soll.</li>
</ul>
<p>Hinzugefügt: <code><a href="commands/_Include.htm">#Include</a> &lt;<i>BiblName</i>&gt;</code> zum expliziten Einbinden eines Skripts aus einem <a href="Functions.htm#lib">Funktionsbibliotheksordner</a>.</p>
<p>Hinzugefügt: <a href="commands/IniRead.htm">IniRead</a> und <a href="commands/IniWrite.htm">IniWrite</a> können jetzt eine komplette Sektion lesen bzw. schreiben.</p>
<p>Hinzugefügt: <a href="commands/IniRead.htm">IniRead</a> kann jetzt eine Liste mit Sektionsnamen abrufen.</p>
<p>Hinzugefügt: Ab sofort werden <a href="commands/Run.htm#verbs">benutzerdefinierte Verben</a> in Run/RunWait unterstützt: <code>Run *<i>Verb Datei</i></code>.</p>
<p>Geändert: Es wurden <a href="Compat.htm#Run">Verbesserungen</a> hinsichtlich dessen gemacht, wie Run/RunWait die Aktion und ihre Parameter aus dem <i>Ziel</i>-Parameter extrahiert.</p>
<p>Geändert: Der <i>Offset</i>-Parameter von <a href="commands/NumGet.htm">NumGet</a>/<a href="commands/NumPut.htm">NumPut</a> kann weggelassen werden, da der <i>Typ</i>-Parameter immer nicht-numerisch sein muss.</p>
<p>Geändert: Ein Label kann nun auf das Ende eines Blocks zeigen.</p>

<h2 id="L56">Revision 56 - 29. August 2010</h2>
<p>Hinzugefügt: Ab sofort werden x64-kompilierte Skripte unterstützt. Benötigt Ahk2Exe_L und x64 AutoHotkeySC.bin.</p>
<p>Behoben: Der Deref-Operator (<code>*addr</code>) hat Adressen außerhalb des 32-Bit-Bereichs abgelehnt.</p>
<p>Behoben: Ein Speicherreservierungsfehler bei <code>#If <i>Ausdruck</i></code> in x64.</p>
<p>Behoben: Benutzerdefinierte Hotstring-Endungszeichen mit Codepunkten größer als U+00FF.</p>
<p>Behoben: SendInput/Play hat Sonderzeichen in falscher Reihenfolge gesendet.</p>
<p>Behoben: <code>*/</code> wurde in Fortsetzungsbereichen verworfen (siehe L54).</p>

<h2 id="L55">Revision 55 - 19. August 2010</h2>
<p>Behoben: GroupActivate setzte ErrorLevel nicht auf 1, wenn kein Label angegeben war.</p>
<p>Behoben: Tab-Steuerelemente in der x64-Version.</p>
<p>Behoben: Zeichenkettenkopiermodus von StrPut, wenn Länge weggelassen wird; fehlerhaft seit L53.</p>
<p>Behoben: Datenabgleichprobleme in x64-Versionen.</p>
<p>Geändert: A_LastError wird bei mehreren File*-Befehlen gesetzt, um das Debuggen zu unterstützen.</p>
<p>Dies gilt für FileAppend, FileRead, FileReadLine, FileDelete, FileCopy, FileMove, FileGetAttrib/Time/Size/Version und FileSetAttrib/Time.</p>
<p>Aber nicht für FileCopyDir, FileRecycle, FileMoveDir, FileRemoveDir, FileRecycleEmpty, FileCreateDir und FileInstall, weil die dafür verwendeten APIs nicht immer einen Win32-Fehlercode setzen oder zurückgeben.</p>

<h2 id="L54">Revision 54 - 15. August 2010</h2>
<p>Behoben: RunAs in der Unicode-Version. [jackieku]</p>
<p>Behoben: RegisterCallback in der x64-Version. [fincs]</p>
<p>Behoben: EXE-Dateien können nun in Windows 2000 und Windows XP vor SP2 ausgeführt werden. Windows 2000 benötigt SP4 und Updates (wahrscheinlich KB 816542). XP wurde nicht getestet.</p>
<p>Behoben: Dialogfenster wie MsgBox reagierten nicht mehr, wenn sie von anderen Skript-Threads unterbrochen wurden. Der in L45 hinzugefügte Meldungsfilter/Übergangslösung musste entfernt werden.</p>
<p>Behoben: Multi-Byte-Zeichen im Standard-ANSI-Zeichensatz; dies verursachte auch ein Speicherleck.</p>
<p>Behoben: ComObject erlaubt nun rein numerische Namen für Eigenschaften/Methoden.</p>
<p>Geändert: Benutzerfreundlichkeit und Leistungsfähigkeit von FileOpen/File-Objekten verbessert.</p>
<ul>
  <li>Der <i>Flags</i>-Parameter von FileOpen akzeptiert eine visuell lesbare Zeichenkette mit Flags.</li>
  <li>Der Modus "update" von FileOpen wurde in "read/write" umbenannt und erstellt nun die Datei, wenn sie nicht vorhanden ist.</li>
  <li>FileOpen setzt A_LastError wie vorgesehen.</li>
  <li><code>File := FileOpen(handle,"h")</code> wandelt einen vorhandenen Datei-Handle in ein verwendbares Objekt um.</li>
  <li><code>File.Seek(n)</code> verwendet standardmäßig SEEK_END, wenn n negativ ist.</li>
  <li><code>File.Pos</code> (oder <code>File.Position</code>) kann anstelle von Tell und Seek verwendet werden.</li>
  <li><code>File.Pos</code>, <code>File.Length</code>, <code>File.AtEOF</code> und <code>File.__Handle</code> können ohne leere runde Klammern<code>()</code> verwendet werden.</li>
  <li><code>File.Length</code> kann gesetzt werden, wie in <code>File.Length:=n</code>.</li>
  <li><code>File.Read<i>Num</i>()</code> und <code>File.Write<i>Num</i>(n)</code> schreiben oder lesen eine Zahl - hierbei ist <i>Num</i> der Name eines Zahlentyps, der kompatibel mit NumGet ist.</li>
  <li><code>File.WriteLine(s)</code> ist äquivalent zu <code>File.Write(s "`n")</code>, um mit <code>File.ReadLine()</code> gleichzuziehen.</li>
  <li><code>File.Read()</code> liest und gibt den Rest der Datei zurück, wenn keine Parameter verwendet werden.</li>
  <li>File-Objekte geben nun "" bei unbekannten Methoden und ungültiger Syntax zurück, anstatt die numerische <i>Adresse</i> von "".</li>
</ul>
<p>Geändert: Der Label-Parameter von GroupAdd gilt nun für die gesamte Gruppe. <a href="https://www.autohotkey.com/forum/topic61362.html">[Diskussion]</a></p>
<p>Geändert: GroupActivate setzt ErrorLevel bei Erfolg/Misserfolg. (Der gleiche Thread wie oben)</p>
<p>Geändert: <code>*/</code> am Anfang einer Zeile wird ignoriert, wenn kein <code>/*</code> vorhanden ist. <a href="https://www.autohotkey.com/forum/topic61109.html">[Diskussion]</a></p>
<p>Entfernt: Die Unterbefehle ToCodePage und FromCodePage von Transform.</p>

<h2 id="L53">Revision 53 - 8. August 2010</h2>

<p><b>Mit AutoHotkey64 zusammengeführt</b> - COM-Unterstützung und x64-Kompatibilität.</p>
<p><b>x64</b> (<i>Änderungen seit AutoHotkey64</i>):</p>
<ul>
  <li>Fehler bei Floating-Point-Rückgabewerte und Ausnahmebehandlung für DllCall behoben.</li>
  <li>Fehler bei RegEx-Callouts behoben.</li>
  <li>GetProcAddress-Optimierung für DllCall wieder aktiviert.</li>
  <li>NumPut und NumGet verwenden standardmäßig "Int64" in x64-Versionen.</li>
</ul>
<p><b>COM</b> (<i>Änderungen seit AutoHotkey64</i>):</p>
<ul>
  <li>ComObjParameter kann 64-Bit-Werte in einer 32-Bit-Version wrappen.</li>
  <li>Mehr Standard-Referenzzählung-Konventionen in ComObjActive implementiert.</li>
  <li>Irrelevantes AddRef wird für neue ComObjects in bestimmten Fällen verhindert.</li>
  <li>"pdispVal==NULL"-Rückgabewert von Invoke wird nicht mehr als Fehler behandelt.</li>
  <li>Vorhersehbarer Fehlschlagen, wenn ein falscher Objekttyp übergeben wird.</li>
  <li>Der zweite Parameter von ComObjType muss explizit angegeben werden; "IID" standardmäßig nicht verwenden.</li>
  <li>Lokale Variablen freigeben, nachdem ComEvent eine Funktion aufgerufen hat.</li>
  <li>Der pVarResult-Parameter von ComEvent wurde entfernt; nutze stattdessen den Rückgabewert.</li>
  <li>Das originale Wrapper-ComObject bei jedem ComEvent-Aufruf übergeben.</li>
  <li>Kontext zum ComError-Dialogfenster hinzugefügt; gibt den Schaltflächen mehr Sinn.</li>
</ul>
<p>Gängige Syntaxvalidierung für Enumeratoren implementiert. <code>Enum[]</code> und <code>Enum.Next()</code> können nun mit oder ohne Parameter verwendet werden. <code>Enum[]:=Wert</code> und ähnliche obskure Formen, die in AutoHotkey_COM/AutoHotkey64 funktionierten, sind nicht mehr erlaubt.</p>
<p>Ptr-Typ bleibt vorzeichenfähig (im Gegensatz zu AutoHotkey64), für maximale Flexibilität und Konsistenz.</p>
<p><b>Sonstige Änderungen:</b></p>
<p>Hinzugefügt: <code>Objekt.<b>HasKey</b>(Schlüssel)</code>.</p>
<p>Hinzugefügt: <code>Object(obj)</code> erhöht die Referenzanzahl von obj um 1 und gibt dessen Adresse zurück.</p>
<p>Hinzugefügt: <code>ObjAddRef()</code> und <code>ObjRelease()</code>.</p>
<p>Behoben: A_ThisHotkey enthält nun den erwarteten Wert, wenn es mit #If verwendet wird.</p>
<p>Behoben: RunAs in der Unicode-Version (von jackieku behoben).</p>
<p>Geändert: Standardzeichensatz des Skripts ist in ANSI-Versionen nun CP0 (ANSI).</p>
<p>Geändert: <code>x.y[]</code> ist nun äquivalent zu <code>(x.y)[]</code>, anstatt zu <code>x["y"]</code>.</p>
<p>Geändert: Interne Methoden können nun mit oder ohne Unterstrich-Präfix aufgerufen werden (z. B. <code>obj.MaxIndex()</code> oder <code>obj._MaxIndex()</code>).</p>

<h2 id="L52_2">Revision 52 (nochmal) - 10. Juli 2010</h2>
<p>Hinzugefügt: Interne Variablen und Umgebungsvariablen können nun als Doppeldereferenzen verwendet werden.</p>
<p>Geändert: Verbesserte Unterstützung für Multi-Byte-Zeichen in bestimmten Zeichensätzen (bisher wurden nur 932, 936, 949, 950 und 1361 unterstützt).</p>
<p>Behoben: StrPut schlug bei Zeichensätzen fehl, die WC_NO_BEST_FIT_CHARS nicht unterstützten, wie z. B. UTF-7.</p>
<p>Behoben: Doppeldereferenz als Objekt - <code>text%var%.text</code>.</p>
<p>Behoben: <code>StrPut("", Codierung)</code> null-terminierte eine ungültige Adresse.</p>

<h2 id="L52">Revision 52 - 12. Juni 2010</h2>
<p>Behoben: Der Schlüssel-Parameter von ObjRemove ist nun optional, wie es bereits bei <a href="objects/Object.htm#Remove">Objekt._Remove</a> der Fall ist.</p>
<p>Behoben: Dateien wurden im Gegensatz zu älteren Versionen während des Lesens nicht ordnungsgemäß gesperrt.</p>
<p>Behoben: Die Großschreibung von hexadezimalen Formaten führte dazu, dass negative Integer vorzeichenlos wurden.</p>
<p>Behoben: RegExMatch machte Ausgabe-Array-Elemente unbrauchbar, wenn bestimmte Bedingungen erfüllt waren. Siehe <a href="https://www.autohotkey.com/forum/topic59120.html">Bug Report</a>.</p>

<h2 id="L51">Revision 51 - 11. April 2010</h2>
<p>Geändert: &lt;EXENAME&gt;.ahk anstelle von AutoHotkey.ini oder AutoHotkey.ahk verwenden.</p>
<p>Geändert: Standardmäßig UTF-8 für Skript-Dateien verwenden; kann mit /CPnnn überschrieben werden.</p>
<p>Behoben: Pausiertes Skript bei Beendigung fortsetzen, damit die __Delete-Metafunktion des Objekts ausgeführt werden kann.</p>

<h2 id="L50">Revision 50 - 27. März 2010</h2>
<p>Verbessert: Mehr Flexibilität für <a href="objects/Object.htm#Insert">Objekt._Insert</a>.</p>
<ul>
  <li><code>Objekt._Insert(x)</code> - fügt x bei <code>_MaxIndex()="" ? 1 : _MaxIndex() + 1</code> ein.</li>
  <li><code>Objekt._Insert(i,x,y,z)</code> - fügt <code>x,y,z</code> bei <code>i,i+1,i+2</code> ein.</li>
</ul>
<p>Verbessert: Mehr Flexibilität für <a href="objects/Object.htm#Remove">Objekt._Remove</a>.</p>
<ul>
  <li><code>Objekt._Remove(k)</code> - entfernt den mit k verbundenen Wert und gibt diesen zurück.</li>
  <li><code>Objekt._Remove()</code> - entfernt den Wert von _MaxIndex() und gibt diesen zurück.</li>
</ul>
<p>Hinzugefügt: Freigabemodus-Flags für FileOpen [von jackieku].</p>
<p>Behoben: P-Option von RegExMatch gab bei Teilsuchmustern, die mit nichts übereinstimmten, fälschlicherweise 1 zurück.</p>
<p>Behoben: <code>Objekt._SetCapacity(Schlüssel,n)</code> null-terminierte in einigen Fällen nicht.</p>
<p>Behoben: StatusBarGetText gab nur den halben Text in Unicode-Versionen zurück.</p>

<h2 id="L49">Revision 49 - 14. März 2010</h2>
<p>Hinzugefügt: <a href="objects/Object.htm#NewEnum">obj._NewEnum()</a>.</p>
<p>Hinzugefügt: <a href="objects/Object.htm">ObjMethod(obj)</a> für jede interne <code>obj._Methode()</code>.</p>
<p>Geändert: ObjSet/Get/Call kann nicht länger vom Skript aufgerufen/überschrieben werden.</p>
<p>Behoben: Die in L48 hinzugefügte VK_PACKET-Überprüfung konnte das Skript zum Absturz bringen.</p>
<p>Behoben: Zeichencodes in VK_PACKET-Ereignissen wurden manchmal fälschlicherweise als Scancodes interpretiert.</p>
<p>Behoben: Der Ausnahmetext-Parameter wurde nach dem ersten gefundenen Steuerelement unwirksam.</p>

<h2 id="L48">Revision 48 - 21. Februar 2010</h2>
<p>Behoben: Alleinstehendes <code>obj.()</code> wurde nicht als gültiger Ausdruck erkannt.</p>
<p>Geändert: ControlSend verwendet nun WM_CHAR, um Zeichen zu unterstützen, die keinen zugehörigen Tastencode haben. Dies gilt zum Beispiel für "…" (en-US), "∞" in einer Unicode-Version und <code>{U+221e}</code> in allen Versionen.</p>
<p>Geändert: KeyHistory zeigt nun den kompletten 16-Bit-Zeichencode für VK_PACKET-Ereignisse (VK=E7) an. <a href="commands/Send.htm#Unicode">Send</a> kann indirekt dazu führen, dass diese für Unicode-Zeichen erzeugt werden.</p>

<h2 id="L47">Revision 47 - 13. Februar 2010</h2>
<p>Behoben (Unicode): ControlGet List in Verbindung mit ListView-Steuerelementen.</p>

<h2 id="L46">Revision 46 - 11. Februar 2010</h2>
<p>Hinzugefügt: A_FileEncoding zum Abrufen der aktuellen Standardcodierung einer Datei.</p>
<p>Hinzugefügt: <a href="commands/StrPut.htm">StrPut</a> (zusätzlich wurde <a href="commands/StrGet.htm">StrGet</a> um einige Features erweitert).</p>

<h2 id="L45">Revision 45 - 8. Februar 2010</h2>
<p>Hinzugefügt: _GetAddress; _SetCapacity/_GetCapacity kann nun auf ein bestimmtes Objektelement angewendet werden. <a href="objects/Object.htm">[mehr Infos]</a></p>
<p>Hinzugefügt: Übergangslösung für WM_PAINT-Endlosschleifen, die häufig durch Subclassing verursacht wurden.</p>
<p>Geändert: <code>obj.()</code> kann genutzt werden, um die Standardmethode eines Objekts aufzurufen; äquivalent zu <code>obj[""]()</code>.</p>
<p>Entwickler: Solution- und Project-Dateien für MSBuild 4.0 &amp; VS2010 hinzugefügt. <a href="https://github.com/Lexikos/AutoHotkey_L/commit/ed81ea089c223b46c883036c14454aa4386d3801">[mehr Infos]</a></p>
<p>Behoben (Unicode): 'Running'-Spalte in ListHotkeys.</p>

<h2 id="L44">Revision 44 - 7. Februar 2010</h2>
<p>Behoben: Der Versuch "nichts" zu setzen, führte zum Absturz des Skripts. Zum Beispiel <code>x[]:=z</code>.</p>
<p>Behoben (Unicode): Standardskript konnte nicht gefunden werden (Documents\AutoHotkey.ahk).</p>
<p>Behoben (Unicode): A_Desktop, A_ProgramFiles und mehrere andere interne Variablen, die ihren Wert aus der Registry lesen, führten zu einer fehlerhaften Terminierung von Zeichenketten.</p>
<p>Behoben (ANSI): Zeichen im Bereich von 0x80 bis 0xFF konnten nicht von InStr oder StringReplace gefunden werden.</p>
<p>Geändert (ANSI): ToCodePage/FromCodePage werden wie andere nicht unterstützte/ungültige Unterbefehle behandelt.</p>

<h2 id="L43">Revision 43 - 29. Januar 2010</h2>
<p>Behoben: obj.Func() gab nicht wie eigentlich vorgesehen eine leere Zeichenkette, sondern einen zufälligen Integer zurück.</p>

<h2 id="L42">Revision 42 - 28. Januar 2010</h2>
<p>Mit AutoHotkeyU zusammengeführt.</p>
<p>Zahlreiche Bugfixes und Verbesserungen, teilweise bezogen auf die Zusammenführung.</p>

<h2 id="L41">Revision 41 - 20. Dezember 2009</h2>
<p>Behoben: Floating-Point-Zahlen entsprachen einer leeren Zeichenkette, wenn sie als Schlüssel in Objekten verwendet wurden. Sie werden nun wie vorgesehen in numerischen Zeichenketten umgewandelt, abhängig vom <a href="commands/SetFormat.htm">Float-Format</a>.</p>

<h2 id="L40">Revision 40 - 13. Dezember 2009</h2>
<p>Geändert: Erhöhte Flexibilität für Metafunktionen und Multi-Parameter-Verhalten. Metafunktionen werden nun aufgerufen, *bevor* nach einem geeigneten Objektelement in jedem Basisobjekt gesucht wird; Werte in x.base werden allerdings die in x.base.base definierten Metafunktionen überschreiben. Metafunktionen können nun durch Vermeidung von "Return" verketten werden (Vererbung).</p>
<p>Geändert: Standard-Base-Funktionalität wurde verbessert, um eine höhere Konsistenz mit realen Objekten zu gewährleisten.</p>
<p>Geändert (Debugger): Während der Code schrittweise durchlaufen wird, werden alle geschweiften Klammern, außer solche, die eine Funktion beenden, übersprungen.</p>
<p>Geändert (Debugger): Wenn das versteckte "Exit" am Ende des Skripts erreicht wird, sollte es so behandelt werden, dass es *unterhalb* der letzten physischen Zeile ist, um Verwirrung zu vermeiden.</p>

<h2 id="L39">Revision 39 - 2. Dezember 2009</h2>
<p>Behoben (Debugger): Fehler in der von property_set verwendeten Base64-Decodierung.</p>

<h2 id="L38">Revision 38 - 17. November 2009</h2>
<p>Hinzugefügt: <a href="commands/_MenuMaskKey.htm">#MenuMaskKey</a>-Direktive zum Ändern der Taste, mit der KeyUp-Ereignisse von WIN oder ALT maskiert werden. Weitere Hintergrundinformationen finden Sie in <a href="https://www.autohotkey.com/forum/topic22378.html">diesem Thread</a>.</p>
<p>Geändert: Wenn <code>x[1,2]:=3</code> ein Objekt für <code>x[1]</code> erstellt, wird dessen Basis nicht länger automatisch auf <code>x.base</code> gesetzt. In <a href="Objects.htm#Subclassing_aoa">der Dokumentation</a> finden Sie eine Methode, wie dieses Verhalten kontrolliert werden kann.</p>

<h2 id="L37">Revision 37 - 7. November 2009</h2>
<p>Hinzugefügt: Unterstützung für die Objektaufrufsyntax <code>obj[Methodenname](Parameter)</code>.</p>

<h2 id="L36">Revision 36 - 4. November 2009</h2>
<p>Geändert: Wenn unmittelbar nach <code>x.y</code> oder Ähnliches eine eckige Startklammer (<code>[</code>) erfolgt, wird der Identifikator ganz rechts vor der Klammer als erster Parameter der Operation behandelt. Zum Beispiel ist <code>a.b.c[d]</code> äquivalent zu <code>ObjGet(a.b,"c",d)</code> und <code>x.y[z]:=v</code> äquivalent zu <code>ObjSet(x,"y",z,v)</code>. Bisher wurde jeder Teilausdruck vor einer eckigen Klammer separat ausgewertet.</p>
<p>Geändert: Wenn unmittelbar nach einem Methodenaufruf wie <code>x.y()</code> eine Zuweisung erfolgt, werden die runden Klammern als eckige Klammern behandelt. Zum Beispiel ist <code>x.y(z):=v</code> nun äquivalent zu <code>ObjSet(x,"y",z,v)</code>.</p>
<p>Behoben: If(Ausdruck) und While(Ausdruck) ohne trennendes Leerzeichen oder Komma.</p>

<h2 id="L35">Revision 35 - 25. Oktober 2009</h2>
<p>Behoben: Alleinstehende Ausdrücke, die mit zwei oder mehr "Punkten" beginnen, wie z. B. <code>x.y.z()</code>. (fehlerhaft seit L34). Beachten Sie, dass '(' oder '[' oder ':=' noch erforderlich ist.</p>

<h2 id="L34">Revision 34 - 24. Oktober 2009</h2>
<p>Geändert: Das Setzen einer leeren Zeichenkette innerhalb eines Objekts speichert nun die leere Zeichenkette, anstatt das Schlüssel-Wert-Paar vom Objekt zu entfernen. Verwenden Sie stattdessen _Remove zur vollständigen Entfernung von Schlüssel-Wert-Paaren.</p>
<p>Geändert: Befehlsnamen müssen mit einem Leerzeichen, Tabulator oder Komma terminiert werden. Die folgenden Zeichen umgehen nicht länger diese Anforderung: <code>&lt;&gt;:+-*/!~&amp;|^[]</code>. Zum Beispiel werden nun Syntaxfehler wie <code>MsgBox&lt; foo</code> und <code>If!foo</code> beim Laden des Skripts abgefangen.</p>
<p>Behoben: Return kann nun korrekt mit Ausdrücken umgehen, die zu einer Variable, in der sich ein Objekt befindet, ausgewertet werden. Zum Beispiel sollten <code>Return x:=y</code>, <code>Return (x)</code>, <code>Return x,...</code> und ähnliches nun wie vorgesehen funktionieren (<code>Return x</code> hat bereits funktioniert).</p>
<p>Behoben: Multiparameter get/set unterstützte nicht korrekt Metafunktionen für mehrere Objekte (wie z. B. für <code>x</code> <i>und</i> <code>x[y]</code> im Ausdruck <code>x[y,z]</code>).</p>
<p>Behoben: Verkettende Objektzuweisungen, wie z. B. das <code>x[y]:=z</code> in <code>r:=x[y]:=z</code>, konnten keine Zahlen oder Objekte als Ergebnis liefern - fehlerhaft seit L33.</p>
<p>Behoben: <code>x._Remove(y)</code> führte zum Absturz des Skripts oder entfernte das falsche Element, wenn <code>x</code> nicht <code>y</code> enthielt.</p>
<p>Behoben: <code>x.=y</code>, <code>if x.y=...</code> und Ähnliches. Betrifft wahrscheinlich auch andere Ausdrücke.</p>
<p>Behoben: Alleinstehende ternäre Ausdrücke benötigen keine Leerzeichen mehr. Zum Beispiel ist jetzt <code>x? F(1) : F(2)</code> möglich.</p>
<p>Debugger: Beim Beenden des Skripts wird die Verbindung zum Debugger erst getrennt, *nachdem* Objekte freigegeben wurden, damit die __Delete-Handler debuggt werden können.</p>

<h2 id="L33">Revision 33 - 3. Oktober 2009</h2>
<p>Behoben: Lokale Variablen wurden nicht automatisch für Funktionen freigegeben, die Objekte oder reine Zahlen zurückgeben.</p>
<p>Behoben: Zwei separate Referenzzählungsfehler in Bezug auf dem ternären Operator und Object().</p>
<p>Behoben: Die Länge einer Variable wird nicht mehr falsch gesetzt, wenn ihr eine Zeichenkette zugewiesen wird, die von einer geskripteten Objektfunktion zurückgegeben wurde.</p>
<p>Behoben: Objekte und Zeichenkette werden nicht länger vorzeitig freigegeben, wenn die letzte Operation in einem Ausdruck eine Zeichenkette aus einem temporären Objekt abruft.</p>
<p>Behoben: Numerische Zeichenketten mit spezieller Formatierung wurden nicht beibehalten, wenn sie von einer Funktion via Variable zurückgegeben oder an einer rekursiven Funktion weitergegeben wurden.</p>
<p>Behoben: Wenn das Endergebnis eines Ausdrucks (außer bei Return) ein Objekt ist, wird nun korrekt eine leere Zeichenkette zurückgegeben, anstatt den Thread stillschweigend abzubrechen.</p>
<p>Behoben: __Delete-Metafunktionen überschrieben manchmal temporäre Werte im Deref-Pufferspeicher.</p>
<p>Hinzugefügt: Eine via &amp;Objekt abgerufene Adresse kann mithilfe von Object(Adresse) in eine Objektreferenz zurückverwandelt werden.</p>

<h2 id="L32">Revision 32 - 26. September 2009</h2>
<p>Behoben: Send/PostMessage-Absturz, wenn weniger als drei Parameter angegeben wurden.</p>

<h2 id="L31">Revision 31 - 26. September 2009</h2>
<p>Hinzugefügt: Objekt/Array-Unterstützung und darauf bezogene zahlreiche kleinere Änderungen.</p>
<p>Hinzugefügt: While(Ausdruck) kann ohne trennendes Leerzeichen verwendet werden.</p>
<p>Hinzugefügt: Trim, LTrim, RTrim.</p>
<p>Hinzugefügt: A ~= B; äquivalent zu RegExMatch(A, B). Wird eventuell in einer zukünftigen Version entfernt.</p>
<p>Behoben: Eine Inkompatibilität mit LowLevel.</p>
<p>Geändert: Die Zeichen [, ] und ? sind nicht länger in Variablennamen gültig. Folglich benötigt ? (ternär) auf beiden Seiten kein Leerzeichen mehr.</p>
<p>Geändert: Optionale Parameter können nun an beliebiger Position in der Parameterliste eines nicht-dynamischen Funktionsaufrufs weggelassen werden. Um das zu realisieren, wird der Standardwert eines Parameters bereits beim Laden des Skripts automatisch eingefügt, infolgedessen ist diese Vorgehensweise für dynamische Funktionsaufrufe nicht erlaubt bzw. möglich.</p>
<p>Debugger: Verschiedene kleinere Änderungen, um den Programmablauf einfacher nachzuvollziehen, während der Code schrittweise durchlaufen wird.</p>
<p>Optimierung: Wenn der erste Parameter von DllCall eine direkt geschriebene Zeichenkette ist, die eine bereits im Speicher vorhandene Funktion identifiziert, wird sie mit der aktuellen Adresse der Funktion ersetzt.</p>
<p>Von v1.0.48.03 auf v1.0.48.04 aktualisiert.</p>

<h2 id="L30">Revision 30 - 31. Mai 2009</h2>
<p>Von v1.0.48.02 auf v1.0.48.03 aktualisiert.</p>

<h2 id="L29">Revision 29 - 2. Mai 2009</h2>
<p>Jedes unterstützte Bildformat kann jetzt als Menüsymbol verwendet werden. Derzeit ist es notwendig, die tatsächliche Größe anzugeben, wenn die Transparenz des Symbols in Windows Vista oder höher erhalten bleiben soll. Zum Beispiel:</p>
<pre>Menu, Icon, MenüpunktName, Dateiname.png,, 0</pre>

<h2 id="L28">Revision 28 - 2. Mai 2009</h2>
<p>Die Average-Case-Performance von dynamischen Funktionsaufrufen wurde mittels Implementierung einer binären Suche nach Funktionsnamen verbessert. Diese Änderung betrifft auch andere Bereiche, wie z. B. die Ladezeitauflösung von Funktionsreferenzen in Ausdrücken und die Laufzeitauflösung über OnMessage, RegisterCallback, etc.</p>

<h2 id="L27">Revision 27 - 26. April 2009</h2>
<p>Von v1.0.48.00 auf v1.0.48.02 aktualisiert.</p>

<h2 id="L26">Revision 26 - 11. April 2009</h2>
<p>Behoben: Menüsymbole wurden nicht auf Menüpunkten mit Untermenüs gezeichnet, wenn Owner-Drawing verwendet wurde.</p>
<p>Behoben: Menüsymbole wurden nicht freigegeben, wenn alle Menüpunkte auf einmal gelöscht wurden.</p>
<p>Geändert (Source): AutoHotkey.sln in AutoHotkey_L.sln umbenannt, damit das VS-Fenster leichter identifiziert werden kann.</p>

<h2 id="L25">Revision 25 - 30. März 2009</h2>
<p>Behoben: Send {U+xxxx} setzt nun korrekt den Modifikatorstatus wie bei einer normalen Taste.</p>
<p>Behoben: Send {U+..xx} löst nicht länger einen SCxx-Hotkey aus.</p>

<h2 id="L24">Revision 24 - 30. März 2009</h2>
<p>Hinzugefügt: Unterstützung für Send {U+xxxx}. Für eine ordnungsgemäße Unicode-Unterstützung wird SendInput() verwendet, sofern möglich, ansonsten wird auf die ALT+Ziffernblock-Methode zurückgegriffen.</p>

<h2 id="L23">Revision 23 - 30. März 2009</h2>
<p>Behoben: GuiControl Enable/Disable setzt den Fokus nur noch neu, wenn das fokussierte Steuerelement deaktiviert war.</p>

<h2 id="L22">Revision 22 - 26. März 2009</h2>
<p>Geändert: If var [not] in/contains VergleichListe wurde optimiert, insbesondere für lange Listen mit kürzeren Feldern.</p>

<h2 id="L21">Revision 21 - 16. März 2009</h2>
<p>Kleinere Optimierungen für While. [Danke an Chris]</p>
<p>Behoben (Debugger): Revisionen 19 und 20 hatten Timer-Threads in der Aufrufliste weggelassen.</p>
<p>Behoben (Debugger): XML-reservierte Zeichen wurden so gut wie nie mit einem Escapezeichen versehen.</p>
<p>Behoben (Debugger): Falscher Befehl und transaction_id wurden in der letzten Antwort verwendet, bevor das Skript beendet wurde.</p>

<h2 id="L20">Revision 20 - 27. Februar 2009</h2>
<p>Geändert: Wenn ein Symbol nicht mit der neuen Methode geladen werden kann, wird auf die alte Methode zurückgegriffen.</p>

<h2 id="L19">Revision 19 - 26. Februar 2009</h2>
<p>Hinzugefügt: Neue Option "Gui, Font, qN" (hierbei ist N eine Zahl im Bereich von 0 bis 5) zum Ändern der Schriftqualität bzw. Einstellen der Kantenglättung.</p>
<p>Behoben: IL_Add lädt nun Symbole in der am besten geeigneten Größe, wenn mehrere Größen vorhanden sind.</p>
<p>Mit AutoHotkey v1.0.48 zusammengeführt, die Fehlerbehebungen, Optimierungen und andere Änderungen von Chris umfasst. Einige AutoHotkey_L-Features wurden in die Hauptversion integriert; folgende Änderungen wurden seit den vorherigen Revisionen an diesen Features vorgenommen:</p>
<ul>
  <li>Das bisherige Verhalten wird nicht mehr auf While angewendet - das heißt, dass zum Beispiel "While %x%" nicht mehr als "While x", sondern korrekt als Doppeldereferenz interpretiert wird.</li>
  <li>Der One True Brace Style kann nun für While verwendet werden.</li>
  <li>Statische Variablen können nun in Assume-Static-Funktionen deklariert und initialisiert werden.</li>
  <li>Es ist nicht mehr möglich, zu <em>wenig</em> Parameter bei einem dynamischen Funktionsaufruf zu übergeben, da dies dazu führte, dass der Aufrufer der Funktion das Design der Funktion erraten musste, was das Erkennen von Skript-Fehlern während der Laufzeit erschwerte und zum Absturz der Anwendung führen konnte, wenn eine interne Funktion aufgerufen wird.</li>
</ul>

<h2 id="L18">Revision 18 - 21. Februar 2009</h2>
<p>Behoben: Durch die unvollständige Fehlerbehebung in der vorherigen Revision bewirkte eine Verkettung gefolgt von einer Zuweisung, dass der Rest des Ausdrucks in einigen Fällen übersprungen wurde.</p>

<h2 id="L17">Revision 17 - 20. Februar 2009</h2>
<p>Hinzugefügt: Menüsymbole können jetzt mit dem Icon- oder NoIcon-Unterbefehl des Menu-Befehls hinzugefügt bzw. entfernt werden.</p>
<p>Geändert: Negative Symbolnummern können nun verwendet werden, um eine Ressourcen-ID innerhalb einer EXE-Datei zu kennzeichnen.</p>
<p>Geändert: MNS_CHECKORBMP als Standard-Style für Menüs hinzugefügt.</p>
<p>Geändert: Es wird nun die kleine als auch große Version eines benutzerdefinierten Tray-Symbols geladen, damit das richtige Symbol an den entsprechenden Stellen angezeigt werden kann.</p>
<p>Behoben: Symbole, die eine andere Größe als die üblichen Systemgrößen Klein/Groß haben, werden nun korrekt aus EXE-Dateien geladen.</p>

<h2 id="L16">Revision 16 - 4. Februar 2009</h2>
<p>Behoben: Beim Löschen eines Menüpunktes wurde teilweise auch das zugehörige Untermenü gelöscht.</p>

<h2 id="L15">Revision 15 - 1. Februar 2009</h2>
<p>Behoben: Wenn man SetFormat in einem *kompilierten* Skript verwendet, wurde der Binärzahl-Schreibcache nicht deaktiviert. SetFormat sollte nun ordnungsgemäß in kompilierten Skripten funktionieren.</p>

<h2 id="L14">Revision 14 - 1. Februar 2009</h2>
<p>Zahlreiche Fehlerbehebungen und Optimierungen von Chris (pre-v1.0.48 beta).</p>
<p>Hinzugefügt: Unterstützung für RegEx-Callouts und die Auto-Callout-Option 'C'.</p>
<p>Geändert: A_AhkVersion beinhaltet nun die Revisionsnummer. Zum Beispiel 1.0.47.07.L14.</p>
<p>Behoben: HWNDs/Fenster-IDs wurden via Vorzeichenerweiterung auf 64-Bit erweitert. Zum Beispiel wurde 0xb482057e zu 0xffffffffb482057e.</p>

<h2 id="L13">Revision 13 - 29. November 2008</h2>
<p>Behoben: Ungültige DllCall-Typen wurden als INT in einigen Build-Umgebungen behandelt.</p>
<p>Hinzugefügt: Übergangslösung für das GuiEscape-Problem beim Deaktivieren des fokussierten Steuerelements.</p>
<p>Geänderte Versionsinformation: InternalName, ProductName und FileDescription sind nun "AutoHotkey_L" statt "AutoHotkey".</p>

<h2 id="L12">Revision 12 - 6. September 2008</h2>
<p>Behoben: Mögliche Zugriffsverletzung, wenn property_get auf eine interne Variable angewendet wird. -- DBGP</p>

<h2 id="L11">Revision 11 - 5. September 2008</h2>
<p>Behoben: Prüfsumme wird nach Erstellen der Datei AutoHotkeySC.bin via Skript entfernt (AutoHotkey muss installiert sein).</p>
<p>Hinzugefügt: .L-Suffix in A_AhkVersion.</p>
<p>Hinzugefügt: Vorläufige Unterstützung für DBGp (interaktives Debuggen).</p>

<h2 id="L10">Revision 10 - 2. August 2008</h2>
<p>Behoben: Die seit Revision 9 fehlerhafte Unterstützung von WheelLeft/WheelRight wurde wiederhergestellt.</p>

<h2 id="L9">Revision 9 - 29. Juli 2008</h2>
<p>Behoben: Break/Continue kann nun in While verwendet werden.</p>
<p>Behoben: TrayTip in nicht-englischen Windows-Versionen und möglicherweise andere Nebeneffekte der Verwendung von Vista-Headern.</p>

<h2 id="L8">Revision 8 - 27. Juli 2008</h2>
<p>Hinzugefügt: #IfTimeout-Direktive zum Limitieren der Auswertungszeit von #If-Ausdrücken (in Millisekunden). 1000 ist Standard.</p>
<p>Hinzugefügt: Assume-Static-Modus für Funktionen. "Static" muss vor jeder lokalen/globalen Variablendeklaration erfolgen.</p>
<p>Hinzugefügt: One-True-Brace-Unterstützung für While.</p>
<p>Geändert: While setzt nun A_Index auf den gleich zu startenden Durchlauf.</p>

<h2 id="L7">Revision 7 - 26. Juli 2008</h2>
<p>Hinzugefügt: IsFunc(FunkName) - Gibt eine Zahl ungleich 0 zurück, wenn FunkName im Skript oder als interne Funktion existiert.</p>

<h2 id="L5">Revision 5 - 19. Juli 2008</h2>
<p>Veraltete Referenzen zu Test-Skripten entfernt.</p>
<p>Einfaches Standard-Test-Skript hinzugefügt.</p>

<h2 id="L4">Revision 4 - 18. Juli 2008</h2>
<p>Hinzugefügt: #if (Ausdruck) - Vergleichbar mit #IfWinActive, aber für beliebige Ausdrücke.</p>
<p>Hinzugefügt: WheelLeft, WheelRight - Unterstützung für WM_MOUSEHWHEEL, die mit Windows Vista eingeführt wurde. (Benötigt Vista).</p>
<p>Hinzugefügt: While, Ausdruck - Anweisungen wiederholen, während eine Bedingung wahr ist.</p>
<p>Hinzugefügt: A_IsPaused - Wahr, wenn der darunterliegende Thread pausiert ist.</p>
<p>Hinzugefügt: A_IsCritical - Wahr, wenn der aktuelle Thread mithilfe des "Critical"-Befehls als unterbrechungsfrei markiert ist.</p>
<p>Geändert: Es können beliebig viele Parameter bei dynamischen Funktionsaufrufen übergeben werden.</p>
<p>Behoben: Eine Zugriffsverletzung, die von WinGetClass und unterklassierten Fenstern hervorgerufen wurde.</p>
<p>Behoben: Eine Zugriffsverletzung, die von leeren dynamischen Funktionsreferenzen hervorgerufen wurde.</p>

</body>
</html>
